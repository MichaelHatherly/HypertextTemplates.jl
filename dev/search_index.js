var documenterSearchIndex = {"docs":
[{"location":"components/#Components-Guide","page":"Components","title":"Components Guide","text":"","category":"section"},{"location":"components/","page":"Components","title":"Components","text":"Components are the building blocks for creating reusable, maintainable templates in HypertextTemplates.jl. This guide covers everything from basic component creation to advanced patterns.","category":"page"},{"location":"components/#Basic-Component-Definition","page":"Components","title":"Basic Component Definition","text":"","category":"section"},{"location":"components/","page":"Components","title":"Components","text":"Components are defined using the @component macro applied to a function:","category":"page"},{"location":"components/","page":"Components","title":"Components","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n@component function greeting(; name = \"World\")\n    @div {class = \"greeting\"} begin\n        @h1 \"Hello, \" $name \"!\"\n    end\nend\n\n# Important: Define a macro for the component\n@deftag macro greeting end\n\n# Now you can use it\nhtml = @render @greeting {name = \"Julia\"}\n\nMain.display_html(html) #hide","category":"page"},{"location":"components/","page":"Components","title":"Components","text":"# Also works with default value\nhtml2 = @render @greeting\n\nMain.display_html(html2) #hide","category":"page"},{"location":"components/#Component-Properties-(Props)","page":"Components","title":"Component Properties (Props)","text":"","category":"section"},{"location":"components/","page":"Components","title":"Components","text":"Props are passed as keyword arguments to component functions:","category":"page"},{"location":"components/#Required-Props","page":"Components","title":"Required Props","text":"","category":"section"},{"location":"components/","page":"Components","title":"Components","text":"Omit default values to make props required:","category":"page"},{"location":"components/","page":"Components","title":"Components","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n@component function user_card(; username, email)  # Both required\n    @div {class = \"user-card\"} begin\n        @h3 $username\n        @p $email\n    end\nend\n\n@deftag macro user_card end\n\n# Must provide both props\nhtml = @render @user_card {username = \"julia_dev\", email = \"julia@example.com\"}\nMain.display_html(html) #hide","category":"page"},{"location":"components/#Optional-Props-with-Defaults","page":"Components","title":"Optional Props with Defaults","text":"","category":"section"},{"location":"components/","page":"Components","title":"Components","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n@component function my_button(; \n    text = \"Click me\",\n    type = \"button\",\n    variant = \"primary\",\n    disabled = false\n)\n    classes = \"btn btn-\" * variant\n    @button {type, class = classes, disabled} $text\nend\n\n@deftag macro my_button end\n\n# Use with defaults\n@render @my_button {}\n\nMain.display_html(ans) #hide","category":"page"},{"location":"components/","page":"Components","title":"Components","text":"# Override specific props\n@render @my_button {text = \"Submit\", variant = \"success\"}\n\nMain.display_html(ans) #hide","category":"page"},{"location":"components/","page":"Components","title":"Components","text":"# With disabled state\n@render @my_button {text = \"Loading...\", disabled = true}\nMain.display_html(ans) #hide","category":"page"},{"location":"components/#Typed-Props","page":"Components","title":"Typed Props","text":"","category":"section"},{"location":"components/","page":"Components","title":"Components","text":"Leverage Julia's type system for safer components:","category":"page"},{"location":"components/","page":"Components","title":"Components","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n@component function product_price(; \n    amount::Number,\n    currency::String = \"USD\",\n    decimal_places::Int = 2\n)\n    formatted = round(amount, digits = decimal_places)\n    @span {class = \"price\"} begin\n        @span {class = \"currency\"} $currency\n        @span {class = \"amount\"} $formatted\n    end\nend\n\n@deftag macro product_price end\n\n# Usage with different types\n@render @product_price {amount = 29.99}\n\nMain.display_html(ans) #hide","category":"page"},{"location":"components/","page":"Components","title":"Components","text":"@render @product_price {amount = 100, currency = \"EUR\", decimal_places = 0}\n\nMain.display_html(ans) #hide","category":"page"},{"location":"components/#Slots-System","page":"Components","title":"Slots System","text":"","category":"section"},{"location":"components/","page":"Components","title":"Components","text":"Slots allow components to accept content from their parent, enabling flexible composition.","category":"page"},{"location":"components/#Default-Slot","page":"Components","title":"Default Slot","text":"","category":"section"},{"location":"components/","page":"Components","title":"Components","text":"The simplest form - a single content area:","category":"page"},{"location":"components/","page":"Components","title":"Components","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n@component function card(; title)\n    @div {class = \"card\"} begin\n        @div {class = \"card-header\"} @h3 $title\n        @div {class = \"card-body\"} begin\n            @__slot__  # Default slot receives content\n        end\n    end\nend\n\n@deftag macro card end\n\n# Usage with content\nhtml = @render @card {title = \"User Profile\"} begin\n    @p \"Name: Alice\"\n    @p \"Role: Developer\"\nend\nMain.display_html(html) #hide","category":"page"},{"location":"components/#Named-Slots","page":"Components","title":"Named Slots","text":"","category":"section"},{"location":"components/","page":"Components","title":"Components","text":"For more complex layouts with multiple content areas:","category":"page"},{"location":"components/","page":"Components","title":"Components","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n@component function layout()\n    @div {class = \"layout\"} begin\n        @header {class = \"layout-header\"} begin\n            @__slot__ header  # Named slot: header\n        end\n        @article {class = \"layout-main\"} begin\n            @__slot__  # Default slot\n        end\n        @footer {class = \"layout-footer\"} begin\n            @__slot__ footer  # Named slot: footer\n        end\n    end\nend\n\n@deftag macro layout end\n\n# Usage with named slots\nhtml = @render @layout begin\n    # Named slot content uses := syntax\n    header := begin\n        @h1 \"My Application\"\n        @nav begin\n            @a {href = \"/\"} \"Home\"\n            @a {href = \"/about\"} \"About\"\n        end\n    end\n\n    # Default slot content\n    @section begin\n        @h2 \"Welcome\"\n        @p \"This is the main content area.\"\n    end\n\n    footer := @p \"© 2024 My Company\"\nend\n\nMain.display_html(html) #hide","category":"page"},{"location":"components/#Conditional-Slots","page":"Components","title":"Conditional Slots","text":"","category":"section"},{"location":"components/","page":"Components","title":"Components","text":"Slots can be conditionally rendered:","category":"page"},{"location":"components/","page":"Components","title":"Components","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n@component function message(; type = \"info\", dismissible = false)\n    @div {class = \"message message-$type\"} begin\n        @__slot__  # Message content\n\n        if dismissible\n            @button {class = \"message-close\"} begin\n                @__slot__ close_button  # Optional slot\n            end\n        end\n    end\nend\n\n@deftag macro message end\n\n# Without close button content\nhtml1 = @render @message {type = \"warning\"} begin\n    @p \"This is a warning\"\nend\n\nMain.display_html(html1) #hide","category":"page"},{"location":"components/","page":"Components","title":"Components","text":"# With custom close button\nhtml2 = @render @message {type = \"error\", dismissible = true} begin\n    @p \"An error occurred\"\n    close_button := @span \"×\"\nend\n\nMain.display_html(html2) #hide","category":"page"},{"location":"components/#Slot-Fallbacks","page":"Components","title":"Slot Fallbacks","text":"","category":"section"},{"location":"components/","page":"Components","title":"Components","text":"Provide default content when slots are empty:","category":"page"},{"location":"components/","page":"Components","title":"Components","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n@component function avatar(; src = nothing, alt = \"\")\n    @div {class = \"avatar\"} begin\n        if !isnothing(src)\n            @img {src, alt}\n        else\n            @div {class = \"avatar-placeholder\"} begin\n                # Show slot content (initials)\n                @__slot__\n            end\n        end\n    end\nend\n\n@deftag macro avatar end\n\n# With image\nhtml1 = @render @avatar {src = \"/user.jpg\", alt = \"User\"}\n\nMain.display_html(html1) #hide","category":"page"},{"location":"components/","page":"Components","title":"Components","text":"# With placeholder (slot content)\nhtml2 = @render @avatar {alt = \"John Doe\"} begin\n    @span \"JD\"  # Initials as fallback\nend\n\nMain.display_html(html2) #hide","category":"page"},{"location":"components/#Component-Composition","page":"Components","title":"Component Composition","text":"","category":"section"},{"location":"components/","page":"Components","title":"Components","text":"Components can use other components, enabling powerful composition patterns:","category":"page"},{"location":"components/#Basic-Composition","page":"Components","title":"Basic Composition","text":"","category":"section"},{"location":"components/","page":"Components","title":"Components","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n@component function nav_link(; href, active = false)\n    class = active ? \"nav-link active\" : \"nav-link\"\n    @a {href, class} @__slot__\nend\n\n@deftag macro nav_link end\n\n@component function navbar(; links, current_path = \"/\")\n    @nav {class = \"navbar\"} begin\n        @ul begin\n            for link in links\n                @li begin\n                    @nav_link {\n                        href = link.href,\n                        active = link.href == current_path\n                    } begin\n                        @text link.text\n                    end\n                end\n            end\n        end\n    end\nend\n\n@deftag macro navbar end\n\n# Usage\nlinks = [\n    (href = \"/\", text = \"Home\"),\n    (href = \"/about\", text = \"About\"),\n    (href = \"/contact\", text = \"Contact\")\n]\n\nhtml = @render @navbar {links, current_path = \"/about\"}\n\nMain.display_html(html) #hide","category":"page"},{"location":"components/#Higher-Order-Components","page":"Components","title":"Higher-Order Components","text":"","category":"section"},{"location":"components/","page":"Components","title":"Components","text":"Create components that modify behavior of other components:","category":"page"},{"location":"components/","page":"Components","title":"Components","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n@component function with_tooltip(; tooltip, position = \"top\")\n    @div {\n        class = \"tooltip-wrapper\",\n        \"data-tooltip\" := tooltip,\n        \"data-position\" := position\n    } begin\n        @__slot__\n    end\nend\n\n@deftag macro with_tooltip end\n\n# Wrap any content with tooltip\nhtml = @render @with_tooltip {tooltip = \"Click to submit\"} begin\n    @button \"Submit\"\nend\n\nMain.display_html(html) #hide","category":"page"},{"location":"components/#Component-Arrays","page":"Components","title":"Component Arrays","text":"","category":"section"},{"location":"components/","page":"Components","title":"Components","text":"Render collections of components:","category":"page"},{"location":"components/","page":"Components","title":"Components","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n@component function todo_item(; task, completed = false)\n    @li {class = completed ? \"completed\" : \"\"} begin\n        @input {type = \"checkbox\", checked = completed}\n        @span \" \" $task\n    end\nend\n\n@deftag macro todo_item end\n\n@component function todo_list(; items)\n    @ul {class = \"todo-list\"} begin\n        for item in items\n            @todo_item {task = item.task, completed = item.completed}\n        end\n    end\nend\n\n@deftag macro todo_list end\n\n# Example usage\nitems = [\n    (task = \"Write documentation\", completed = true),\n    (task = \"Add tests\", completed = false),\n    (task = \"Deploy to production\", completed = false)\n]\n\nhtml = @render @todo_list {items}\n\nMain.display_html(html) #hide","category":"page"},{"location":"components/#Dynamic-Components","page":"Components","title":"Dynamic Components","text":"","category":"section"},{"location":"components/","page":"Components","title":"Components","text":"Use the @< macro to render components dynamically:","category":"page"},{"location":"components/#Component-as-Props","page":"Components","title":"Component as Props","text":"","category":"section"},{"location":"components/","page":"Components","title":"Components","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n@component function flexible_layout(; \n    header_component = nothing,\n    main_component = article,\n    sidebar = true\n)\n    @div {class = \"layout\"} begin\n        if !isnothing(header_component)\n            @<header_component\n        end\n\n        @<main_component {class = \"main-content\"} begin\n            @__slot__\n        end\n\n        if sidebar\n            @aside {class = \"sidebar\"} begin\n                @__slot__ sidebar\n            end\n        end\n    end\nend\n\n@deftag macro flexible_layout end\n\n# Custom header component\n@component function custom_header()\n    @header {class = \"fancy-header\"} begin\n        @h1 \"My App\"\n    end\nend\n\n# Usage\nhtml = @render @flexible_layout {\n    header_component = custom_header,\n    main_component = section\n} begin\n    @p \"Main content here\"\n    sidebar := @p \"Sidebar content\"\nend\n\nMain.display_html(html) #hide","category":"page"},{"location":"components/#Conditional-Component-Selection","page":"Components","title":"Conditional Component Selection","text":"","category":"section"},{"location":"components/","page":"Components","title":"Components","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# Define icon components\n@component function error_icon()\n    @span {class = \"icon icon-error\"} \"❌\"\nend\n\n@component function warning_icon()\n    @span {class = \"icon icon-warning\"} \"⚠️\"\nend\n\n@component function info_icon()\n    @span {class = \"icon icon-info\"} \"ℹ️\"\nend\n\n@component function alert(; type = \"info\", message)\n    # Select icon based on type\n    icon_component = if type == \"error\"\n        error_icon\n    elseif type == \"warning\"\n        warning_icon\n    else\n        info_icon\n    end\n\n    @div {class = \"alert alert-$type\"} begin\n        @<icon_component\n        @span \" \"\n        @span $message\n    end\nend\n\n@deftag macro alert end\n\n# Test different alert types\n@render @alert {type = \"info\", message = \"This is information\"}\n\nMain.display_html(ans)","category":"page"},{"location":"components/","page":"Components","title":"Components","text":"@render @alert {type = \"warning\", message = \"This is a warning\"}\n\nMain.display_html(ans) #hide","category":"page"},{"location":"components/","page":"Components","title":"Components","text":"@render @alert {type = \"error\", message = \"This is an error\"}\nMain.display_html(ans) #hide","category":"page"},{"location":"components/#Module-Qualified-Components","page":"Components","title":"Module-Qualified Components","text":"","category":"section"},{"location":"components/","page":"Components","title":"Components","text":"Components can be organized in modules and referenced with qualification:","category":"page"},{"location":"components/","page":"Components","title":"Components","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\nmodule UI\n    using HypertextTemplates\n    using HypertextTemplates.Elements\n\n    @component function my_button(; variant = \"primary\")\n        @button {class = \"ui-button ui-button-$variant\"} @__slot__\n    end\n\n    @deftag macro my_button end\n\n    @component function card()\n        @div {class = \"ui-card\"} @__slot__\n    end\n\n    @deftag macro card end\nend\n\n# Usage with module qualification\nhtml = @render @div begin\n    @UI.card begin\n        @h2 \"Card Title\"\n        @UI.my_button {variant = \"secondary\"} \"Click me\"\n    end\nend\n\nMain.display_html(html) #hide","category":"page"},{"location":"components/#Creating-Component-Macros","page":"Components","title":"Creating Component Macros","text":"","category":"section"},{"location":"components/","page":"Components","title":"Components","text":"Use @deftag to create macro shortcuts for components:","category":"page"},{"location":"components/","page":"Components","title":"Components","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n@component function badge(; text, variant = \"primary\", size = \"normal\")\n    size_class = size == \"small\" ? \"badge-sm\" : \"badge-normal\"\n    @span {\n        class = \"badge badge-$variant $size_class\"\n    } $text\nend\n\n# Create a macro for easier use\n@deftag macro badge end\n\n# Now can use as @badge instead of @<badge\nhtml = @render @div begin\n    @h3 begin\n        @text \"Products \"\n        @badge {text = \"New\", variant = \"success\", size = \"small\"}\n    end\n    @p begin\n        @text \"Status: \"\n        @badge {text = \"In Stock\", variant = \"primary\"}\n    end\nend\n\nMain.display_html(html) #hide","category":"page"},{"location":"components/#Component-Patterns","page":"Components","title":"Component Patterns","text":"","category":"section"},{"location":"components/#Container/Presenter-Pattern","page":"Components","title":"Container/Presenter Pattern","text":"","category":"section"},{"location":"components/","page":"Components","title":"Components","text":"Separate logic from presentation:","category":"page"},{"location":"components/","page":"Components","title":"Components","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# Presenter component (pure UI)\n@component function user_list_view(; users)\n    @div {class = \"user-list\"} begin\n        for user in users\n            # Use data attributes for JavaScript interaction\n            @div {class = \"user-item\", \"data-user-id\" := user.id} begin\n                @img {src = user.avatar, alt = user.name, width = 32, height = 32}\n                @span \" \" $(user.name)\n            end\n        end\n    end\nend\n\n@deftag macro user_list_view end\n\n# Example usage with mock data\nusers = [\n    (id = 1, name = \"Alice Johnson\", avatar = \"/avatars/alice.jpg\"),\n    (id = 2, name = \"Bob Smith\", avatar = \"/avatars/bob.jpg\"),\n    (id = 3, name = \"Charlie Brown\", avatar = \"/avatars/charlie.jpg\")\n]\n\nhtml = @render @user_list_view {users}\n\nMain.display_html(html) #hide","category":"page"},{"location":"components/#Compound-Components","page":"Components","title":"Compound Components","text":"","category":"section"},{"location":"components/","page":"Components","title":"Components","text":"Related components that work together:","category":"page"},{"location":"components/","page":"Components","title":"Components","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\nmodule Tabs\n    using HypertextTemplates\n    using HypertextTemplates.Elements\n\n    @component function container(; active_tab = 1)\n        @div {class = \"tabs\", \"data-active\" := active_tab} begin\n            @__slot__\n        end\n    end\n\n    @deftag macro container end\n\n    @component function list()\n        @ul {class = \"tab-list\", role = \"tablist\"} begin\n            @__slot__\n        end\n    end\n\n    @deftag macro list end\n\n    @component function tab(; index, active = false)\n        @li {role = \"presentation\"} begin\n            @button {\n                role = \"tab\",\n                class = active ? \"tab active\" : \"tab\",\n                \"aria-selected\" := active\n            } begin\n                @__slot__\n            end\n        end\n    end\n\n    @deftag macro tab end\n\n    @component function panels()\n        @div {class = \"tab-panels\"} begin\n            @__slot__\n        end\n    end\n\n    @deftag macro panels end\n\n    @component function panel(; index, active = false)\n        @div {\n            role = \"tabpanel\",\n            class = active ? \"panel active\" : \"panel\",\n            hidden = !active\n        } begin\n            @__slot__\n        end\n    end\n\n    @deftag macro panel end\nend\n\n# Usage\nhtml = @render @Tabs.container {active_tab = 2} begin\n    @Tabs.list begin\n        @Tabs.tab {index = 1, active = false} \"Tab 1\"\n        @Tabs.tab {index = 2, active = true} \"Tab 2\"\n        @Tabs.tab {index = 3, active = false} \"Tab 3\"\n    end\n\n    @Tabs.panels begin\n        @Tabs.panel {index = 1, active = false} begin\n            @p \"Content for tab 1\"\n        end\n        @Tabs.panel {index = 2, active = true} begin\n            @p \"Content for tab 2\"\n        end\n        @Tabs.panel {index = 3, active = false} begin\n            @p \"Content for tab 3\"\n        end\n    end\nend\n\nMain.display_html(html) #hide","category":"page"},{"location":"components/#Safe-Rendering-Pattern","page":"Components","title":"Safe Rendering Pattern","text":"","category":"section"},{"location":"components/","page":"Components","title":"Components","text":"While HypertextTemplates renders directly to IO (making traditional try-catch error boundaries impossible), you can implement safe rendering patterns:","category":"page"},{"location":"components/","page":"Components","title":"Components","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# Helper function to safely access nested data\nsafe_get(obj, field, default=\"N/A\") = try\n    getfield(obj, field)\ncatch\n    default\nend\n\n# Component that handles potentially missing data\n@component function user_card(; user=nothing)\n    @div {class = \"user-card\"} begin\n        if user !== nothing\n            @h3 safe_get(user, :name, \"Unknown User\")\n            @p \"Email: \" safe_get(user, :email)\n            @p \"Role: \" safe_get(user, :role, \"Guest\")\n        else\n            @div {class = \"empty-state\"} begin\n                @p \"No user data available\"\n            end\n        end\n    end\nend\n\n@deftag macro user_card end\n\n# Example with valid user\nuser = (name = \"Alice\", email = \"alice@example.com\", role = \"Admin\")\nhtml1 = @render @user_card {user}\n\nMain.display_html(html1) #hide","category":"page"},{"location":"components/","page":"Components","title":"Components","text":"# Example with missing user\nhtml2 = @render @user_card {}\n\nMain.display_html(html2) #hide","category":"page"},{"location":"components/","page":"Components","title":"Components","text":"# Example with partial data\npartial_user = (name = \"Bob\")  # Missing email and role\nhtml3 = @render @user_card {user = partial_user}\n\nMain.display_html(html3) #hide","category":"page"},{"location":"components/#Best-Practices","page":"Components","title":"Best Practices","text":"","category":"section"},{"location":"components/#1.-Keep-Components-Focused","page":"Components","title":"1. Keep Components Focused","text":"","category":"section"},{"location":"components/","page":"Components","title":"Components","text":"Each component should have a single, clear purpose:","category":"page"},{"location":"components/","page":"Components","title":"Components","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# Good: Focused components\n@component function price_display(; amount, currency = \"USD\")\n    @span {class = \"price\"} $currency \" \" $amount\nend\n\n@deftag macro price_display end\n\n@component function product_card(; product)\n    @div {class = \"product\"} begin\n        @h3 $(product.name)\n        @price_display {amount = product.price, currency = product.currency}\n    end\nend\n\n@deftag macro product_card end\n\n# Example usage\nproduct = (name = \"Laptop\", price = 999.99, currency = \"USD\")\nhtml = @render @product_card {product}\n\nMain.display_html(html) #hide","category":"page"},{"location":"components/#2.-Use-Props-for-Configuration","page":"Components","title":"2. Use Props for Configuration","text":"","category":"section"},{"location":"components/","page":"Components","title":"Components","text":"Make components flexible through props:","category":"page"},{"location":"components/","page":"Components","title":"Components","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n@component function data_table(;\n    data,\n    columns,\n    striped = true,\n    hoverable = true,\n    bordered = false\n)\n    classes = [\n        \"table\",\n        striped ? \"table-striped\" : nothing,\n        hoverable ? \"table-hover\" : nothing,\n        bordered ? \"table-bordered\" : nothing\n    ] |> x -> filter(!isnothing, x) |> x -> join(x, \" \")\n\n    @table {class = classes} begin\n        @thead begin\n            @tr begin\n                for col in columns\n                    @th $col\n                end\n            end\n        end\n        @tbody begin\n            for row in data\n                @tr begin\n                    for value in row\n                        @td $value\n                    end\n                end\n            end\n        end\n    end\nend\n\n@deftag macro data_table end\n\n# Example usage\ncolumns = [\"Name\", \"Age\", \"City\"]\ndata = [\n    [\"Alice\", 25, \"New York\"],\n    [\"Bob\", 30, \"London\"],\n    [\"Charlie\", 35, \"Tokyo\"]\n]\n\nhtml = @render @data_table {data, columns, striped = true, bordered = true}\n\nMain.display_html(html) #hide","category":"page"},{"location":"components/#3.-Document-Components","page":"Components","title":"3. Document Components","text":"","category":"section"},{"location":"components/","page":"Components","title":"Components","text":"Add docstrings to components:","category":"page"},{"location":"components/","page":"Components","title":"Components","text":"\"\"\"\n    @alert(; type, title, message, dismissible)\n\nDisplay an alert message with optional dismiss button.\n\n# Arguments\n- `type::String = \"info\"`: Alert type (info, warning, error, success)\n- `title::String`: Alert title\n- `message::String`: Alert message body  \n- `dismissible::Bool = false`: Whether alert can be dismissed\n\"\"\"\n@component function alert(; type = \"info\", title, message, dismissible = false)\n    # Implementation\nend","category":"page"},{"location":"components/#4.-Consider-Performance","page":"Components","title":"4. Consider Performance","text":"","category":"section"},{"location":"components/","page":"Components","title":"Components","text":"For frequently rendered components, optimize:","category":"page"},{"location":"components/","page":"Components","title":"Components","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# Precompute static values\nconst BUTTON_CLASSES = Dict(\n    :primary => \"btn btn-primary\",\n    :secondary => \"btn btn-secondary\",\n    :danger => \"btn btn-danger\"\n)\n\n@component function my_button(; variant = :primary)\n    @button {class = BUTTON_CLASSES[variant]} @__slot__\nend\n\n@deftag macro my_button end\n\n# Example usage\n@render @my_button {variant = :primary} \"Click me\"\n\nMain.display_html(ans) #hide","category":"page"},{"location":"components/","page":"Components","title":"Components","text":"@render @my_button {variant = :danger} \"Delete\"\nMain.display_html(ans) #hide","category":"page"},{"location":"components/#5.-Error-Handling","page":"Components","title":"5. Error Handling","text":"","category":"section"},{"location":"components/","page":"Components","title":"Components","text":"Handle edge cases gracefully:","category":"page"},{"location":"components/","page":"Components","title":"Components","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n@component function safe_image(; src, alt = \"\", fallback = \"/placeholder.png\")\n    image_src = isempty(src) ? fallback : src\n    @img {src = image_src, alt, onerror = \"this.src='$fallback'\"}\nend\n\n@deftag macro safe_image end\n\n# Example usage\n@render @safe_image {src = \"/user.jpg\", alt = \"User avatar\"}\n\nMain.display_html(ans) #hide","category":"page"},{"location":"components/","page":"Components","title":"Components","text":"@render @safe_image {src = \"\", alt = \"User avatar\"}\n\nMain.display_html(ans) #hide","category":"page"},{"location":"components/#Context:-Avoiding-Prop-Drilling","page":"Components","title":"Context: Avoiding Prop Drilling","text":"","category":"section"},{"location":"components/","page":"Components","title":"Components","text":"For cross-cutting concerns like themes, authentication, or localization, passing props through every component level becomes cumbersome. The context system provides a cleaner solution:","category":"page"},{"location":"components/","page":"Components","title":"Components","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n@deftag macro app_without_context end\n@deftag macro navbar end\n@deftag macro user_menu end\n@deftag macro navbar_ctx end\n@deftag macro user_menu_ctx end\n\n# Without context - props passed through every level\n@component function app_without_context(; user)\n    @navbar {user}  # Pass to navbar\nend\n\n@component function navbar(; user)\n    @user_menu {user}  # Pass to user menu\nend\n\n@component function user_menu(; user)\n    @span \"Welcome, $(user.name)!\"\nend\n\n# With context - cleaner and more maintainable\n@component function app_with_context(; user)\n    @context {current_user = user} begin\n        @navbar_ctx  # No need to pass user\n    end\nend\n\n@component function navbar_ctx()\n    @user_menu_ctx  # No need to pass user\nend\n\n@component function user_menu_ctx()\n    user = @get_context(:current_user)\n    @span \"Welcome, $(user.name)!\"\nend","category":"page"},{"location":"components/","page":"Components","title":"Components","text":"Context is particularly useful for:","category":"page"},{"location":"components/","page":"Components","title":"Components","text":"Theme systems - Colors, styles, dark/light mode\nAuthentication - Current user, permissions\nLocalization - Language, date/number formats\nFeature flags - Enable/disable features globally","category":"page"},{"location":"components/","page":"Components","title":"Components","text":"For detailed context usage and patterns, see the Context System section in the Advanced Features guide.","category":"page"},{"location":"components/#Summary","page":"Components","title":"Summary","text":"","category":"section"},{"location":"components/","page":"Components","title":"Components","text":"Components combine reusability, composition through slots, type safety, flexible rendering, and context support to create maintainable templates. Use these patterns to structure your applications effectively.","category":"page"},{"location":"elements-attributes/#HTML-Elements-and-Attributes","page":"Elements & Attributes","title":"HTML Elements & Attributes","text":"","category":"section"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"This guide covers how to work with HTML elements and their attributes in HypertextTemplates.jl.","category":"page"},{"location":"elements-attributes/#HTML-Element-Macros","page":"Elements & Attributes","title":"HTML Element Macros","text":"","category":"section"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"HypertextTemplates provides macros for all standard HTML elements. Import them from the Elements submodule:","category":"page"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"using HypertextTemplates\nusing HypertextTemplates.Elements","category":"page"},{"location":"elements-attributes/#Common-Elements","page":"Elements & Attributes","title":"Common Elements","text":"","category":"section"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"HypertextTemplates provides macros for every standard HTML element, allowing you to write HTML using Julia's native macro syntax. Each element is exposed as a macro (prefixed with @) that mirrors its HTML counterpart. These macros handle proper tag generation, nesting, attribute handling, and automatic escaping. The element macros are organized into logical groups based on their semantic purpose in HTML, making it easy to find and use the elements you need for structuring documents, creating forms, embedding media, or building complex layouts.","category":"page"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"# Structural elements\n@div @section @article @aside @header @footer @main @nav\n\n# Text content\n@h1 @h2 @h3 @h4 @h5 @h6 @p @span @blockquote @pre @code\n\n# Lists\n@ul @ol @li @dl @dt @dd\n\n# Links and media\n@a @img @video @audio @picture @source\n\n# Forms\n@form @input @button @select @option @textarea @label @fieldset\n\n# Tables\n@table @thead @tbody @tfoot @tr @th @td @caption @colgroup @col\n\n# And many more...","category":"page"},{"location":"elements-attributes/#Complete-Example","page":"Elements & Attributes","title":"Complete Example","text":"","category":"section"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\nhtml = @render @article begin\n    @header begin\n        @h1 \"Article Title\"\n        @p {class = \"meta\"} \"Published on \" Elements.@time {datetime = \"2024-01-01\"} \"January 1, 2024\"\n    end\n\n    @section begin\n        @p \"First paragraph of content...\"\n        @figure begin\n            @img {src = \"/image.jpg\", alt = \"Description\"}\n            @figcaption \"Image caption\"\n        end\n    end\n\n    @footer begin\n        @p \"Article footer with \" @a {href = \"/more\"} \"related links\"\n    end\nend\n\nMain.display_html(html) #hide","category":"page"},{"location":"elements-attributes/#Attribute-Syntax","page":"Elements & Attributes","title":"Attribute Syntax","text":"","category":"section"},{"location":"elements-attributes/#Basic-Attributes","page":"Elements & Attributes","title":"Basic Attributes","text":"","category":"section"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"Attributes are specified using {} with key-value pairs:","category":"page"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# Single attribute\n@render @div {id = \"main\"} \"Content\"\nMain.display_html(ans) #hide","category":"page"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"# Multiple attributes\n@render @a {href = \"/home\", class = \"nav-link\", target = \"_blank\"} \"Home\"\nMain.display_html(ans) #hide","category":"page"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# Computed attributes\nwidth = 300\nheight = 200\n@render @img {src = \"/photo.jpg\", width, height, alt = \"Photo\"}\n\nMain.display_html(ans) #hide","category":"page"},{"location":"elements-attributes/#Attribute-Name-Variations","page":"Elements & Attributes","title":"Attribute Name Variations","text":"","category":"section"},{"location":"elements-attributes/#Standard-Identifiers","page":"Elements & Attributes","title":"Standard Identifiers","text":"","category":"section"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"For valid Julia identifiers, use simple syntax:","category":"page"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\nhtml = @render @input {type = \"text\", name = \"username\", placeholder = \"Enter username\"}\n\nMain.display_html(html) #hide","category":"page"},{"location":"elements-attributes/#Non-Standard-Names","page":"Elements & Attributes","title":"Non-Standard Names","text":"","category":"section"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"For attributes with special characters, use string literals with :=:","category":"page"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# Alpine.js attributes\nhtml = @render @div {\"x-data\" := \"{ open: false }\"} begin\n    @button {\"@click\" := \"open = !open\"} \"Toggle\"\n    @div {\"x-show\" := \"open\"} \"Hidden content\"\nend\n\nMain.display_html(html) #hide","category":"page"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# HTMX attributes\nhtml = @render @button {\n    \"hx-post\" := \"/api/click\",\n    \"hx-target\" := \"#result\",\n    \"hx-swap\" := \"innerHTML\"\n} \"Click me\"\n\nMain.display_html(html) #hide","category":"page"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# Custom data attributes\nhtml = @render @div {\n    \"data-user-id\" := \"123\",\n    \"data-role\" := \"admin\",\n    \"aria-label\" := \"User profile\"\n} \"Content\"\n\nMain.display_html(html) #hide","category":"page"},{"location":"elements-attributes/#Attribute-Value-Types","page":"Elements & Attributes","title":"Attribute Value Types","text":"","category":"section"},{"location":"elements-attributes/#Strings","page":"Elements & Attributes","title":"Strings","text":"","category":"section"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"@div {class = \"container\", id = \"main\"}","category":"page"},{"location":"elements-attributes/#Numbers","page":"Elements & Attributes","title":"Numbers","text":"","category":"section"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"Numbers are automatically converted to strings:","category":"page"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n@render @input {type = \"range\", min = 0, max = 100, step = 5}\n\nMain.display_html(ans) #hide","category":"page"},{"location":"elements-attributes/#Booleans","page":"Elements & Attributes","title":"Booleans","text":"","category":"section"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"Boolean attributes follow HTML5 semantics:","category":"page"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# true renders just the attribute name\n@render @input {type = \"checkbox\", checked = true}\n\nMain.display_html(ans) #hide","category":"page"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"# false omits the attribute entirely  \n@render @input {type = \"checkbox\", checked = false}\n\nMain.display_html(ans) #hide","category":"page"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"# Dynamic boolean\nis_loading = true\n@render @button {disabled = is_loading} \"Submit\"\n\nMain.display_html(ans) #hide","category":"page"},{"location":"elements-attributes/#Nothing/Missing","page":"Elements & Attributes","title":"Nothing/Missing","text":"","category":"section"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"nothing values are omitted:","category":"page"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# Test with false condition\ncondition = false\noptional_class = condition ? \"active\" : nothing\nhtml1 = @render @div {class = optional_class} \"Content\"\n\nMain.display_html(html1) #hide","category":"page"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"# Test with true condition\ncondition = true\noptional_class = condition ? \"active\" : nothing\nhtml2 = @render @div {class = optional_class} \"Content\"\n\nMain.display_html(html2) #hide","category":"page"},{"location":"elements-attributes/#Attribute-Shortcuts","page":"Elements & Attributes","title":"Attribute Shortcuts","text":"","category":"section"},{"location":"elements-attributes/#Variable-Name-Matching","page":"Elements & Attributes","title":"Variable Name Matching","text":"","category":"section"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"When variable names match attribute names:","category":"page"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\nid = \"user-123\"\nclass = \"profile-card\"\nrole = \"article\"\n\n# Instead of {id = id, class = class, role = role}\n@render @div {id, class, role} \"Content\"\n\nMain.display_html(ans) #hide","category":"page"},{"location":"elements-attributes/#Spreading-Attributes","page":"Elements & Attributes","title":"Spreading Attributes","text":"","category":"section"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"Use ... to spread attributes from collections:","category":"page"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# From NamedTuple\ncommon_attrs = (class = \"btn\", type = \"button\")\n@render @button {id = \"submit\", common_attrs...} \"Submit\"\n\nMain.display_html(ans) #hide","category":"page"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# From Dict\nattrs = Dict(Symbol(\"data-value\") => \"123\", Symbol(\"data-label\") => \"test\")\n@render @div {class = \"widget\", attrs...} \"Content\"\n\nMain.display_html(ans) #hide","category":"page"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# Combining multiple sources\nbase = (; class = \"card\")\nextra = (; id = \"main\", role = \"region\")\n@render @article {base..., extra..., class = \"card featured\"} \"Content\"\n# Note: Later values override earlier ones\n\nMain.display_html(ans) #hide","category":"page"},{"location":"elements-attributes/#Conditional-Attributes","page":"Elements & Attributes","title":"Conditional Attributes","text":"","category":"section"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"Common patterns for conditional attributes:","category":"page"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# Using ternary operator\nisactive = true\nhtml = @render @div {class = isactive ? \"active\" : \"inactive\"} \"Status\"\n\nMain.display_html(html) #hide","category":"page"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# Using nothing for optional attributes\nexternal = true\nhtml = @render @a {\n    href = \"/page\",\n    target = external ? \"_blank\" : nothing,\n    rel = external ? \"noopener\" : nothing\n} \"External Link\"\n\nMain.display_html(html) #hide","category":"page"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# Building class lists\nsize = :large\nvariant = :primary\ndisabled = true\n\nclasses = [\n    \"btn\",\n    size == :large ? \"btn-lg\" : \"btn-sm\",\n    variant == :primary ? \"btn-primary\" : \"btn-secondary\",\n    disabled ? \"disabled\" : nothing\n] |> x -> filter(!isnothing, x) |> x -> join(x, \" \")\n\nhtml = @render @button {class = classes, disabled} \"Click\"\n\nMain.display_html(html) #hide","category":"page"},{"location":"elements-attributes/#Custom-Elements","page":"Elements & Attributes","title":"Custom Elements","text":"","category":"section"},{"location":"elements-attributes/#Defining-Custom-Elements","page":"Elements & Attributes","title":"Defining Custom Elements","text":"","category":"section"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"Use @element to define custom HTML elements:","category":"page"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# Define a web component\n@element \"my-component\" my_component\n\n# Use it\nhtml = @render @<my_component {prop = \"value\"} \"Content\"\n\nMain.display_html(html) #hide","category":"page"},{"location":"elements-attributes/#Creating-Element-Macros","page":"Elements & Attributes","title":"Creating Element Macros","text":"","category":"section"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"Use @deftag to create macro shortcuts:","category":"page"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# Define the element\n@element \"custom-button\" custom_button\n\n# Create a macro for it\n@deftag macro custom_button end\n\n# Now use as a regular macro\nhtml = @render @custom_button {variant = \"primary\"} \"Click me\"\n\nMain.display_html(html) #hide","category":"page"},{"location":"elements-attributes/#Web-Components-Example","page":"Elements & Attributes","title":"Web Components Example","text":"","category":"section"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# Define common web components\n@element \"sl-button\" sl_button\n@element \"sl-input\" sl_input\n@element \"sl-card\" sl_card\n\n@deftag macro sl_button end\n@deftag macro sl_input end  \n@deftag macro sl_card end\n\n# Use Shoelace components\nhtml = @render @sl_card begin\n    @div {slot = \"header\"} \"Card Title\"\n    @p \"Card content\"\n    @div {slot = \"footer\"} begin\n        @sl_button {variant = \"primary\"} \"Save\"\n    end\nend\n\nMain.display_html(html) #hide","category":"page"},{"location":"elements-attributes/#Special-Elements","page":"Elements & Attributes","title":"Special Elements","text":"","category":"section"},{"location":"elements-attributes/#Void-Elements","page":"Elements & Attributes","title":"Void Elements","text":"","category":"section"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"Self-closing elements work automatically:","category":"page"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\nhtml = @render @div begin\n    @img {src = \"/photo.jpg\", alt = \"\"}\n    @br\n    @hr {class = \"divider\"}\n    @input {type = \"text\", name = \"field\"}\n    @meta {charset = \"UTF-8\"}\nend\n\nMain.display_html(html) #hide","category":"page"},{"location":"elements-attributes/#Raw-HTML-with-Script-and-Style","page":"Elements & Attributes","title":"Raw HTML with Script and Style","text":"","category":"section"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"Script and style elements preserve their content:","category":"page"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\nhtml = @render @div begin\n    @script {type = \"text/javascript\"} \"\"\"\n        console.log(\"This is preserved as-is\");\n        const data = { value: 123 };\n    \"\"\"\n\n    @style \"\"\"\n        .custom-class {\n            color: blue;\n            font-size: 16px;\n        }\n    \"\"\"\nend\n\nMain.display_html(html) #hide","category":"page"},{"location":"elements-attributes/#SVG-Elements","page":"Elements & Attributes","title":"SVG Elements","text":"","category":"section"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"SVG elements work like regular elements:","category":"page"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n@element \"svg\" svg\n@element \"circle\" circle\n@element \"rect\" rect\n@element \"path\" path\n\n@deftag macro svg end\n@deftag macro circle end\n@deftag macro rect end\n@deftag macro path end\n\nhtml = @render @svg {width = \"100\", height = \"100\", viewBox = \"0 0 100 100\"} begin\n    @circle {cx = \"50\", cy = \"50\", r = \"40\", fill = \"blue\"}\n    @rect {x = \"10\", y = \"10\", width = \"30\", height = \"30\", fill = \"red\"}\n    @path {d = \"M 10 10 L 90 90\", stroke = \"black\", \"stroke-width\" := \"2\"}\nend\n\nMain.display_html(html) #hide","category":"page"},{"location":"elements-attributes/#Escaping-and-Security","page":"Elements & Attributes","title":"Escaping and Security","text":"","category":"section"},{"location":"elements-attributes/#Automatic-Escaping","page":"Elements & Attributes","title":"Automatic Escaping","text":"","category":"section"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"Attribute values from variables are automatically escaped:","category":"page"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\nuser_input = \"\\\" onclick=\\\"alert('xss')\\\"\"\nhtml = @render @div {title = user_input} \"Safe\"\n# Output shows escaped attributes\n\nMain.display_html(html) #hide","category":"page"},{"location":"elements-attributes/#Pre-escaped-Content","page":"Elements & Attributes","title":"Pre-escaped Content","text":"","category":"section"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"In rare cases where you need to include pre-escaped or specially formatted attribute values that should bypass the automatic escaping system, you can use SafeString. This is typically needed when working with attribute values that have already been processed by another system or contain special formatting that must be preserved exactly. However, this should be used with extreme caution and only with trusted content, as it bypasses the security protections that prevent XSS attacks through attribute injection.","category":"page"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\nsafe_attr = SafeString(\"complex&value\")\nhtml = @render @div {\"data-value\" := safe_attr} \"Content\"\n\nMain.display_html(html) #hide","category":"page"},{"location":"elements-attributes/#Advanced-Patterns","page":"Elements & Attributes","title":"Advanced Patterns","text":"","category":"section"},{"location":"elements-attributes/#Dynamic-Attribute-Names","page":"Elements & Attributes","title":"Dynamic Attribute Names","text":"","category":"section"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"Build attributes programmatically:","category":"page"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n@component function dynamic_attrs(; prefix = \"data\", values = Dict())\n    attrs = Dict()\n    for (key, value) in values\n        attrs[Symbol(\"$prefix-$key\")] = value\n    end\n\n    @div {attrs...} @__slot__\nend\n\n@deftag macro dynamic_attrs end\n\n# Usage example\nhtml = @render @dynamic_attrs {\n    prefix = \"data\",\n    values = Dict(\"id\" => \"123\", \"name\" => \"test\")\n} \"Content with dynamic attributes\"\n\nMain.display_html(html) #hide","category":"page"},{"location":"elements-attributes/#ARIA-Attributes","page":"Elements & Attributes","title":"ARIA Attributes","text":"","category":"section"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"Accessibility attributes using proper patterns:","category":"page"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n@component function accessible_modal(; open = false, title_id = \"modal-title\")\n    @div {\n        role = \"dialog\",\n        \"aria-modal\" := \"true\",\n        \"aria-labelledby\" := title_id,\n        \"aria-hidden\" := !open\n    } begin\n        @h2 {id = title_id} begin\n            @__slot__ title\n        end\n        @div begin\n            @__slot__\n        end\n    end\nend\n\n@deftag macro accessible_modal end\n\n# Usage example\nhtml = @render @accessible_modal {open = true} begin\n    title := \"Important Dialog\"\n    @p \"This is the modal content.\"\nend\n\nMain.display_html(html) #hide","category":"page"},{"location":"elements-attributes/#Style-Objects","page":"Elements & Attributes","title":"Style Objects","text":"","category":"section"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"Building inline styles:","category":"page"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\nfunction style_string(; styles...)\n    parts = String[]\n    for (prop, value) in pairs(styles)\n        prop_str = replace(string(prop), \"_\" => \"-\")\n        push!(parts, \"$prop_str: $value\")\n    end\n    return join(parts, \"; \")\nend\n\n# Usage\nhtml = @render @div {\n    style = style_string(\n        background_color = \"blue\",\n        padding = \"1rem\",\n        border_radius = \"0.5rem\"\n    )\n} \"Styled div\"\n\nMain.display_html(html) #hide","category":"page"},{"location":"elements-attributes/#Best-Practices","page":"Elements & Attributes","title":"Best Practices","text":"","category":"section"},{"location":"elements-attributes/#1.-Use-Semantic-HTML","page":"Elements & Attributes","title":"1. Use Semantic HTML","text":"","category":"section"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"Choose elements that convey meaning:","category":"page"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# Good: Semantic elements\nhtml = @render @nav begin\n    @ul begin\n        @li @a {href = \"/\"} \"Home\"\n        @li @a {href = \"/about\"} \"About\"\n    end\nend\n\nMain.display_html(html) #hide","category":"page"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"# Article with semantic structure\nhtml2 = @render @article begin\n    @header @h1 \"Article Title\"\n    @section @p \"Content...\"\n    @footer @button {type = \"submit\"} \"Submit\"\nend\n\nMain.display_html(html2) #hide","category":"page"},{"location":"elements-attributes/#2.-Accessibility-First","page":"Elements & Attributes","title":"2. Accessibility First","text":"","category":"section"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"Always include accessibility attributes:","category":"page"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\nhtml = @render @div begin\n    @img {src = \"/logo.png\", alt = \"Company logo\"}\n    @button {type = \"button\", \"aria-label\" := \"Close dialog\"} \"×\"\n    @input {type = \"email\", id = \"email\", \"aria-describedby\" := \"email-error\"}\n    @span {id = \"email-error\", class = \"error\"} \"Please enter a valid email\"\nend\n\nMain.display_html(html) #hide","category":"page"},{"location":"elements-attributes/#3.-Consistent-Naming","page":"Elements & Attributes","title":"3. Consistent Naming","text":"","category":"section"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"Use consistent patterns for classes and IDs:","category":"page"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"# Component-based naming\n@div {class = \"card\"} begin\n    @div {class = \"card__header\"} \"Title\"\n    @div {class = \"card__body\"} \"Content\"\n    @button {class = \"card__action card__action--primary\"} \"Save\"\nend","category":"page"},{"location":"elements-attributes/#4.-Avoid-Inline-Styles","page":"Elements & Attributes","title":"4. Avoid Inline Styles","text":"","category":"section"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"Prefer classes over inline styles:","category":"page"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"# Good: Use classes\n@div {class = \"alert alert-warning\"} \"Warning message\"\n\n# Avoid: Inline styles (except when dynamic)\n@div {style = \"color: orange; padding: 1rem;\"} \"Warning\"","category":"page"},{"location":"elements-attributes/#5.-Data-Attributes-for-JavaScript","page":"Elements & Attributes","title":"5. Data Attributes for JavaScript","text":"","category":"section"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"Use data attributes for JavaScript hooks:","category":"page"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\nhtml = @render @button {\n    class = \"btn btn-primary\",\n    \"data-action\" := \"submit-form\",\n    \"data-form-id\" := \"user-form\",\n    \"data-confirm\" := \"true\"\n} \"Submit\"\n\nMain.display_html(html) #hide","category":"page"},{"location":"elements-attributes/#Summary","page":"Elements & Attributes","title":"Summary","text":"","category":"section"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"HypertextTemplates.jl provides a comprehensive and flexible system for working with HTML elements and attributes:","category":"page"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"All standard HTML elements available as macros\nFlexible attribute syntax with {} notation\nSupport for dynamic and computed attributes\nAutomatic security through escaping\nCustom element definition support\nAdvanced patterns for complex use cases","category":"page"},{"location":"elements-attributes/","page":"Elements & Attributes","title":"Elements & Attributes","text":"The system is designed to feel natural to Julia developers while providing all the features needed for modern web development.","category":"page"},{"location":"getting-started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Welcome to HypertextTemplates.jl! This guide will help you get up and running with Julia's HTML templating system.","category":"page"},{"location":"getting-started/#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Add HypertextTemplates to your Julia project:","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"using Pkg\nPkg.add(\"HypertextTemplates\")","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Or in the Julia REPL's package mode (press ]):","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"pkg> add HypertextTemplates","category":"page"},{"location":"getting-started/#First-Steps","page":"Getting Started","title":"First Steps","text":"","category":"section"},{"location":"getting-started/#Basic-Usage","page":"Getting Started","title":"Basic Usage","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Every HTML element is a Julia macro. Use @render to convert templates to HTML strings:","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# Render a simple HTML fragment\nhtml = @render @div begin\n    @h1 \"Welcome to HypertextTemplates!\"\n    @p \"This is a simple example.\"\nend\n\nMain.display_html(html) #hide","category":"page"},{"location":"getting-started/#Adding-Attributes","page":"Getting Started","title":"Adding Attributes","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Attributes use {} syntax, similar to Julia NamedTuples:","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\nhtml = @render @div {id = \"main\", class = \"container\"} begin\n    @h1 {class = \"title\"} \"Styled Heading\"\n    @p {style = \"color: blue;\"} \"Blue text\"\nend\n\nMain.display_html(html) #hide","category":"page"},{"location":"getting-started/#Using-Variables-and-Expressions","page":"Getting Started","title":"Using Variables and Expressions","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Use $ to interpolate variables and expressions. All values are automatically HTML-escaped for security:","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\nname = \"Julia\"\ncount = 42\n\nhtml = @render @div begin\n    @h1 \"Hello, \" $name \"!\"\n    @p \"The answer is \" $count\n    @p \"Double the answer: \" $(count * 2)\nend\n\nMain.display_html(html) #hide","category":"page"},{"location":"getting-started/#Building-a-Simple-Page","page":"Getting Started","title":"Building a Simple Page","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Let's create a complete HTML page structure:","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# Build a complete page\nhtml = @render @html begin\n    @head begin\n        @meta {charset = \"UTF-8\"}\n        @meta {name = \"viewport\", content = \"width=device-width, initial-scale=1.0\"}\n        @title \"My First Page\"\n    end\n    @body begin\n        @div {class = \"container\"} begin\n            @h1 \"My First Page\"\n            @section begin\n                @p \"Welcome to my website built with HypertextTemplates.jl!\"\n                @ul begin\n                    @li \"Fast rendering\"\n                    @li \"Type-safe templates\"\n                    @li \"Julia-native syntax\"\n                end\n            end\n        end\n    end\nend\n\nMain.display_html(html) #hide","category":"page"},{"location":"getting-started/#Working-with-Loops","page":"Getting Started","title":"Working with Loops","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Julia's control flow integrates naturally:","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\nitems = [\"Apple\", \"Banana\", \"Cherry\"]\n\nhtml = @render @ul begin\n    for item in items\n        @li $item\n    end\nend\n\nMain.display_html(html) #hide","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\nitems = [\"Apple\", \"Banana\", \"Cherry\"]\n\n# With enumeration\nhtml = @render @ol begin\n    for (i, item) in enumerate(items)\n        @li {value = i * 10} \"Item \" $i \": \" $item\n    end\nend\n\nMain.display_html(html) #hide","category":"page"},{"location":"getting-started/#Conditional-Rendering","page":"Getting Started","title":"Conditional Rendering","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Use standard Julia conditionals:","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\nuser_logged_in = true\nusername = \"julia_dev\"\n\nhtml = @render @div begin\n    if user_logged_in\n        @p \"Welcome back, \" $username \"!\"\n        @button \"Logout\"\n    else\n        @p \"Please log in to continue.\"\n        @button \"Login\"\n    end\nend\n\nMain.display_html(html) #hide","category":"page"},{"location":"getting-started/#Creating-Your-First-Component","page":"Getting Started","title":"Creating Your First Component","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Components are reusable template functions:","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n@component function card(; title, description, link_url = nothing, link_text = \"Learn more\")\n    @div {class = \"card\"} begin\n        @h3 {class = \"card-title\"} $title\n        @p {class = \"card-description\"} $description\n        if !isnothing(link_url)\n            @a {href = link_url, class = \"card-link\"} $link_text\n        end\n    end\nend\n\n# Important: Create a macro shortcut for easier use\n@deftag macro card end\n\n# Now you can use @card instead of @<card\nhtml = @render @div {class = \"card-grid\"} begin\n    @card {\n        title = \"Getting Started\",\n        description = \"Learn the basics of HypertextTemplates.jl\"\n    }\n    @card {\n        title = \"Advanced Features\",\n        description = \"Explore components, slots, and more\",\n        link_url = \"/docs/advanced\",\n        link_text = \"Explore\"\n    }\nend\n\nMain.display_html(html) #hide","category":"page"},{"location":"getting-started/#Understanding-Components","page":"Getting Started","title":"Understanding Components","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Components are functions that accept props and generate HTML. Use @deftag to create a convenient macro shortcut:","category":"page"},{"location":"getting-started/#Components-with-Slots","page":"Getting Started","title":"Components with Slots","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Slots allow components to accept child content:","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n@component function page(; title)\n    @html begin\n        @head begin\n            @meta {charset = \"UTF-8\"}\n            @meta {name = \"viewport\", content = \"width=device-width, initial-scale=1.0\"}\n            @title $title\n        end\n        @body begin\n            @div {class = \"container\"} begin\n                @h1 $title\n                @section begin\n                    @__slot__\n                end\n            end\n        end\n    end\nend\n\n@deftag macro page end\n\n# Use the page component with slot content\nhtml = @render @page {title = \"My First Page\"} begin\n    @p \"Welcome to my website built with HypertextTemplates.jl!\"\n    @ul begin\n        @li \"Fast rendering\"\n        @li \"Type-safe templates\"\n        @li \"Julia-native syntax\"\n    end\nend\n\nMain.display_html(html) #hide","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"The @__slot__ marker shows where child content renders inside the component.","category":"page"},{"location":"getting-started/#Rendering-to-Different-Outputs","page":"Getting Started","title":"Rendering to Different Outputs","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"By default, @render returns a String, but you can specify other outputs:","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"# Render to an IO buffer\nio = IOBuffer()\n@render io @div \"Hello, IO!\"\nresult = String(take!(io))\n\n# Render to a byte array\nbytes = @render Vector{UInt8} @div \"Hello, bytes!\"\n\n# Render to a file\nopen(\"output.html\", \"w\") do file\n    @render file @html begin\n        @body @h1 \"Saved to file!\"\n    end\nend","category":"page"},{"location":"getting-started/#Next-Steps","page":"Getting Started","title":"Next Steps","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Now that you understand the basics:","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Learn about the Core Concepts underlying the DSL\nExplore the Component System for building reusable UI\nUnderstand HTML Elements & Attributes in detail\nDiscover Advanced Features for complex applications","category":"page"},{"location":"getting-started/#Common-Pitfalls","page":"Getting Started","title":"Common Pitfalls","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Avoid these common mistakes when starting with HypertextTemplates:","category":"page"},{"location":"getting-started/#1.-Forgetting-for-Variables","page":"Getting Started","title":"1. Forgetting $ for Variables","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"# Wrong - variable not interpolated\nname = \"Julia\"\n@render @p \"Hello, name\"  # Output: <p>Hello, name</p>\n\n# Correct - use $ to interpolate\n@render @p \"Hello, \" $name  # Output: <p>Hello, Julia</p>","category":"page"},{"location":"getting-started/#2.-Missing-begin...end-Blocks","page":"Getting Started","title":"2. Missing begin...end Blocks","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"# Wrong - syntax error\n@render @div\n    @h1 \"Title\"\n    @p \"Content\"\n\n# Correct - use begin...end for multiple elements\n@render @div begin\n    @h1 \"Title\"\n    @p \"Content\"\nend","category":"page"},{"location":"getting-started/#3.-Wrong-Attribute-Syntax","page":"Getting Started","title":"3. Wrong Attribute Syntax","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"# Wrong - using parentheses\n@render @div(class=\"container\") \"Content\"  # Syntax error!\n\n# Correct - use curly braces\n@render @div {class = \"container\"} \"Content\"","category":"page"},{"location":"getting-started/#4.-String-Literals-vs-Expressions","page":"Getting Started","title":"4. String Literals vs Expressions","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"# String literals are NOT escaped (trusted content)\n@render @p \"<b>Bold</b>\"  # Output: <p><b>Bold</b></p>\n\n# Variables ARE escaped (safe from XSS)\ntext = \"<b>Bold</b>\"\n@render @p $text  # Output: <p>&lt;b&gt;Bold&lt;/b&gt;</p>","category":"page"},{"location":"getting-started/#5.-Component-Usage-Without-@deftag","page":"Getting Started","title":"5. Component Usage Without @deftag","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"# Define component\n@component function my_button(; text = \"Click\")\n    @button {class = \"btn\"} $text\nend\n\n# Wrong - can't use as macro without @deftag\n@render @my_button {text = \"Submit\"}  # Error!\n\n# Correct - either use @< or define a tag\n@render @<my_button {text = \"Submit\"}  # Works\n\n# Or better, define the tag\n@deftag macro my_button end\n@render @my_button {text = \"Submit\"}  # Now works!","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Happy templating with HypertextTemplates.jl!","category":"page"},{"location":"api-library/#Library-Components-API","page":"Library Components","title":"Library Components API","text":"","category":"section"},{"location":"api-library/","page":"Library Components","title":"Library Components","text":"The Library module provides a comprehensive set of pre-built UI components styled with Tailwind CSS. These components are designed to be accessible, responsive, and work seamlessly with dark mode. All components follow consistent design patterns and can be customized through props while maintaining sensible defaults.","category":"page"},{"location":"api-library/#HypertextTemplates.Library.Alert-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.Alert","text":"@Alert\n\nA notification component for displaying important messages with contextual styling and optional dismiss functionality. Alerts are essential for communicating important information, warnings, errors, or success messages to users in a clear and noticeable way. They support different severity levels through color-coded variants, can include icons for better visual recognition, and offer optional dismiss functionality for user control. With built-in animation support, alerts can appear smoothly and grab attention without being jarring.\n\nProps\n\nvariant::Union{Symbol,String}: Alert variant (:info, :success, :warning, :error) (default: :info)\ndismissible::Bool: Whether alert can be dismissed (shows close button) (default: false)\nicon::Bool: Whether to show icon (default: true)\nanimated::Bool: Whether to show fade-in animation (default: true)\n\nSlots\n\nAlert message content - can include text, links, or other inline elements\n\nInteractive Features\n\nWhen dismissible=true, this component uses Alpine.js for interactive dismiss functionality. To enable interactivity, include Alpine.js in your page:\n\n@script {defer=true, src=\"https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js\"}\n\nWithout Alpine.js, the component will display the close button but won't be interactive.\n\nExample\n\n# Simple alerts\n@Alert \"This is an informational message.\"\n@Alert {variant = :success} \"Operation completed successfully!\"\n@Alert {variant = :error} \"An error occurred. Please try again.\"\n\n# Dismissible alert\n@Alert {variant = :warning, dismissible = true} begin\n    @strong \"Warning:\"\n    @text \" Your session will expire in 5 minutes.\"\nend\n\n# Alert with custom content\n@Alert {variant = :info, icon = false} begin\n    @Text \"New version available. \"\n    @Link {href = \"/changelog\"} \"View changelog\"\nend\n\nSee also\n\nBadge - For small status indicators\nCard - For general content containers\nTooltip - For contextual help messages\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.Avatar-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.Avatar","text":"@Avatar\n\nA user profile image component that displays user avatars with automatic fallbacks and consistent styling. Avatars are essential for personalizing user interfaces, making them feel more human and helping users quickly identify accounts, authors, or participants in conversations. This component handles the common challenges of avatar display including missing images, different aspect ratios, and the need for fallback representations. It provides multiple size options and shape variants (circular or square) while ensuring images load smoothly and fallbacks appear gracefully when no image is available.\n\nProps\n\nsrc::Union{String,Nothing}: Image source URL (optional)\nalt::String: Alternative text (required when src is provided, ignored otherwise)\nsize::Union{Symbol,String}: Avatar size (:xs, :sm, :md, :lg, :xl) (default: :md)\nshape::Union{Symbol,String}: Avatar shape (:circle, :square) (default: :circle)\nfallback::Union{String,Nothing}: Fallback content when no src provided (optional)\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.Badge-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.Badge","text":"@Badge\n\nA small label component for displaying status, counts, or categorization. Badges are compact visual indicators that draw attention to important information without disrupting the flow of content. They're commonly used to show notification counts, status indicators, tags, or to highlight new features. With support for multiple color variants and sizes, badges can effectively communicate different states and priorities while maintaining visual hierarchy in your interface.\n\nProps\n\nvariant::Union{Symbol,String}: Badge variant (:default, :primary, :secondary, :success, :warning, :danger, :gradient) (default: :default)\nsize::Union{Symbol,String}: Badge size (:xs, :sm, :base, :lg, :xl) (default: :base)\nrole::Union{String,Nothing}: ARIA role (e.g., \"status\" for dynamic updates) (optional)\nanimated::Bool: Whether badge has subtle animation (default: false)\noutline::Bool: Whether badge has outline style (default: false)\n\nSlots\n\nBadge text or content (typically short text, numbers, or icons)\n\nExample\n\n# Status badges\n@Badge {variant = :success} \"Active\"\n@Badge {variant = :danger} \"Expired\"\n@Badge {variant = :warning} \"Pending\"\n\n# Count badge\n@Badge {variant = :primary, size = :sm} \"99+\"\n\n# Animated badge for live updates\n@Badge {variant = :gradient, animated = true, role = \"status\"} \"Live\"\n\n# Outline style\n@Badge {variant = :secondary, outline = true} \"Beta\"\n\nSee also\n\nCard - Container component often used with badges\nButton - Interactive element with similar variants\nAlert - For larger notification messages\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.Breadcrumb-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.Breadcrumb","text":"@Breadcrumb\n\nA navigation breadcrumb component that displays the hierarchical path to the current page. Breadcrumbs are crucial wayfinding elements that help users understand their location within a website's structure and provide quick navigation to parent pages. This component automatically handles the visual styling of links versus the current page, includes proper ARIA attributes for accessibility, and uses semantic HTML markup. The customizable separator and responsive text sizing ensure breadcrumbs remain readable and functional across all device sizes.\n\nProps\n\nitems::Vector{Tuple{String,String}}: Breadcrumb items as (href, label) tuples\nseparator::String: Separator character/string (default: \"/\")\n\nAccessibility\n\nARIA: Uses <nav aria-label=\"Breadcrumb\"> with aria-current=\"page\" for current page. Ordered list conveys hierarchy.\n\nKeyboard: Tab through breadcrumb links, Enter follows navigation. Current page is skipped in tab order.\n\nGuidelines: Include home page as first item, use descriptive titles, keep text concise.\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.Button-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.Button","text":"@Button\n\nA versatile button component for triggering actions with multiple variants, sizes, and states. Supports icons, loading states, and full accessibility with proper ARIA attributes and keyboard navigation.\n\nProps\n\nvariant::Union{Symbol,String}: Button variant (:primary, :secondary, :neutral, :success, :warning, :danger, :gradient, :ghost, :outline) (default: :primary)\nsize::Union{Symbol,String}: Button size (:xs, :sm, :base, :lg, :xl) (default: :base)\ntype::String: Button type attribute (default: \"button\")\ndisabled::Bool: Whether button is disabled (default: false)\nloading::Bool: Whether button is in loading state (default: false)\nfull_width::Bool: Whether button should be full width (default: false)\nicon_left::Union{String,Nothing}: Icon HTML to display on the left (optional)\nicon_right::Union{String,Nothing}: Icon HTML to display on the right (optional)\nrounded::Union{Symbol,String}: Border radius (:base, :lg, :xl, :full) (default: :xl)\n\nSlots\n\nButton label text or content\n\nExample\n\n# Basic buttons\n@Button \"Click me\"\n@Button {variant = :secondary} \"Cancel\"\n@Button {variant = :danger, size = :sm} \"Delete\"\n\n# Button with icon\n@Button {icon_left = @Icon {name = \"save\"}} \"Save changes\"\n\n# Loading state\n@Button {loading = true} \"Processing...\"\n\n# Full width button\n@Button {variant = :gradient, full_width = true} \"Get Started\"\n\n# Icon-only button\n@Button {variant = :ghost, size = :sm, rounded = :full} begin\n    @Icon {name = \"settings\"}\nend\n\nAccessibility\n\nARIA & Keyboard: Semantic <button> element with standard Enter/Space activation. Disabled and loading states are properly announced to screen readers.\n\nIcon-only buttons: Must include aria-label for screen reader context.\n\nVisual Design: High contrast focus indicators and 4.5:1 color contrast across all variants.\n\nSee also\n\nLink - For navigation links\nIcon - For button icons\nDropdownMenu - For button dropdowns\nBadge - For button badges/counters\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.Card-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.Card","text":"@Card\n\nA versatile content container with customizable styling, borders, and shadows. Cards provide clean visual separation for grouped content and can be used for content blocks, product listings, user profiles, or dashboard widgets.\n\nProps\n\npadding::Union{Symbol,String}: Padding size (:none, :sm, :base, :lg, :xl) (default: :base)\nshadow::Union{Symbol,String}: Shadow type (:none, :sm, :base, :lg, :colored) (default: :base)\nborder::Union{Bool,Symbol}: Border style (true, false, :gradient) (default: true)\nrounded::Union{Symbol,String}: Border radius (:none, :sm, :base, :lg, :xl) (default: :lg)\nvariant::Union{Symbol,String}: Card variant (:default, :glass, :gradient) (default: :default)\nhoverable::Bool: Whether card has hover effects (default: false)\n\nSlots\n\nCard content - can be any elements like text, images, buttons, or other components\n\nExample\n\n# Basic card\n@Card begin\n    @Heading {level = 3} \"Card Title\"\n    @Text \"This is the card content.\"\n    @Button {variant = :primary} \"Action\"\nend\n\n# Hoverable card with gradient border\n@Card {border = :gradient, hoverable = true} begin\n    @Text \"Hover over me!\"\nend\n\n# Glass morphism card\n@Card {variant = :glass, shadow = :lg} begin\n    @Badge \"New\"\n    @Text \"Glass effect card\"\nend\n\nSee also\n\nBadge - For status indicators within cards\nAlert - For notification messages\nContainer - For page-level containers\nStack - For arranging multiple cards\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.Checkbox-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.Checkbox","text":"@Checkbox\n\nA styled checkbox input that allows users to toggle between checked and unchecked states. Checkboxes are fundamental form controls for binary choices, terms acceptance, or selecting multiple options from a list. This component enhances the native checkbox with custom styling that matches your design system while preserving full keyboard accessibility and screen reader support. It can be used standalone or with an integrated label, and supports different color schemes and sizes to fit various UI contexts.\n\nProps\n\nsize::Union{Symbol,String}: Checkbox size (:sm, :md, :lg) (default: :md)\ncolor::Union{Symbol,String}: Checkbox color (:slate, :primary, :success) (default: :primary)\nlabel::Union{String,Nothing}: Label text (optional)\nname::Union{String,Nothing}: Checkbox name attribute (optional)\nvalue::Union{String,Nothing}: Checkbox value (optional)\nchecked::Bool: Whether checkbox is checked (default: false)\nrequired::Bool: Whether checkbox is required (default: false)\ndisabled::Bool: Whether checkbox is disabled (default: false)\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.Container-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.Container","text":"@Container\n\nA responsive container component that constrains content width and provides consistent padding. This component serves as the primary layout wrapper for page content, ensuring readable line lengths and appropriate spacing across different screen sizes. It automatically centers content and applies responsive breakpoints to maintain optimal viewing experiences from mobile devices to large desktop displays.\n\nProps\n\nsize::Union{Symbol,String}: Container size (:sm, :md, :lg, :xl, \"2xl\", :full) (default: :xl)\npadding::Bool: Whether to include horizontal padding (default: true)\ncentered::Bool: Whether to center the container (default: true)\nrole::Union{String,Nothing}: ARIA role for the container (e.g., \"main\") (optional)\nglass::Bool: Whether to apply glassmorphism effect (default: false)\n\nSlots\n\nContent to be contained within the responsive wrapper\n\nExample\n\n@Container {size = :lg} begin\n    @Heading \"Welcome\"\n    @Text \"This content is constrained to a large container width.\"\nend\n\n# With glass effect\n@Container {glass = true, size = :md} begin\n    @Card \"Glassmorphic content\"\nend\n\nSee also\n\nSection - For page sections with vertical spacing\nStack - For stacking elements with consistent gaps\nGrid - For grid-based layouts\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.Divider-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.Divider","text":"@Divider\n\nA horizontal or vertical separator component that creates visual boundaries between sections of content. Dividers are subtle yet important design elements that help organize interfaces by creating clear visual separation without adding clutter. They guide the eye through layouts, group related content, and provide breathing room between different sections. This component supports both horizontal and vertical orientations with customizable spacing and colors, adapting seamlessly to light and dark themes while maintaining appropriate visual weight for non-intrusive content separation.\n\nProps\n\norientation::Union{Symbol,String}: Divider orientation (:horizontal, :vertical) (default: :horizontal)\nspacing::Union{String,Nothing}: Custom spacing class (optional)\ncolor::Union{String,Nothing}: Border color class (optional)\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.DrawerModal-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.DrawerModal","text":"@DrawerModal\n\nA modal that slides in from the edge of the screen, ideal for navigation menus, settings panels, or secondary content that benefits from a slide-in presentation.\n\nProps\n\nid::String: Unique identifier for the modal (required)\nposition::Union{Symbol,String}: Slide direction (:left, :right, :top, :bottom) (default: :right)\nsize::Union{Symbol,String}: Drawer size (:sm, :md, :lg) (default: :md)\npersistent::Bool: Prevent closing on backdrop click (default: false)\n\nSlots\n\nDrawer content - typically contains ModalHeader and ModalContent components\n\nExample\n\n# Right-side drawer (default)\n@DrawerModal {id = \"settings-drawer\", size = :lg} begin\n    @ModalHeader \"Settings\"\n    @ModalContent begin\n        @Text \"Settings content here...\"\n    end\nend\n\n# Left-side navigation drawer\n@DrawerModal {id = \"nav-drawer\", position = :left} begin\n    @ModalContent begin\n        @nav begin\n            @Link {href = \"/\"} \"Home\"\n            @Link {href = \"/about\"} \"About\"\n            @Link {href = \"/contact\"} \"Contact\"\n        end\n    end\nend\n\n# Bottom drawer for mobile-friendly forms\n@DrawerModal {id = \"filter-drawer\", position = :bottom} begin\n    @ModalHeader \"Filter Options\"\n    @ModalContent begin\n        @FormGroup {label = \"Sort By\"} begin\n            @Select {options = [(\"date\", \"Date\"), (\"name\", \"Name\")]}\n        end\n    end\nend\n\nAccessibility\n\nARIA: Uses native <dialog> semantics with automatic focus trapping.\n\nKeyboard: Escape closes drawer, Tab cycles through focusable elements.\n\nTouch: Designed for mobile interaction with proper touch targets.\n\nSee also\n\nModal - Standard centered modal\nModalHeader - Drawer header section\nModalContent - Drawer body content\nModalTrigger - Button to open drawers\n\nNote: Requires Alpine.js. Drawer corners are sharp (no rounding) for edge-to-edge appearance.\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.DropdownContent-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.DropdownContent","text":"@DropdownContent\n\nThe container for dropdown menu items that appears when the dropdown is triggered, providing the visual menu panel. This component creates a floating panel that positions itself intelligently relative to the trigger using Alpine Anchor, automatically adjusting to stay within viewport bounds. It manages the menu's appearance with smooth transitions, handles keyboard navigation between items, and provides proper focus management. The content container supports various menu patterns including simple lists, grouped items with dividers, and complex layouts with nested submenus.\n\nProps\n\nclass::String: Additional CSS classes\nattrs...: Additional attributes\n\nSlots\n\nDropdown menu items - should contain @DropdownItem, @DropdownDivider, and @DropdownSubmenu components\n\nExample\n\n@DropdownContent begin\n    @DropdownItem {href = \"/profile\"} \"Profile\"\n    @DropdownItem {href = \"/settings\"} \"Settings\"\n    @DropdownDivider\n    @DropdownSubmenu {label = \"More\"} begin\n        @DropdownItem \"Option 1\"\n        @DropdownItem \"Option 2\"\n    end\nend\n\nAccessibility\n\nARIA: Uses role=\"menu\" with proper ARIA relationships and focus management.\n\nKeyboard: Arrow keys navigate, Home/End jump to first/last, Enter/Space activate, Escape closes.\n\nScreen Reader: Menu structure and item states are announced with positional feedback.\n\nSee also\n\nDropdownMenu - Parent dropdown container\nDropdownItem - Menu items\nDropdownDivider - Visual separator\nDropdownSubmenu - Nested menus\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.DropdownDivider-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.DropdownDivider","text":"@DropdownDivider\n\nVisual separator between dropdown items.\n\nProps\n\nclass::String: Additional CSS classes\nattrs...: Additional attributes\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.DropdownItem-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.DropdownItem","text":"@DropdownItem\n\nAn individual menu item within dropdown menus that represents a selectable action or navigation option. Dropdown items are the core interactive elements of any menu, supporting various states like hover, disabled, and different semantic variants (default, danger, success). They can function as either buttons for actions or links for navigation, include optional icons for visual clarity, and maintain consistent styling across different uses. The component ensures proper keyboard accessibility and provides visual feedback through smooth hover transitions.\n\nProps\n\nhref::Union{String,Nothing}: Optional link URL\ndisabled::Bool: Whether item is disabled (default: false)\nicon::Union{String,Nothing}: Optional icon name\nvariant::Symbol: Item variant (:default, :danger, :success)\nclass::String: Additional CSS classes\nattrs...: Additional attributes\n\nSlots\n\nMenu item text or content\n\nExample\n\n# Basic item\n@DropdownItem \"Settings\"\n\n# Link item with icon\n@DropdownItem {href = \"/profile\", icon = \"user\"} \"My Profile\"\n\n# Danger variant\n@DropdownItem {variant = :danger} \"Delete Account\"\n\n# Disabled item\n@DropdownItem {disabled = true} \"Coming Soon\"\n\nAccessibility\n\nARIA: Uses role=\"menuitem\" with proper disabled states via aria-disabled.\n\nKeyboard: Enter/Space activates, participates in parent menu's navigation flow.\n\nVisual Design: High contrast focus indicators and disabled states with reduced opacity.\n\nSee also\n\nDropdownContent - Parent content container\nDropdownSubmenu - For nested items\nDropdownDivider - For separating items\nIcon - For item icons\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.DropdownMenu-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.DropdownMenu","text":"@DropdownMenu\n\nA flexible dropdown menu component with support for nested submenus, powered by Alpine.js and Alpine Anchor. Provides trigger buttons, menu items, dividers, and intelligent positioning with click-outside behavior and keyboard navigation.\n\nRequirements\n\nThis component requires Alpine.js and Alpine Anchor for intelligent positioning:\n\n<script defer src=\"https://cdn.jsdelivr.net/npm/@alpinejs/anchor@latest/dist/cdn.min.js\"></script>\n<script defer src=\"https://cdn.jsdelivr.net/npm/alpinejs@3/dist/cdn.min.js\"></script>\n\nBrowser Compatibility: Modern browsers with ES6 support   Dependencies: Tailwind CSS for styling classes\n\nNote: JavaScript assets are automatically loaded via @__once__ for optimal performance.\n\nAccessibility\n\nARIA: Uses role=\"menu\" with aria-haspopup and aria-expanded states. Menu items have proper roles and state attributes.\n\nKeyboard: Escape to close, Arrow keys to navigate, Enter/Space to activate, Tab to exit.\n\nFocus Management: Returns to trigger when closed, moves to first item when opened via keyboard.\n\nProps\n\nclass::String: Additional CSS classes\nattrs...: Additional attributes\n\nSlots\n\nShould contain exactly one @DropdownTrigger and one @DropdownContent component\n\nUsage\n\n@DropdownMenu begin\n    @DropdownTrigger begin\n        @Button \"Options\" {variant=:secondary}\n    end\n\n    @DropdownContent begin\n        @DropdownItem {href=\"/profile\"} \"Profile\"\n        @DropdownItem {href=\"/settings\"} \"Settings\"\n        @DropdownDivider\n        @DropdownItem {variant=:danger} \"Logout\"\n    end\nend\n\nSee also\n\nDropdownTrigger - Dropdown trigger component\nDropdownContent - Dropdown content container\nDropdownItem - Individual menu items\nDropdownSubmenu - Nested dropdown menus\nButton - Common trigger element\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.DropdownSubmenu-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.DropdownSubmenu","text":"@DropdownSubmenu\n\nA nested submenu component that creates hierarchical flyout menus within dropdowns for organizing complex menu structures. Submenus are essential for creating multi-level navigation without overwhelming users with too many options at once. This component manages its own open state while coordinating with the parent dropdown, positions itself to the side of the parent menu item, and includes visual indicators like chevrons to show that it contains nested options. The submenu supports the same rich content as regular dropdown menus, enabling deep menu hierarchies while maintaining usability.\n\nProps\n\nlabel::String: The label for the submenu trigger\nicon::Union{String,Nothing}: Optional icon name\nclass::String: Additional CSS classes\nattrs...: Additional attributes\n\nSlots\n\nSubmenu items - typically @DropdownItem components\n\nExample\n\n@DropdownSubmenu {label = \"Export As\"} begin\n    @DropdownItem {icon = \"document\"} \"PDF\"\n    @DropdownItem {icon = \"file\"} \"CSV\"\n    @DropdownItem {icon = \"code\"} \"JSON\"\nend\n\nImplementation Notes\n\nThe submenu uses Alpine Anchor for positioning. The key to making this work is the x-anchor directive on the submenu content, which references its trigger button using $el.previousElementSibling. This works because:\n\nThe DOM structure places the trigger button immediately before the submenu content\n$el in the x-anchor context refers to the element with the directive (submenu content)\npreviousElementSibling reliably points to the trigger button\nThis avoids complex ref lookups that can fail due to Alpine scope boundaries\n\nThe submenu state is managed by the parent dropdown's Alpine component through the openSubmenus object, allowing multiple submenus to be open simultaneously.\n\nAccessibility\n\nARIA: Maintains proper hierarchy for nested menus with expandable content indicators.\n\nKeyboard: Arrow Right opens submenu, Arrow Left closes, Escape closes all menus.\n\nFocus Management: Logical movement between menu levels with proper focus return.\n\nSee also\n\nDropdownMenu - Root dropdown component\nDropdownContent - Parent content container\nDropdownItem - Menu items within submenu\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.DropdownTrigger-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.DropdownTrigger","text":"@DropdownTrigger\n\nThe trigger element for dropdown menus that wraps any clickable element to control menu visibility. This component transforms its child element into an interactive trigger that opens the associated dropdown content on click. It automatically manages ARIA attributes for accessibility, including expanded state and menu ownership. The trigger can wrap various elements like buttons, links, or custom components, making it flexible for different design needs. It coordinates with the parent DropdownMenu to handle proper focus management and state synchronization.\n\nProps\n\nattrs...: Additional attributes passed to the wrapper\n\nSlots\n\nClickable element that triggers the dropdown (typically a Button)\n\nExample\n\n@DropdownTrigger begin\n    @Button {variant = :secondary} \"Menu\"\nend\n\nAccessibility\n\nARIA: Uses aria-haspopup=\"true\" and maintains aria-expanded state.\n\nKeyboard: Enter/Space and Arrow Down open dropdown, Escape closes (handled by parent).\n\nSee also\n\nDropdownMenu - Parent dropdown container\nDropdownContent - Dropdown content that appears\nButton - Common trigger element\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.FormGroup-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.FormGroup","text":"@FormGroup\n\nA form field wrapper that provides consistent layout for form controls with labels, help text, and error messages. Automatically generates unique IDs and establishes proper accessibility relationships between elements.\n\nProps\n\nlabel::Union{String,Nothing}: Field label (optional)\nhelp::Union{String,Nothing}: Help text (optional)\nerror::Union{String,Nothing}: Error message (optional)\nrequired::Bool: Whether field is required (default: false)\nid::Union{String,Nothing}: ID for the form field (will be auto-generated if not provided) (optional)\n\nSlots\n\nForm control element(s) - typically Input, Textarea, Select, Checkbox, or Radio components\n\nExample\n\n# Basic form field\n@FormGroup {label = \"Email\", help = \"We'll never share your email.\"} begin\n    @Input {type = \"email\", placeholder = \"name@example.com\"}\nend\n\n# Required field with error\n@FormGroup {label = \"Password\", required = true, error = \"Password must be at least 8 characters\"} begin\n    @Input {type = \"password\", state = :error}\nend\n\n# Checkbox group\n@FormGroup {label = \"Preferences\"} begin\n    @Checkbox {label = \"Send me updates\"}\nend\n\nSee also\n\nInput - Text input component\nTextarea - Multi-line text input\nSelect - Dropdown select component\nCheckbox - Checkbox input\nRadio - Radio button group\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.Grid-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.Grid","text":"@Grid\n\nA responsive grid layout component for arranging content in columns. The Grid component provides a powerful and flexible way to create multi-column layouts that automatically adapt to different screen sizes. It handles the complexity of responsive design by allowing you to specify different column counts for various breakpoints, making it ideal for galleries, card layouts, product listings, and any content that benefits from a structured grid arrangement.\n\nProps\n\ncols::Int: Default number of columns (default: 1)\nsm::Int: Columns on small screens (optional)\nmd::Int: Columns on medium screens (optional)\nlg::Int: Columns on large screens (optional)\nxl::Int: Columns on extra large screens (optional)\ngap::Int: Gap size using Tailwind spacing scale (default: 4)\n\nSlots\n\nGrid items to be arranged in columns\n\nExample\n\n# Responsive card grid\n@Grid {cols = 1, md = 2, lg = 3, gap = 6} begin\n    @Card \"Item 1\"\n    @Card \"Item 2\"\n    @Card \"Item 3\"\n    @Card \"Item 4\"\n    @Card \"Item 5\"\n    @Card \"Item 6\"\nend\n\n# Simple two-column layout\n@Grid {cols = 2, gap = 4} begin\n    @Section \"Left content\"\n    @Section \"Right content\"\nend\n\nSee also\n\nStack - For single-direction layouts\nContainer - For constraining grid width\nCard - Common grid item component\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.Heading-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.Heading","text":"@Heading\n\nA semantic heading component that establishes clear visual hierarchy and structure in your content through flexible typography options. Headings are fundamental to web accessibility and SEO, providing both visual and semantic structure that helps users and search engines understand content organization. This component automatically renders the appropriate HTML heading element (h1-h6) based on the specified level while allowing complete control over visual appearance through size overrides, weight adjustments, and color options. Special features like gradient text effects enable eye-catching headlines that maintain readability and accessibility standards.\n\nProps\n\nlevel::Int: Heading level (1-6) (default: 1)\nsize::Union{Symbol,String,Nothing}: Override size (:xs, :sm, :base, :lg, :xl, \"2xl\", \"3xl\", \"4xl\", \"5xl\", \"6xl\") (optional)\nweight::Union{Symbol,String}: Font weight (:light, :normal, :medium, :semibold, :bold, :extrabold) (default: :bold)\ncolor::Union{String,Nothing}: Text color class (optional)\ngradient::Bool: Whether to use gradient text effect (default: false)\ntracking::Union{Symbol,String}: Letter spacing (:tight, :normal, :wide) (default: :tight)\n\nSlots\n\nHeading text content\n\nExample\n\n# Basic headings\n@Heading \"Welcome to Our Site\"\n@Heading {level = 2} \"About Us\"\n@Heading {level = 3, weight = :medium} \"Our Services\"\n\n# Gradient heading\n@Heading {gradient = true} \"Amazing Features\"\n\n# Custom sized heading\n@Heading {level = 2, size = \"4xl\"} \"Large Subheading\"\n\n# Colored heading\n@Heading {level = 4, color = \"text-blue-600 dark:text-blue-400\"} \"Blue Heading\"\n\nSee also\n\nText - For body text\nLink - For hyperlinks\nBadge - For small labels\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.Icon-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.Icon","text":"@Icon\n\nA flexible icon component that supports both built-in icons and custom SVG content. Icons are essential visual elements that enhance user interfaces by providing quick visual recognition of actions, states, and categories. This component offers a comprehensive library of built-in icons covering common UI needs, while also allowing custom SVG content for specialized requirements. With consistent sizing options and color inheritance, icons integrate seamlessly into buttons, links, navigation elements, and standalone contexts. The component ensures proper accessibility through ARIA attributes, making icons work well for both decorative and interactive purposes.\n\nProps\n\nsize::Union{Symbol,String}: Icon size (:xs, :sm, :md, :lg, :xl) (default: :md)\ncolor::Union{String,Nothing}: Icon color class (optional)\nname::Union{String,Nothing}: Icon name for built-in icons (optional)\naria_label::Union{String,Nothing}: ARIA label for interactive icons (optional)\ndecorative::Bool: Whether icon is purely decorative (default: true)\n\nSlots\n\nCustom SVG content - used when name prop is not provided or when the named icon is not found\n\nAvailable Icons\n\nIcons are loaded from SVG files in the assets/icons/ directory. Available icons include:\n\nNavigation: home, arrow-up/down/left/right, chevron-up/down/left/right, external-link\nActions: edit, trash, save, download, upload, copy, refresh\nCommunication: mail, phone, chat\nMedia: play, pause, stop, camera, image\nStatus: info, info-circle, warning, exclamation-triangle, error, x-circle, question, bell, check-circle\nFiles: file, document, code\nUI Controls: filter, sort, grid, list, eye, eye-off, lock, unlock\nTime: calendar, clock\nE-commerce: cart, credit-card, tag\nSocial: heart, star, bookmark, share\nUI: check, x, plus, minus, menu, search, user, settings, logout, folder, dots-vertical, dots-horizontal, spinner\n\nExample\n\n# Using a built-in icon\n@Icon {name = \"check\", size = :lg}\n@Icon {name = \"heart\", color = \"text-red-500\"}\n\n# Interactive icon with ARIA label\n@Icon {name = \"trash\", aria_label = \"Delete item\", decorative = false}\n\n# Custom SVG icon\n@Icon {size = :xl, color = \"text-purple-500\"} begin\n    @svg {viewBox = \"0 0 24 24\", fill = \"currentColor\"} begin\n        @path {d = \"M12 2L2 7v10c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V7l-10-5z\"}\n    end\nend\n\n# Fallback when icon not found\n@Icon {name = \"nonexistent\"} begin\n    @text \"?\"  # Fallback content\nend\n\nSee also\n\nButton - Commonly used with icons\nLink - For icon links\nBadge - Can contain icons\nDropdownItem - Supports icon props\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.Input-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.Input","text":"@Input\n\nA styled text input field for collecting user input with support for various types (text, email, password, number). Features different states (default, error, success), optional icons, and full accessibility with smooth focus transitions.\n\nProps\n\ntype::String: Input type (default: \"text\")\nsize::Union{Symbol,String}: Input size (:xs, :sm, :base, :lg, :xl) (default: :base)\nstate::Union{Symbol,String}: Input state (:default, :error, :success) (default: :default)\nicon::Union{String,Nothing}: Icon HTML to display (optional)\nplaceholder::Union{String,Nothing}: Placeholder text (optional)\nname::Union{String,Nothing}: Input name attribute (optional)\nvalue::Union{String,Nothing}: Input value (optional)\nrequired::Bool: Whether input is required (default: false)\ndisabled::Bool: Whether input is disabled (default: false)\nid::Union{String,Nothing}: Input ID for label association (optional)\naria_describedby::Union{String,Nothing}: ID of element describing the input (optional)\n\nAccessibility\n\nThis component implements comprehensive form accessibility standards:\n\nARIA Patterns:\n\nUses aria-invalid=\"true\" for error states to communicate validation status\nSupports aria-describedby for associating help text or error messages\nMaintains proper input semantics with appropriate type attributes\nRequired fields are marked with HTML required attribute\n\nKeyboard Navigation:\n\nTab: Moves focus to input field\nShift+Tab: Moves focus to previous element\nEnter: Submits form (for most input types)\nAll keyboard input works as expected for each input type\n\nScreen Reader Support:\n\nInput purpose is communicated through type, name, and placeholder\nError states are announced through aria-invalid and associated descriptions\nRequired status is communicated to assistive technology\nIcon content is properly marked as decorative or informative\n\nForm Integration:\n\nInputs should be associated with labels using for/id relationships\nError messages should be linked via aria-describedby\nHelp text should be associated with input for context\nFieldsets and legends should group related inputs\n\nVisual Design:\n\nFocus indicators are clearly visible with high contrast\nError states use both color and other visual indicators\nSufficient color contrast maintained across all states (4.5:1 minimum)\nIcons and decorative elements don't interfere with screen readers\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.Link-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.Link","text":"@Link\n\nA styled anchor component that creates consistent, accessible hyperlinks with smooth hover effects and proper visual feedback. Links are critical navigation elements that connect pages and resources, requiring careful attention to usability, accessibility, and visual design. This component enhances standard HTML anchors with customizable styling variants, automatic handling of external links with security attributes, and smooth color transitions that provide clear interactive feedback. It maintains proper focus states for keyboard navigation and supports integration with icons for enhanced visual communication while ensuring links remain distinguishable and accessible to all users.\n\nProps\n\nhref::String: Link destination (required)\nvariant::Union{Symbol,String}: Link variant (:default, :underline, :hover_underline) (default: :default)\ncolor::Union{String,Nothing}: Text color class (optional)\nexternal::Bool: Whether this is an external link (adds target=\"_blank\") (default: false)\naria_label::Union{String,Nothing}: ARIA label for additional context (optional)\n\nSlots\n\nLink text or content\n\nExample\n\n# Basic link\n@Link {href = \"/about\"} \"About Us\"\n\n# External link\n@Link {href = \"https://example.com\", external = true} \"Visit Example.com\"\n\n# Underlined link\n@Link {href = \"/contact\", variant = :underline} \"Contact Us\"\n\n# Custom colored link\n@Link {href = \"/products\", color = \"text-purple-600 hover:text-purple-700\"} \"Our Products\"\n\n# Link with icon\n@Link {href = \"/download\"} begin\n    @Icon {name = \"download\", size = :sm}\n    @text \" Download PDF\"\nend\n\nSee also\n\nButton - For button-style links\nText - For regular text\nHeading - For heading text\nIcon - For link icons\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.List-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.List","text":"@List\n\nA styled list component that enhances standard HTML lists with consistent visual design and flexible presentation options. Lists are essential for presenting sequential or related information in a scannable format, from simple bullet points to numbered steps or checklists. This component offers multiple variants including traditional bullets, numbers, checkmarks, or no markers at all, combined with adjustable spacing to suit different content densities. The styling is carefully crafted to maintain readability while providing visual interest through custom markers and proper indentation.\n\nProps\n\nvariant::Union{Symbol,String}: List variant (:bullet, :number, :check, :none) (default: :bullet)\nspacing::Union{Symbol,String}: Item spacing (:tight, :normal, :loose) (default: :normal)\n\nSlots\n\nList items - should contain li elements\n\nExample\n\n# Bulleted list\n@List begin\n    @li \"First item\"\n    @li \"Second item\"\n    @li \"Third item\"\nend\n\n# Numbered list\n@List {variant = :number} begin\n    @li \"Step one\"\n    @li \"Step two\"\n    @li \"Step three\"\nend\n\n# Checklist with loose spacing\n@List {variant = :check, spacing = :loose} begin\n    @li \"Task completed\"\n    @li \"Another completed task\"\n    @li \"Final task done\"\nend\n\nSee also\n\nTable - For tabular data\nTimeline - For chronological lists\nStack - For custom list layouts\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.Modal-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.Modal","text":"@Modal\n\nA modal dialog component built on the native HTML <dialog> element with enhanced functionality for displaying content that requires user attention while temporarily blocking page interaction.\n\nProps\n\nid::String: Unique identifier for the modal (optional, auto-generated if not provided)\nsize::Union{Symbol,String}: Modal size (:sm, :md, :lg, :xl, :fullscreen) (default: :md)\npersistent::Bool: Prevent closing on backdrop click (default: false)\nshow_close::Bool: Show close button in top-right (default: true)\n\nSlots\n\nModal content - typically contains ModalHeader, ModalContent, and ModalFooter components\n\nExample\n\n# Basic modal with trigger\n@ModalTrigger {target = \"example-modal\"} begin\n    @Button \"Open Modal\"\nend\n\n@Modal {id = \"example-modal\"} begin\n    @ModalHeader \"Dialog Title\"\n    @ModalContent begin\n        @Text \"Modal content goes here.\"\n    end\n    @ModalFooter begin\n        @Button {var\"@click\" = \"close()\"} \"Close\"\n    end\nend\n\n# Persistent modal (no backdrop close)\n@Modal {id = \"persistent-modal\", persistent = true} begin\n    @ModalContent \"This modal requires explicit close action.\"\nend\n\n# Large modal without close button\n@Modal {id = \"large-modal\", size = :lg, show_close = false} begin\n    @ModalContent \"Large modal content.\"\nend\n\nAccessibility\n\nARIA: Uses native <dialog> semantics with automatic focus trapping and keyboard navigation.\n\nKeyboard: Escape key closes modal, Tab cycles through focusable elements, Enter activates buttons.\n\nFocus Management: Automatically focuses first interactive element on open, returns focus to trigger on close.\n\nScreen Reader: Native dialog role and content are properly announced.\n\nSee also\n\nModalTrigger - Button to open modals\nModalContent - Modal body content\nModalHeader - Modal header with title\nModalFooter - Modal footer with actions\nDrawerModal - Slide-in drawer variant\n\nNote: Requires Alpine.js for enhanced functionality. Browser support: Chrome 37+, Firefox 98+, Safari 15.4+. JavaScript assets are loaded automatically.\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.ModalContent-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.ModalContent","text":"@ModalContent\n\nThe main content area of a modal dialog, providing proper spacing and scrolling behavior for body content.\n\nProps\n\nscrollable::Bool: Allow content to scroll if it exceeds modal height (default: true)\n\nSlots\n\nModal body content - any components, text, forms, or other elements\n\nExample\n\n@Modal {id = \"example\"} begin\n    @ModalContent begin\n        @Text \"Your modal content here.\"\n        @Text \"Can include multiple paragraphs.\"\n    end\nend\n\n# Non-scrollable content\n@ModalContent {scrollable = false} begin\n    @Text \"Fixed height content.\"\nend\n\nSee also\n\nModal - Parent modal component\nModalHeader - Modal header section\nModalFooter - Modal footer section\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.ModalFooter-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.ModalFooter","text":"@ModalFooter\n\nA footer section for modal dialogs containing action buttons with consistent styling and flexible layout options.\n\nProps\n\njustify::Union{Symbol,String}: Button alignment (:start, :center, :end, :between) (default: :end)\n\nSlots\n\nFooter content - typically buttons or button groups\n\nExample\n\n@ModalFooter begin\n    @Button {variant = :secondary, var\"@click\" = \"close()\"} \"Cancel\"\n    @Button {variant = :primary} \"Save Changes\"\nend\n\n# Center-aligned buttons\n@ModalFooter {justify = :center} begin\n    @Button \"Understood\"\nend\n\n# Space-between layout\n@ModalFooter {justify = :between} begin\n    @Button {variant = :ghost} \"Learn More\"\n    @div {class = \"space-x-3\"} begin\n        @Button {variant = :secondary} \"Cancel\"\n        @Button {variant = :primary} \"Continue\"\n    end\nend\n\nSee also\n\nModal - Parent modal component\nModalHeader - Modal header section\nModalContent - Modal body section\nButton - Action buttons for footer\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.ModalHeader-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.ModalHeader","text":"@ModalHeader\n\nA header section for modal dialogs containing the title and optional subtitle with consistent styling and spacing.\n\nProps\n\nsubtitle::Union{String,Nothing}: Optional subtitle text (default: nothing)\n\nSlots\n\nHeader content - typically plain text for title, or custom elements\n\nExample\n\n@ModalHeader \"Confirm Action\"\n\n@ModalHeader {subtitle = \"This action cannot be undone\"} \"Delete Item\"\n\n# Custom header content\n@ModalHeader begin\n    @Heading {level = 2} \"Custom Header\"\n    @Badge {variant = :warning} \"Beta\"\nend\n\nSee also\n\nModal - Parent modal component\nModalContent - Modal body section\nModalFooter - Modal footer section\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.ModalTrigger-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.ModalTrigger","text":"@ModalTrigger\n\nA button component that opens a modal dialog when clicked, inheriting all standard Button functionality with added modal triggering capability.\n\nProps\n\ntarget::String: ID of the modal to open (required)\nvariant::Union{Symbol,String}: Button variant (default: :secondary)\nsize::Union{Symbol,String}: Button size (default: :base)\nAll other standard Button props (disabled, loading, etc.)\n\nSlots\n\nButton content - text, icons, or other elements\n\nExample\n\n@ModalTrigger {target = \"my-modal\", variant = :primary} \"Open Modal\"\n\n@ModalTrigger {target = \"confirm-dialog\", variant = :danger, size = :sm} \"Delete Item\"\n\n# With icon\n@ModalTrigger {target = \"settings-modal\"} begin\n    @Icon {name = \"cog\"}\n    @text \" Settings\"\nend\n\nAccessibility\n\nARIA: Uses aria-haspopup=\"dialog\" and aria-controls to indicate modal relationship.\n\nKeyboard: Enter and Space activate the trigger, same as standard button behavior.\n\nSee also\n\nModal - The modal component to trigger\nButton - Base button component with all available props\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.Pagination-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.Pagination","text":"@Pagination\n\nA page navigation component that provides intuitive controls for navigating through paginated content. Pagination is essential for managing large datasets by breaking them into digestible chunks, improving both performance and user experience. This component intelligently displays page numbers with ellipsis for large ranges, always shows first and last pages, and includes previous/next navigation buttons. It handles edge cases like disabled states at boundaries and provides proper ARIA labels for screen reader users. The responsive design ensures the pagination remains usable on mobile devices.\n\nProps\n\ncurrent::Int: Current page number (default: 1)\ntotal::Int: Total number of pages (default: 1)\nsiblings::Int: Number of sibling pages to show (default: 1)\nbase_url::String: Base URL for page links (default: \"#\")\n\nAccessibility\n\nARIA: Uses <nav aria-label=\"Pagination\"> with aria-current=\"page\" and aria-disabled for states.\n\nKeyboard: Tab through pagination controls, Enter activates navigation. Disabled controls are skipped.\n\nScreen Reader: Current page and button states are announced with positional context.\n\nGuidelines: Provide meaningful URLs, consider mobile behavior, include page count context.\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.Progress-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.Progress","text":"@Progress\n\nA modern progress bar component that visually represents the completion status of a task or process. Progress bars provide essential feedback during operations like file uploads, form submissions, or multi-step workflows, helping users understand how much has been completed and how much remains. This component supports various visual styles including solid colors and gradients, optional striped patterns for visual interest, and smooth animations that bring the interface to life. Labels can be added to show exact percentages or descriptive text.\n\nProps\n\nvalue::Int: Current progress value (default: 0)\nmax::Int: Maximum progress value (default: 100)\nsize::Union{Symbol,String}: Progress bar size (:sm, :md, :lg) (default: :md)\ncolor::Union{Symbol,String}: Progress bar color (:primary, :success, :warning, :danger, :gradient) (default: :primary)\nstriped::Bool: Whether to show striped pattern (default: false)\nanimated::Bool: Whether to animate the stripes (default: false)\nanimated_fill::Bool: Whether to animate the progress fill on load (default: false)\nlabel::Union{String,Nothing}: Label to display (optional)\naria_label::Union{String,Nothing}: ARIA label for screen readers (optional)\n\nInteractive Features\n\nWhen animated_fill=true, this component uses Alpine.js for smooth fill animation on load. To enable interactivity, include Alpine.js in your page:\n\n@script {defer=true, src=\"https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js\"}\n\nWithout Alpine.js, the progress bar will display at its final value without animation.\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.Radio-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.Radio","text":"@Radio\n\nA radio button component that enables users to select a single option from a group of mutually exclusive choices. Radio buttons are ideal when you want to present all available options upfront and ensure users can only select one. This component renders a complete radio group with proper ARIA attributes and keyboard navigation support. Each option can include a label, and the entire group maintains visual consistency with other form elements while providing clear feedback about the selected state.\n\nProps\n\nsize::Union{Symbol,String}: Radio size (:sm, :md, :lg) (default: :md)\ncolor::Union{Symbol,String}: Radio color (:slate, :primary, :success) (default: :primary)\noptions::Vector{Tuple{String,String}}: Options as (value, label) tuples\nname::String: Radio group name (required)\nvalue::Union{String,Nothing}: Selected value (optional)\nrequired::Bool: Whether radio group is required (default: false)\ndisabled::Bool: Whether radio group is disabled (default: false)\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.Section-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.Section","text":"@Section\n\nA semantic section component with consistent vertical spacing for page structure. Section provides a standardized way to divide your page into distinct content areas with appropriate padding and optional background colors. It helps maintain visual hierarchy and breathing room between different parts of your page, making it perfect for hero sections, feature showcases, content blocks, and any logical grouping of related information.\n\nProps\n\nspacing::Union{Symbol,String}: Vertical spacing size (:sm, :md, :lg) (default: :md)\nbackground::Union{String,Nothing}: Background color class (optional)\n\nSlots\n\nSection content\n\nExample\n\n# Hero section\n@Section {spacing = :lg, background = \"bg-gray-50 dark:bg-gray-900\"} begin\n    @Container begin\n        @Heading {level = 1} \"Welcome to our site\"\n        @Text {variant = :lead} \"Discover amazing features\"\n    end\nend\n\n# Content section\n@Section begin\n    @Container begin\n        @Grid {cols = 1, md = 2} begin\n            @div \"Feature 1\"\n            @div \"Feature 2\"\n        end\n    end\nend\n\nSee also\n\nContainer - For constraining content within sections\nStack - For organizing section content\nGrid - For section grid layouts\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.Select-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.Select","text":"@Select\n\nA dropdown select element that allows users to choose from a predefined list of options. Select components are essential for forms where users need to pick from a constrained set of choices, providing a cleaner interface than radio buttons when dealing with many options. This implementation features a custom-styled dropdown arrow for consistency across browsers, support for placeholder text, and full integration with form validation states. The component maintains accessibility standards while offering a modern appearance.\n\nProps\n\nsize::Union{Symbol,String}: Select size (:xs, :sm, :base, :lg, :xl) (default: :base)\nstate::Union{Symbol,String}: Select state (:default, :error, :success) (default: :default)\noptions::Vector{Tuple{String,String}}: Options as (value, label) tuples\nplaceholder::Union{String,Nothing}: Placeholder option text (optional)\nname::Union{String,Nothing}: Select name attribute (optional)\nvalue::Union{String,Nothing}: Selected value (optional)\nrequired::Bool: Whether select is required (default: false)\ndisabled::Bool: Whether select is disabled (default: false)\nid::Union{String,Nothing}: Select ID for label association (optional)\naria_describedby::Union{String,Nothing}: ID of element describing the select (optional)\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.SelectDropdown-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.SelectDropdown","text":"@SelectDropdown\n\nAn enhanced dropdown select component with search functionality, keyboard navigation, and multiple selection support. Features type-ahead search, clear buttons, and full accessibility with Alpine.js integration.\n\nProps\n\noptions::Vector{Tuple{String,String}}: Options as (value, label) tuples\nplaceholder::Union{String,Nothing}: Placeholder text (default: \"Select...\")\nsearchable::Bool: Enable search functionality (default: false)\nmultiple::Bool: Enable multiple selection (default: false)\nclearable::Bool: Enable clear button to reset selection (default: false)\nmax_height::String: Maximum height of dropdown (default: \"300px\")\nsize::Union{Symbol,String}: Component size (:xs, :sm, :base, :lg, :xl) (default: :base)\nstate::Union{Symbol,String}: Component state (:default, :error, :success) (default: :default)\nname::Union{String,Nothing}: Form field name (optional)\nvalue::Union{String,Vector{String},Nothing}: Selected value(s) (optional)\ndisabled::Bool: Whether component is disabled (default: false)\nrequired::Bool: Whether field is required (default: false)\nid::Union{String,Nothing}: Component ID (optional)\n\nRequirements\n\nThis component requires Alpine.js and Alpine Anchor for intelligent positioning:\n\n<script defer src=\"https://cdn.jsdelivr.net/npm/@alpinejs/anchor@latest/dist/cdn.min.js\"></script>\n<script defer src=\"https://cdn.jsdelivr.net/npm/alpinejs@3/dist/cdn.min.js\"></script>\n\nBrowser Compatibility: Modern browsers with ES6 support   Dependencies: Tailwind CSS for styling classes\n\nNote: JavaScript assets are automatically loaded via @__once__ for optimal performance.\n\nAccessibility\n\nARIA Patterns: Uses role=\"listbox\" with proper option roles, aria-expanded state, and aria-selected for selections.\n\nKeyboard Navigation: Space/Enter to open, Arrow keys to navigate, Escape to close, type-ahead search support.\n\nScreen Reader Support: Selection changes, option count, and search functionality are announced. Works with form validation.\n\nVisual Design: High contrast focus indicators and touch-friendly spacing on mobile devices.\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.Spinner-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.Spinner","text":"@Spinner\n\nA loading spinner component that provides visual feedback during asynchronous operations. Spinners are crucial for maintaining user engagement during loading states, preventing users from thinking the application has frozen or crashed. This simple yet effective component uses smooth rotation animation and comes in multiple sizes and colors to fit various contexts, from small inline loading indicators to full-page loading states. The spinner automatically includes proper ARIA attributes for accessibility.\n\nProps\n\nsize::Union{Symbol,String}: Spinner size (:sm, :md, :lg) (default: :md)\ncolor::Union{Symbol,String}: Spinner color (:slate, :primary, :white) (default: :primary)\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.Stack-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.Stack","text":"@Stack\n\nA flexible stack component for arranging child elements with consistent spacing in vertical or horizontal layouts. Stack simplifies the common pattern of placing elements in a row or column with uniform gaps between them, eliminating the need for manual margin management. It's particularly useful for creating button groups, form layouts, card arrangements, and any scenario where you need predictable spacing between a series of elements.\n\nProps\n\ndirection::Union{Symbol,String}: Stack direction (:vertical or :horizontal) (default: :vertical)\ngap::Union{Symbol,String,Int}: Gap size using Tailwind spacing scale or preset (:xs, :sm, :base, :lg, :xl) (default: 4)\nalign::Union{Symbol,String}: Alignment (:start, :center, :end, :stretch) (default: :stretch)\njustify::Union{Symbol,String}: Justification (:start, :center, :end, :between, :around, :evenly) (default: :start)\nwrap::Bool: Whether items should wrap (default: false)\n\nSlots\n\nChild elements to be stacked with automatic spacing\n\nExample\n\n# Vertical stack with cards\n@Stack {gap = :lg} begin\n    @Card \"First item\"\n    @Card \"Second item\"\n    @Card \"Third item\"\nend\n\n# Horizontal button group\n@Stack {direction = :horizontal, gap = :sm} begin\n    @Button \"Save\"\n    @Button {variant = :secondary} \"Cancel\"\nend\n\nSee also\n\nGrid - For multi-column layouts\nContainer - For constraining content width\nCard - Common child component for stacks\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.TabPanel-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.TabPanel","text":"@TabPanel\n\nA tab panel component designed to work seamlessly within the Tabs container, automatically handling content visibility based on the active tab selection. Each TabPanel represents a distinct content section that appears when its corresponding tab is selected. The component manages smooth transitions between panels using Alpine.js, ensuring a polished user experience. It maintains proper ARIA relationships with tab buttons for accessibility and supports any type of content, from simple text to complex nested components.\n\nProps\n\nid::String: The tab ID this panel corresponds to (required)\nclass::String: Additional CSS classes (optional)\n\nSlots\n\nTab panel content - can contain any elements that should be displayed when this tab is active\n\nUsage\n\n@Tabs {items = [(\"tab1\", \"Tab 1\"), (\"tab2\", \"Tab 2\")]} begin\n    @TabPanel {id = \"tab1\"} begin\n        @Text \"Content for Tab 1\"\n    end\n\n    @TabPanel {id = \"tab2\"} begin\n        @Text \"Content for Tab 2\"\n    end\nend\n\nAccessibility\n\nARIA: Uses role=\"tabpanel\" with proper aria-controls/id relationships.\n\nKeyboard: Normal tab order through panel content, Shift+Tab returns to tab button.\n\nGuidelines: Panel content should start with a heading for structure.\n\nSee also\n\nTabs - Parent tabs container\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.Table-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.Table","text":"@Table\n\nA responsive data table component for displaying structured data with extensive customization options. Features striped rows, hover effects, sticky headers, sortable columns, and full accessibility support.\n\nProps\n\nstriped::Bool: Whether to show striped rows (default: false)\nbordered::Bool: Whether to show borders (default: true)\nhover::Bool: Whether to show hover effect on rows (default: true)\ncompact::Bool: Whether to use compact spacing (default: false)\nsticky_header::Bool: Whether table header should be sticky (default: false)\nsortable::Bool: Whether to show sortable column indicators (default: false)\ncaption::Union{String,Nothing}: Table caption/description (optional)\noverflow::Bool: Whether to apply overflow scrolling (default: true). Set to false when table contains dropdowns or other overlaying elements\n\nSlots\n\nTable content - should contain standard HTML table elements (thead, tbody, tr, th, td)\n\nExample\n\n# Basic table\n@Table begin\n    @thead begin\n        @tr begin\n            @th \"Name\"\n            @th \"Email\"\n            @th \"Role\"\n        end\n    end\n    @tbody begin\n        @tr begin\n            @td \"John Doe\"\n            @td \"john@example.com\"\n            @td \"Admin\"\n        end\n        @tr begin\n            @td \"Jane Smith\"\n            @td \"jane@example.com\"\n            @td \"User\"\n        end\n    end\nend\n\n# Striped table with sticky header\n@Table {striped = true, sticky_header = true, caption = \"User list\"} begin\n    @thead begin\n        @tr begin\n            @th \"ID\"\n            @th \"Username\"\n            @th \"Status\"\n        end\n    end\n    @tbody begin\n        # Table rows...\n    end\nend\n\nAccessibility\n\nSemantic Markup: Uses proper <table>, <thead>, <tbody>, <th>, and <td> elements with scope attributes.\n\nScreen Readers: Table structure, captions, and header relationships are announced to assistive technology.\n\nKeyboard Navigation: Tab through any interactive elements within table cells.\n\nGuidelines: Provide meaningful captions, clear column headers, and consider responsive alternatives for mobile.\n\nSee also\n\nList - For simpler list layouts\nGrid - For card-based data display\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.Tabs-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.Tabs","text":"@Tabs\n\nAn interactive tab navigation component powered by Alpine.js that organizes content into switchable panels. Tabs are powerful UI patterns for presenting related content in a compact space while allowing users to quickly switch between different views. This component manages the active tab state, provides smooth transitions between panels, and ensures proper ARIA attributes for accessibility. The tab interface supports keyboard navigation and maintains the selected state across the session. With customizable styling and responsive behavior, tabs adapt well to different screen sizes and content types.\n\nProps\n\nitems::Vector{Tuple{String,String}}: Tab items as (id, label) tuples\nactive::String: ID of the active tab (default: first item's ID)\naria_label::Union{String,Nothing}: ARIA label for the tab list (optional)\n\nRequirements\n\nThis component requires Alpine.js for tab switching functionality:\n\n<script defer src=\"https://cdn.jsdelivr.net/npm/alpinejs@3/dist/cdn.min.js\"></script>\n\nBrowser Compatibility: Modern browsers with ES6 support   Dependencies: Tailwind CSS for styling classes\n\nNote: JavaScript assets are loaded automatically via @__once__ for optimal performance.\n\nUsage\n\n@Tabs {items = [(\"tab1\", \"Tab 1\"), (\"tab2\", \"Tab 2\")]} begin\n    @TabPanel {id = \"tab1\"} begin\n        @Text \"Content for Tab 1\"\n    end\n\n    @TabPanel {id = \"tab2\"} begin\n        @Text \"Content for Tab 2\"\n    end\nend\n\nAccessibility\n\nARIA: Uses role=\"tab\", role=\"tablist\", and aria-controls with proper aria-selected states.\n\nKeyboard: Arrow Left/Right navigate tabs, Home/End jump to first/last, Tab moves to panel content.\n\nFocus Management: Automatic tab switching follows focus with clear visual indicators.\n\nSee also\n\nTabPanel - Tab content panels\nDropdownMenu - Alternative navigation pattern\nBreadcrumb - For navigation hierarchy\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.Text-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.Text","text":"@Text\n\nA paragraph text component that provides consistent typography styling for body content throughout your application. Text components form the foundation of readable interfaces, ensuring that body copy maintains appropriate line heights, spacing, and contrast across different contexts. This versatile component supports multiple variants from small supporting text to prominent lead paragraphs, with fine-grained control over size, weight, color, and alignment. It adapts seamlessly to different screen sizes and color schemes while maintaining optimal readability through carefully chosen typography defaults.\n\nProps\n\nvariant::Union{Symbol,String}: Text variant (:body, :lead, :small) (default: :body)\nsize::Union{Symbol,String,Nothing}: Override size (:xs, :sm, :base, :lg, :xl) (optional)\nweight::Union{Symbol,String}: Font weight (:normal, :medium, :semibold, :bold) (default: :normal)\ncolor::Union{String,Nothing}: Text color class (optional)\nalign::Union{Symbol,String}: Text alignment (:left, :center, :right, :justify) (default: :left)\n\nSlots\n\nParagraph text content\n\nExample\n\n# Basic paragraph\n@Text \"This is a regular paragraph of text.\"\n\n# Lead paragraph\n@Text {variant = :lead} \"This is a larger, emphasized paragraph often used for introductions.\"\n\n# Small text\n@Text {variant = :small, color = \"text-gray-600\"} \"This is smaller supporting text.\"\n\n# Centered bold text\n@Text {align = :center, weight = :bold} \"Centered bold statement\"\n\n# Custom styled text\n@Text {size = :lg, weight = :medium} \"Custom sized medium weight text\"\n\nSee also\n\nHeading - For headings\nLink - For inline links\nAlert - For notification text\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.Textarea-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.Textarea","text":"@Textarea\n\nA multi-line text input component designed for longer form content like comments, descriptions, or messages. Textareas expand on the functionality of regular inputs by allowing multiple lines of text and providing resize controls for user convenience. They maintain visual consistency with other form elements while offering additional features like customizable row counts and resize behavior. The component includes the same state management and theming capabilities as other form inputs, ensuring a seamless form experience.\n\nProps\n\nrows::Int: Number of visible rows (default: 4)\nresize::Union{Symbol,String}: Resize behavior (:none, :vertical, :horizontal, :both) (default: :vertical)\nstate::Union{Symbol,String}: Input state (:default, :error, :success) (default: :default)\nplaceholder::Union{String,Nothing}: Placeholder text (optional)\nname::Union{String,Nothing}: Textarea name attribute (optional)\nvalue::Union{String,Nothing}: Textarea value (optional)\nrequired::Bool: Whether textarea is required (default: false)\ndisabled::Bool: Whether textarea is disabled (default: false)\nid::Union{String,Nothing}: Textarea ID for label association (optional)\naria_describedby::Union{String,Nothing}: ID of element describing the textarea (optional)\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.ThemeToggle-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.ThemeToggle","text":"@ThemeToggle\n\nA theme toggle button component that enables users to switch between light, dark, and system-based color schemes with a single click. Theme toggles have become essential for modern web applications, respecting user preferences and improving accessibility for users who need specific contrast levels or reduced eye strain. This component provides a smooth cycling through theme options with visual feedback, remembers user preferences across sessions, and integrates with system-level theme settings. The button adapts its appearance to the current theme and provides clear indication of the active mode through both icons and optional text labels.\n\nProps\n\nid::String: HTML id for the button (default: \"theme-toggle\")\nvariant::Union{Symbol,String}: Button variant style (:default, :ghost, :outline) (default: :default)\nsize::Union{Symbol,String}: Button size (:sm, :md, :lg) (default: :md)\nshow_label::Bool: Whether to show text label alongside icon (default: true)\nclass::String: Additional CSS classes (optional)\n\nExample\n\n@ThemeToggle {}\n@ThemeToggle {variant = :ghost, size = :sm, show_label = false}\n\nRequirements\n\nThis component requires Alpine.js to be included in your page:\n\n<script defer src=\"https://cdn.jsdelivr.net/npm/alpinejs@3/dist/cdn.min.js\"></script>\n\nBrowser Compatibility: Modern browsers with ES6 support   Dependencies: Tailwind CSS for styling classes\n\nNote: JavaScript assets are automatically loaded via @__once__ for optimal performance.\n\nAccessibility\n\nThis component implements comprehensive accessibility for theme switching:\n\nARIA Patterns:\n\nUses semantic <button> element with descriptive title attribute\nButton text dynamically updates to reflect current theme state\nScreen readers announce theme changes when selection occurs\nMaintains button semantics while providing theme functionality\n\nKeyboard Navigation:\n\nEnter/Space: Cycles through theme options (light → dark → system)\nTab: Moves focus to theme toggle button\nShift+Tab: Moves focus to previous element\nAll theme switching is accessible via keyboard\n\nScreen Reader Support:\n\nCurrent theme state is announced through button text\nTheme changes are communicated when they occur\nButton purpose is clear through descriptive labeling\nIcon-only mode includes screen reader text for context\n\nVisual Design:\n\nFocus indicators are clearly visible with high contrast\nButton variants maintain sufficient color contrast (4.5:1 minimum)\nTheme icons provide visual feedback for current state\nHover and active states give clear interactive feedback\n\nTheme Persistence:\n\nTheme preference is stored in localStorage for consistency\nSystem theme preference is respected and monitored\nTheme changes are applied immediately for visual feedback\nWorks across browser sessions and page refreshes\n\nUsage Guidelines:\n\nPlace theme toggle in consistent, discoverable location\nConsider using icon + text for maximum clarity\nTest with all three theme states (light, dark, system)\nEnsure theme toggle itself is visible in all themes\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.Timeline-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.Timeline","text":"@Timeline\n\nA container component for displaying chronological events in an elegant timeline layout. Timelines are powerful visualization tools for presenting sequences of events, project milestones, or historical progressions in an intuitive, linear format. This component provides the structural foundation for timeline displays, supporting both vertical and horizontal orientations with optional connecting lines between events. It handles the complex positioning and alignment requirements while maintaining a clean, scannable interface that helps users understand temporal relationships and progress at a glance.\n\nProps\n\nvariant::Union{Symbol,String}: Timeline variant (:vertical, :horizontal) (default: :vertical)\nconnector::Bool: Whether to show connecting lines between items (default: true)\nalternate::Bool: Whether to alternate items on left/right sides (horizontal only) (default: false)\n\nSlots\n\nTimeline items - should contain @TimelineItem components\n\nExample\n\n@Timeline begin\n    @TimelineItem {icon = \"1\", icon_bg = \"bg-blue-500\"} begin\n        @TimelineContent {title = \"Project Started\", subtitle = \"January 2024\"} begin\n            @Text \"Initial planning and setup phase.\"\n        end\n    end\n    @TimelineItem {icon = \"2\", icon_bg = \"bg-green-500\"} begin\n        @TimelineContent {title = \"Development Phase\", subtitle = \"March 2024\"} begin\n            @Text \"Core features implemented.\"\n        end\n    end\n    @TimelineItem {icon = \"✓\", icon_bg = \"bg-purple-500\", last = true} begin\n        @TimelineContent {title = \"Launch\", subtitle = \"June 2024\"} begin\n            @Text \"Product successfully launched!\"\n        end\n    end\nend\n\nSee also\n\nTimelineItem - Individual timeline entries\nTimelineContent - Content wrapper for timeline items\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.TimelineContent-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.TimelineContent","text":"@TimelineContent\n\nA content wrapper for timeline items that provides consistent styling and structure for the information associated with each timeline event. This component ensures that timeline content maintains visual coherence whether displaying simple text updates or rich media content. It offers optional card styling for enhanced visual separation, built-in support for titles and timestamps, and flexible content areas that can accommodate various types of information. The wrapper handles responsive behavior and maintains proper alignment with timeline markers, creating a polished presentation that guides users through chronological narratives.\n\nProps\n\ntitle::Union{String,Nothing}: Title text (optional)\nsubtitle::Union{String,Nothing}: Subtitle or timestamp (optional)\ncard::Bool: Whether to wrap content in a card (default: true)\n\nSlots\n\nContent body - the main content of the timeline entry\n\nExample\n\n@TimelineContent {title = \"Milestone Achieved\", subtitle = \"Q2 2024\"} begin\n    @Text \"Successfully completed the first phase of the project.\"\n    @Stack {direction = :horizontal, gap = :sm} begin\n        @Badge {variant = :success} \"On Time\"\n        @Badge {variant = :primary} \"Under Budget\"\n    end\nend\n\n# Without card styling\n@TimelineContent {card = false} begin\n    @Text {variant = :small} \"Quick update: Everything is on track.\"\nend\n\nSee also\n\nTimeline - Parent timeline container\nTimelineItem - Timeline entry wrapper\nCard - Related card styling\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.TimelineItem-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.TimelineItem","text":"@TimelineItem\n\nAn individual event or milestone in a timeline that represents a specific point in time or achievement. Timeline items are the building blocks of any timeline display, each marking a significant moment with optional visual indicators and connecting lines to adjacent events. This component provides flexible customization through icon markers with customizable backgrounds, automatic connector lines for visual continuity, and proper spacing to maintain timeline flow. Items can represent anything from project phases to historical events, with the visual design emphasizing both the discrete nature of each event and its relationship to the whole sequence.\n\nProps\n\nicon::Union{String,Nothing}: Content for the timeline marker (optional)\nicon_bg::Union{String,Nothing}: Background color class for the icon (default: \"bg-blue-500\")\nconnector::Bool: Whether to show connector line to next item (default: true)\nlast::Bool: Whether this is the last item (disables connector) (default: false)\n\nSlots\n\nTimeline item content - typically contains @TimelineContent component\n\nExample\n\n@TimelineItem {icon = \"🚀\"} begin\n    @TimelineContent {title = \"Launch Day\"} begin\n        @Text \"We're going live!\"\n    end\nend\n\nSee also\n\nTimeline - Parent timeline container\nTimelineContent - Content wrapper component\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.Toggle-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.Toggle","text":"@Toggle\n\nA versatile toggle component that provides both switch and button variants for binary on/off states. The switch variant offers an iOS-style sliding toggle for settings and preferences, while the button variant creates toggleable buttons perfect for toolbars and multi-select interfaces. Both variants support keyboard navigation, proper ARIA attributes, and can include icons to enhance visual communication.\n\nProps\n\nvariant::Union{Symbol,String}: Toggle variant (:switch, :button) (default: :switch)\nsize::Union{Symbol,String}: Component size (:xs, :sm, :base, :lg, :xl) (default: :base)\ncolor::Union{Symbol,String}: Color scheme (:primary, :success, :danger) (default: :primary)\nlabel::Union{String,Nothing}: Label text for switch variant (optional)\nname::Union{String,Nothing}: Form field name (optional)\nvalue::Union{String,Nothing}: Form field value (optional)\nchecked::Bool: Whether toggle is checked/active (default: false)\ndisabled::Bool: Whether toggle is disabled (default: false)\nrequired::Bool: Whether field is required (default: false)\nid::Union{String,Nothing}: Component ID (optional)\naria_describedby::Union{String,Nothing}: ID of describing element (optional)\nshow_icons::Bool: Show icon slots for switch variant (default: false)\n\nSlots\n\nFor switch variant with show_icons = true:\n\nicon_on: Icon content to display when toggle is on\nicon_off: Icon content to display when toggle is off\n\nFor button variant:\n\nDefault slot: Button content (text, icons, or both)\n\nExamples\n\n# Basic switch toggle\n@Toggle {label = \"Enable notifications\", name = \"notifications\"}\n\n# Switch with custom icons\n@Toggle {label = \"Theme\", show_icons = true, name = \"theme\"} begin\n    icon_on := @Icon {name = \"moon\", size = :xs}\n    icon_off := @Icon {name = \"sun\", size = :xs}\nend\n\n# Button toggle for toolbar\n@Toggle {variant = :button, name = \"bold\"} begin\n    @strong \"B\"\nend\n\n# Icon button toggle\n@Toggle {variant = :button, name = \"favorite\", color = :danger} begin\n    @Icon {name = \"heart\"}\nend\n\nAccessibility\n\nThis component implements comprehensive accessibility for toggle controls:\n\nARIA Patterns:\n\nSwitch variant uses role=\"switch\" with aria-checked state\nButton variant uses aria-pressed to indicate toggle state\nLabels are properly associated with controls\nDisabled state is communicated through aria-disabled\n\nKeyboard Navigation:\n\nSpace/Enter: Toggles the state\nTab: Moves focus to/from the toggle\nAll keyboard interactions work identically to native controls\n\nScreen Reader Support:\n\nState changes are announced immediately\nLabels provide context for the toggle purpose\nIcon-only button toggles should include descriptive text or aria-label\n\nVisual Design:\n\nFocus indicators are clearly visible with appropriate contrast\nToggle states are communicated through multiple visual cues\nColor is not the sole indicator of state\nSmooth transitions provide visual feedback for interactions\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.Tooltip-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.Tooltip","text":"@Tooltip\n\nA simple tooltip component that displays contextual information on hover or focus with intelligent positioning. Features customizable delays, smooth animations, and automatic positioning using Alpine Anchor with dark and light variants.\n\nProps\n\ntext::String: The tooltip text to display (required)\nplacement::Union{Symbol,String}: Tooltip placement (:top, :bottom, :left, :right) (default: :top)\ndelay::Int: Show delay in milliseconds (default: 500)\nhide_delay::Int: Hide delay in milliseconds (default: 0)\noffset::Int: Distance from trigger in pixels (default: 8)\nvariant::Union{Symbol,String}: Visual style (:dark, :light) (default: :dark)\nsize::Union{Symbol,String}: Text size (:sm, :base) (default: :sm)\nmax_width::String: Maximum width of tooltip (default: \"250px\")\nclass::String: Additional CSS classes (optional)\n\nSlots\n\nTrigger element - the element that shows the tooltip on hover\n\nExample\n\n# Icon with tooltip\n@Tooltip {text = \"Delete this item\"} begin\n    @Button {variant = :danger, size = :sm} begin\n        @Icon {name = \"trash\"}\n    end\nend\n\n# Text with tooltip\n@Tooltip {text = \"Click to learn more about this feature\"} begin\n    @Link {href = \"/help\"} \"What's this?\"\nend\n\n# Badge with light tooltip\n@Tooltip {text = \"Premium features included\", variant = :light} begin\n    @Badge {variant = :gradient} \"PRO\"\nend\n\nRequirements\n\nThis component requires Alpine.js and Alpine Anchor for intelligent positioning:\n\n<script defer src=\"https://cdn.jsdelivr.net/npm/@alpinejs/anchor@latest/dist/cdn.min.js\"></script>\n<script defer src=\"https://cdn.jsdelivr.net/npm/alpinejs@3/dist/cdn.min.js\"></script>\n\nBrowser Compatibility: Modern browsers with ES6 support   Dependencies: Tailwind CSS for styling classes\n\nNote: JavaScript assets are automatically loaded via @__once__ for optimal performance.\n\nAccessibility\n\nARIA: Uses role=\"tooltip\" with aria-describedby relationship to trigger element.\n\nKeyboard: Escape dismisses, Tab moves focus away. Appears on both hover and focus events.\n\nFocus Management: Non-interactive tooltip keeps focus on trigger element.\n\nSee also\n\nTooltipWrapper - For rich tooltip content\nAlert - For persistent help messages\nBadge - Common tooltip trigger\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.TooltipContent-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.TooltipContent","text":"@TooltipContent\n\nThe content component within TooltipWrapper that defines tooltip popup content with rich formatting support. Can contain any HTML content including headings, lists, images, or interactive elements with consistent styling and smooth transitions.\n\nProps\n\nvariant::Union{Symbol,String}: Visual style (:dark, :light) (default: :dark)\narrow::Bool: Show arrow pointing to trigger (default: true)\nmax_width::String: Maximum width (default: \"300px\")\nclass::String: Additional CSS classes (optional)\nattrs...: Additional attributes\n\nSlots\n\nTooltip content - can contain any components or rich formatting\n\nExample\n\n@TooltipContent {variant = :light} begin\n    @Stack {gap = :sm} begin\n        @Heading {level = 5} \"Tooltip Title\"\n        @Text {size = :sm} \"This tooltip can contain any content.\"\n        @Stack {direction = :horizontal, gap = :xs} begin\n            @Badge \"Tag 1\"\n            @Badge \"Tag 2\"\n        end\n    end\nend\n\nAccessibility\n\nARIA: Uses role=\"tooltip\" while preserving rich content structure for assistive technology.\n\nKeyboard: Interactive content is accessible with Tab navigation, Escape dismisses.\n\nGuidelines: Use headings for structure, ensure proper labels, maintain color contrast.\n\nSee also\n\nTooltipWrapper - Parent wrapper component\nTooltipTrigger - Trigger component\nCard - For similar content styling\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.TooltipTrigger-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.TooltipTrigger","text":"@TooltipTrigger\n\nThe trigger element within TooltipWrapper that activates tooltip display. Acts as a transparent wrapper for any element, handling event bindings and ARIA attributes while maintaining original functionality.\n\nProps\n\nclass::String: Additional CSS classes (optional)\nattrs...: Additional attributes\n\nSlots\n\nTrigger element - any element that should show the tooltip when interacted with\n\nExample\n\n@TooltipTrigger begin\n    @Button {variant = :ghost} \"Hover me\"\nend\n\nAccessibility\n\nARIA: Maintains semantic relationship with tooltip while preserving original element accessibility.\n\nKeyboard: Enter/Space shows tooltip, Escape dismisses, Tab for normal behavior.\n\nGuidelines: Works with any trigger element type while maintaining original functionality.\n\nSee also\n\nTooltipWrapper - Parent wrapper component\nTooltipContent - Tooltip content component\n\n\n\n\n\n","category":"method"},{"location":"api-library/#HypertextTemplates.Library.TooltipWrapper-Tuple{}","page":"Library Components","title":"HypertextTemplates.Library.TooltipWrapper","text":"@TooltipWrapper\n\nA wrapper component for rich, interactive tooltips with custom content. Supports different trigger types (hover, click, focus) and interactive tooltip content with proper positioning and accessibility.\n\nProps\n\nplacement::Union{Symbol,String}: Tooltip placement (default: :top)\ndelay::Int: Show delay in milliseconds (default: 500)\nhide_delay::Int: Hide delay in milliseconds (default: 0)\noffset::Int: Distance from trigger in pixels (default: 8)\ntrigger::Union{Symbol,String}: Trigger type (:hover, :click, :focus) (default: :hover)\ninteractive::Bool: Keep open when hovering tooltip content (default: false)\n\nSlots\n\nShould contain exactly one @TooltipTrigger and one @TooltipContent component\n\nExample\n\n# Interactive tooltip with rich content\n@TooltipWrapper {interactive = true} begin\n    @TooltipTrigger begin\n        @Badge \"PRO\"\n    end\n    @TooltipContent {variant = :light} begin\n        @Heading {level = 4, size = :sm} \"Pro Feature\"\n        @Text {size = :sm} \"Upgrade to access advanced features\"\n        @Button {size = :sm, variant = :primary} \"Upgrade Now\"\n    end\nend\n\n# Click-triggered tooltip\n@TooltipWrapper {trigger = :click} begin\n    @TooltipTrigger begin\n        @Icon {name = \"info-circle\"}\n    end\n    @TooltipContent begin\n        @Text \"Click anywhere to close\"\n    end\nend\n\nRequirements\n\nThis component requires Alpine.js and Alpine Anchor for intelligent positioning:\n\n<script defer src=\"https://cdn.jsdelivr.net/npm/@alpinejs/anchor@latest/dist/cdn.min.js\"></script>\n<script defer src=\"https://cdn.jsdelivr.net/npm/alpinejs@3/dist/cdn.min.js\"></script>\n\nBrowser Compatibility: Modern browsers with ES6 support   Dependencies: Tailwind CSS for styling classes\n\nNote: JavaScript assets are automatically loaded via @__once__ for optimal performance.\n\nAccessibility\n\nARIA & Focus: Proper tooltip roles and ARIA relationships. Interactive tooltips support keyboard navigation with Escape to dismiss.\n\nContent: Rich content (headings, links, buttons) is announced and navigable by screen readers.\n\nGuidelines: Use interactive tooltips sparingly; ensure content is available via other means for mobile users.\n\nSee also\n\nTooltip - Simple text tooltips\nTooltipTrigger - Trigger component\nTooltipContent - Content component\nDropdownMenu - Alternative for complex interactions\n\n\n\n\n\n","category":"method"},{"location":"api-public/#Public-API","page":"Public API","title":"Public API","text":"","category":"section"},{"location":"api-public/","page":"Public API","title":"Public API","text":"The public API consists of all exported functions, macros, and types that are intended for end users. These APIs are stable and follow semantic versioning - breaking changes will only occur in major version updates. The public API includes the core @render macro, component definition utilities like @component and @deftag, security features like SafeString, and all the HTML element macros available through HypertextTemplates.Elements. These are the building blocks you'll use to create templates and components in your applications.","category":"page"},{"location":"api-public/#HypertextTemplates.HypertextTemplates","page":"Public API","title":"HypertextTemplates.HypertextTemplates","text":"HypertextTemplates\n\nA hypertext templating DSL for Julia that allows writing HTML using native Julia syntax.\n\nHypertextTemplates provides a macro-based DSL where all HTML elements are exposed as macros (e.g., @div, @p). It uses a special {} syntax for attributes that mimics NamedTuples, allowing natural integration of Julia control flow directly in templates.\n\nKey Features\n\nZero-allocation rendering: Direct IO streaming without intermediate DOM\nComponent system: Reusable components with props and slots\nAuto-escaping: Automatic HTML escaping for security (bypass with SafeString)\nStreaming support: Efficient chunked rendering for large documents\nMarkdown integration: Render Markdown files as components (requires CommonMark.jl)\n\nBasic Usage\n\nusing HypertextTemplates, HypertextTemplates.Elements\n\n# Simple rendering\n@render @div {class = \"greeting\"} \"Hello, World!\"\n\n# Components with slots\n@component function card(; title)\n    @div {class = \"card\"} begin\n        @h2 $title\n        @div {class = \"body\"} @__slot__\n    end\nend\n\nMain Exports\n\n@render: Render templates to strings or IO\n@component: Define reusable components\n@deftag: Create macro shortcuts for components\nSafeString: Mark content as pre-escaped HTML\nStreamingRender: Iterator for chunked rendering\n@<: Dynamic component/element rendering\n\nSee the documentation for detailed examples and advanced features.\n\n\n\n\n\n","category":"module"},{"location":"api-public/#HypertextTemplates.SafeString","page":"Public API","title":"HypertextTemplates.SafeString","text":"SafeString(str::String)\n\nA string wrapper that bypasses automatic HTML escaping.\n\nBy default, all string content is HTML-escaped to prevent XSS attacks. SafeString marks content as pre-escaped or trusted HTML that should be rendered as-is.\n\nwarning: Security Risk\nOnly use SafeString with content you trust completely. Never wrap user input directly with SafeString without proper sanitization. This can lead to XSS vulnerabilities.\n\nArguments\n\nstr::String: The HTML string to mark as safe\n\nExamples\n\njulia> using HypertextTemplates, HypertextTemplates.Elements\n\njulia> # Normal strings are escaped\n       @render @div \"<b>Bold</b>\"\n\"<div>&lt;b&gt;Bold&lt;/b&gt;</div>\"\n\njulia> # SafeString content is not escaped\n       @render @div $(SafeString(\"<b>Bold</b>\"))\n\"<div><b>Bold</b></div>\"\n\njulia> # Common use case: pre-rendered markdown\n       markdown_html = \"<p>Already <em>escaped</em> content</p>\";\n\njulia> @render @article $(SafeString(markdown_html))\n\"<article><p>Already <em>escaped</em> content</p></article>\"\n\nSecurity best practices\n\n# GOOD: Content from trusted sources\nhtml = markdown_to_html(user_content)  # Markdown processor escapes content\n@render @div SafeString(html)\n\n# GOOD: Your own HTML generation\nsafe_html = \"<span class=\"highlight\">Important</span>\"\n@render @div SafeString(safe_html)\n\n# BAD: Never do this with user input!\nuser_input = get_user_input()\n@render @div SafeString(user_input)  # DANGER: XSS vulnerability!\n\nSee also: @render, escape_html, @esc_str\n\n\n\n\n\n","category":"type"},{"location":"api-public/#HypertextTemplates.StreamingRender","page":"Public API","title":"HypertextTemplates.StreamingRender","text":"StreamingRender(func; kwargs...)\nStreamingRender(; kwargs...) do io\n    # render content\nend\n\nCreate an iterator for streaming template rendering.\n\nStreamingRender enables efficient rendering of large templates by yielding chunks of output as they become available. This is particularly useful for:\n\nHTTP streaming responses\nLarge documents that would consume too much memory if rendered at once\nProgressive rendering where content appears as it's generated\n\nThe function uses intelligent micro-batching: large writes (≥64 bytes) are sent immediately for low latency, while smaller writes are batched for efficiency.\n\nArguments\n\nfunc: Function that takes an io argument to pass to @render\n\nKeywords\n\nbuffer_size::Int=32: Number of chunks the channel can buffer before blocking\nchunk_size::Int=4096: Legacy parameter (kept for compatibility, no longer used)\nimmediate_threshold::Int=64: Bytes above which writes bypass buffering for low latency\n\nExamples\n\njulia> using HypertextTemplates, HypertextTemplates.Elements\n\njulia> # Collect all chunks (for demonstration)\n       chunks = String[];\n\njulia> for chunk in StreamingRender() do io\n           @render io @div begin\n               @h1 \"Header\"\n               @p \"Content\"\n           end\n       end\n           push!(chunks, String(chunk))\n       end\n\njulia> join(chunks)\n\"<div><h1>Header</h1><p>Content</p></div>\"\n\nHTTP streaming example\n\nusing HTTP\nusing HypertextTemplates, HypertextTemplates.Elements\n\nfunction handle_request(req)\n    HTTP.Response(200, [\"Content-Type\" => \"text/html\"]) do io\n        for chunk in StreamingRender() do render_io\n            @render render_io @html begin\n                @head @title \"Streaming Page\"\n                @body begin\n                    @h1 \"Live Data\"\n                    for i in 1:1000\n                        @div \"Item $i\"\n                    end\n                end\n            end\n        end\n            write(io, chunk)\n        end\n    end\nend\n\nProgressive rendering\n\n# Stream data as it becomes available\nfor chunk in StreamingRender() do io\n    @render io @div begin\n        @h1 \"Results\"\n        for result in fetch_results_lazily()\n            @article begin\n                @h2 result.title\n                @p result.content\n            end\n        end\n    end\nend\n    # Send chunk to client immediately\n    write(client_connection, chunk)\n    flush(client_connection)\nend\n\nSee also: @render, MicroBatchWriter\n\n\n\n\n\n","category":"type"},{"location":"api-public/#HypertextTemplates.@<-Tuple{Any, Vararg{Any}}","page":"Public API","title":"HypertextTemplates.@<","text":"@<component_or_element\n@<component_or_element children...\n@<component_or_element {props...}\n@<component_or_element {props...} children...\n\nDynamically render a component or element from a variable.\n\nThe @< macro enables dynamic component selection, where the component or element to render is determined at runtime. This is useful for polymorphic rendering, component mappings, and conditional component selection.\n\nArguments\n\ncomponent_or_element: A variable containing a component function or element\nprops...: Optional properties in {} syntax\nchildren...: Optional child content\n\nExamples\n\njulia> using HypertextTemplates, HypertextTemplates.Elements\n\njulia> # Dynamic element selection\n       tag = Elements.div\n       @render @<tag {class = \"dynamic\"} \"Content\"\n\"<div class=\\\"dynamic\\\">Content</div>\"\n\njulia> # Change element at runtime\n       tag = span\n       @render @<tag {class = \"dynamic\"} \"Content\"\n\"<span class=\\\"dynamic\\\">Content</span>\"\n\nDynamic component selection\n\njulia> using HypertextTemplates, HypertextTemplates.Elements\n\njulia> # Define components\n       @component function info_box(; message)\n           @div {class = \"info\"} @p $message\n       end;\n\njulia> @component function error_box(; message)\n           @div {class = \"error\"} @strong $message\n       end;\n\njulia> # Select component based on condition\n       function render_message(type, message)\n           component = type == :error ? error_box : info_box\n           @render @<component {message}\n       end\nrender_message (generic function with 1 method)\n\njulia> render_message(:info, \"All good!\")\n\"<div class=\\\"info\\\"><p>All good!</p></div>\"\n\njulia> render_message(:error, \"Something went wrong!\")\n\"<div class=\\\"error\\\"><strong>Something went wrong!</strong></div>\"\n\nWith slots\n\njulia> using HypertextTemplates, HypertextTemplates.Elements\n\njulia> @component function wrapper(; variant = \"default\")\n           @div {class = \"wrapper-$variant\"} @__slot__\n       end;\n\njulia> # Dynamic wrapper\n       w = wrapper\n       @render @<w {variant = \"special\"} begin\n           @h1 \"Wrapped content\"\n       end\n\"<div class=\\\"wrapper-special\\\"><h1>Wrapped content</h1></div>\"\n\nSee also: @component, @deftag\n\n\n\n\n\n","category":"macro"},{"location":"api-public/#HypertextTemplates.@__once__-Tuple{Any}","page":"Public API","title":"HypertextTemplates.@__once__","text":"@__once__ begin\n    # content to render once\nend\n\nRender content only once per @render call.\n\nThe @__once__ macro ensures that its content is rendered only once, even if the containing component is used multiple times within the same render tree. This is essential for including CSS, JavaScript, or other resources that should not be duplicated.\n\nCommon use cases\n\nCSS styles that should appear once\nJavaScript libraries and initialization code\nMeta tags or link elements in components\nAny content that would cause issues if duplicated\n\nExamples\n\njulia> using HypertextTemplates, HypertextTemplates.Elements\n\njulia> @component function button_with_styles(; text, variant = \"primary\")\n           @__once__ begin\n               @style \"\"\"\n               .btn { padding: 10px; border: none; cursor: pointer; }\n               .btn-primary { background: blue; color: white; }\n               .btn-danger { background: red; color: white; }\n               \"\"\"\n           end\n           @button {class = \"btn btn-$variant\"} $text\n       end;\n\njulia> @deftag macro button_with_styles end\n@button_with_styles (macro with 1 method)\n\nJavaScript dependencies\n\njulia> using HypertextTemplates, HypertextTemplates.Elements\n\njulia> @component function chart(; data)\n           @__once__ begin\n               @script {src = \"https://cdn.plot.ly/plotly-latest.min.js\"}\n           end\n           @div {id = \"chart-$(hash(data))\"} begin\n               @script \"\"\"\n               Plotly.newPlot('chart-$(hash(data))', $(data));\n               \"\"\"\n           end\n       end;\n\njulia> @deftag macro chart end\n@chart (macro with 1 method)\n\nScope behavior\n\nEach @render call maintains its own set of rendered once-blocks:\n\njulia> using HypertextTemplates, HypertextTemplates.Elements\n\njulia> @component function with_header()\n           @__once__ @h1 \"Page Header\"\n           @p \"Content\"\n       end;\n\njulia> @deftag macro with_header end\n@with_header (macro with 1 method)\n\njulia> # First render includes the header\n       @render @with_header\n\"<h1>Page Header</h1><p>Content</p>\"\n\njulia> # Second render also includes it (different @render call)\n       @render @with_header\n\"<h1>Page Header</h1><p>Content</p>\"\n\nSee also: @component, @render\n\n\n\n\n\n","category":"macro"},{"location":"api-public/#HypertextTemplates.@__slot__","page":"Public API","title":"HypertextTemplates.@__slot__","text":"@__slot__ [name]\n\nDefine a content slot within a component.\n\nSlots enable content projection - allowing parent components to pass content into specific locations within child components. This is essential for creating flexible, composable components.\n\nArguments\n\nname: Optional slot name. If omitted, creates the default slot.\n\nDefault slot\n\nThe default slot (no name) receives all content passed to the component that isn't assigned to a named slot.\n\njulia> using HypertextTemplates, HypertextTemplates.Elements\n\njulia> @component function card(; title)\n           @div {class = \"card\"} begin\n               @h2 $title\n               @div {class = \"content\"} @__slot__\n           end\n       end;\n\njulia> @deftag macro card end\n@card (macro with 1 method)\n\njulia> @render @card {title = \"Welcome\"} begin\n           @p \"This goes into the default slot\"\n           @p \"So does this\"\n       end\n\"<div class=\\\"card\\\"><h2>Welcome</h2><div class=\\\"content\\\"><p>This goes into the default slot</p><p>So does this</p></div></div>\"\n\nNamed slots\n\nNamed slots receive only content explicitly assigned to them using name := content syntax.\n\njulia> using HypertextTemplates, HypertextTemplates.Elements\n\njulia> @component function modal(; title = \"\")\n           @div {class = \"modal\"} begin\n               @header begin\n                   @h2 $title\n                   @__slot__ header_actions\n               end\n               @div {class = \"body\"} @__slot__\n               @footer @__slot__ footer\n           end\n       end;\n\njulia> @deftag macro modal end\n@modal (macro with 1 method)\n\njulia> @render @modal {title = \"Confirm\"} begin\n           # Default slot content\n           @p \"Are you sure?\"\n           # Named slot content\n           header_actions := @button {class = \"close\"} \"×\"\n           footer := begin\n               @button \"Cancel\"\n               @button {class = \"primary\"} \"OK\"\n           end\n       end\n\"<div class=\\\"modal\\\"><header><h2>Confirm</h2><button class=\\\"close\\\">×</button></header><div class=\\\"body\\\"><p>Are you sure?</p></div><footer><button>Cancel</button><button class=\\\"primary\\\">OK</button></footer></div>\"\n\nSee also: @component\n\n\n\n\n\n","category":"macro"},{"location":"api-public/#HypertextTemplates.@cm_component-Tuple{Any}","page":"Public API","title":"HypertextTemplates.@cm_component","text":"@cm_component component_name(; props...) = \"file_name.md\"\n\nCreate a component from a Markdown file.\n\nThis macro creates a component that renders Markdown content from a file. The Markdown is parsed using CommonMark.jl and can include interpolated values using $variable syntax.\n\nnote: Note\nThis feature requires CommonMark.jl to be installed as it's provided via Julia's package extension mechanism.\n\nArguments\n\ncomponent_name: Name for the component function\nprops...: Optional keyword arguments that can be interpolated in the Markdown\nfile_name.md: Path to the Markdown file (relative to the current file)\n\nFeatures\n\nInterpolation: Use $prop_name in Markdown to insert prop values\nLive reload: With Revise.jl, changes to the Markdown file auto-update\nCompile-time parsing: Without Revise.jl, Markdown is parsed at compile time for performance\n\nExamples\n\nBasic usage\n\n# In article.md:\n# # $title\n# \n# By $author on $date\n# \n# $content\n\n# In your Julia code:\nusing HypertextTemplates, HypertextTemplates.Elements\nusing CommonMark\n\n@cm_component article(; title, author, date, content) = \"article.md\"\n@deftag macro article end\n\n@render @article {\n    title = \"Hello World\",\n    author = \"Jane Doe\",\n    date = \"2024-01-15\",\n    content = \"This is my first post!\"\n}\n\nDirectory structure\n\n# components/header.md contains:\n# # $site_name\n# \n# *$tagline*\n\n# In components/components.jl:\n@cm_component header(; site_name, tagline = \"Welcome\") = \"header.md\"\n\n# Path is relative to the file containing @cm_component\n\nWith default values\n\n@cm_component footer(; copyright_year = 2024, company = \"Acme Corp\") = \"footer.md\"\n@deftag macro footer end\n\n# Uses defaults\n@render @footer\n\n# Override defaults\n@render @footer {copyright_year = 2025}\n\nComplex content interpolation\n\n# In template.md:\n# # Product: $name\n# \n# Price: $$$price\n# \n# $description\n\n@cm_component product_card(; name, price, description) = \"template.md\"\n@deftag macro product_card end\n\n@render @product_card {\n    name = \"Widget\",\n    price = 19.99,\n    description = \"A **fantastic** widget with _many_ features!\"\n}\n\ntip: Development workflow\nWhen using Revise.jl, you can edit the Markdown file and see changes immediately without restarting Julia or redefining the component.\n\nSee also: @component, SafeString\n\n\n\n\n\n","category":"macro"},{"location":"api-public/#HypertextTemplates.@component-Tuple{Any}","page":"Public API","title":"HypertextTemplates.@component","text":"@component function component_name(; properties...)\n    # template body\nend\n\nDefine a reusable component function.\n\nComponents are functions that return template content and can accept properties as keyword arguments. They enable code reuse and composition in templates.\n\nAfter defining a component, use @deftag to create a convenient macro for using it like a regular HTML element.\n\nArguments\n\ncomponent_name: The name of the component function\nproperties...: Keyword arguments that become the component's props\n\nExamples\n\njulia> using HypertextTemplates, HypertextTemplates.Elements\n\njulia> @component function greeting(; name = \"World\")\n           @h1 \"Hello, \" $name \"!\"\n       end\ngreeting (generic function with 1 method)\n\njulia> @deftag macro greeting end\n@greeting (macro with 1 method)\n\njulia> @render @greeting {name = \"Julia\"}\n\"<h1>Hello, Julia!</h1>\"\n\njulia> @render @greeting  # Uses default value\n\"<h1>Hello, World!</h1>\"\n\nComponents with slots\n\njulia> using HypertextTemplates, HypertextTemplates.Elements\n\njulia> @component function card(; title)\n           @div {class = \"card\"} begin\n               @h2 $title\n               @div {class = \"body\"} @__slot__\n           end\n       end\ncard (generic function with 1 method)\n\njulia> @deftag macro card end\n@card (macro with 1 method)\n\njulia> @render @card {title = \"Info\"} begin\n           @p \"Card content goes here\"\n       end\n\"<div class=\\\"card\\\"><h2>Info</h2><div class=\\\"body\\\"><p>Card content goes here</p></div></div>\"\n\nTyped props for safety\n\njulia> using HypertextTemplates, HypertextTemplates.Elements\n\njulia> @component function price(; amount::Number, currency::String = \"USD\")\n           @span {class = \"price\"} $currency \" \" $(round(amount, digits=2))\n       end\nprice (generic function with 1 method)\n\njulia> @deftag macro price end\n@price (macro with 1 method)\n\njulia> @render @price {amount = 19.999}\n\"<span class=\\\"price\\\">USD 20.0</span>\"\n\nSee also: @deftag, @__slot__, @render\n\n\n\n\n\n","category":"macro"},{"location":"api-public/#HypertextTemplates.@context-Tuple{Any, Any}","page":"Public API","title":"HypertextTemplates.@context","text":"@context {key = value, ...} body\n@context {key, ...} body\n\nSet context values that will be available to all child components.\n\nThe @context macro allows passing data through the component tree without explicit prop drilling. It uses Julia's IOContext mechanism to store key-value pairs that can be retrieved by child components using @get_context.\n\nSupports both explicit key = value syntax and shorthand key syntax (which expands to key = key).\n\nArguments\n\nKey-value pairs or shorthand symbols in {} syntax specifying the context data\nbody: The content that will have access to the context\n\nExamples\n\njulia> using HypertextTemplates, HypertextTemplates.Elements\n\njulia> @component function themed_button(; text = \"Click me\")\n           theme = @get_context(:theme, \"light\")\n           @button {class = \"btn-$theme\"} $text\n       end;\n\njulia> @deftag macro themed_button end\n@themed_button (macro with 1 method)\n\njulia> @render @context {theme = \"dark\"} begin\n           @themed_button {text = \"Dark Button\"}\n       end\n\"<button class=\\\"btn-dark\\\">Dark Button</button>\"\n\njulia> # Shorthand syntax\n       theme = \"blue\"\n       @render @context {theme} begin  # Same as {theme = theme}\n           @themed_button\n       end\n\"<button class=\\\"btn-blue\\\">Click me</button>\"\n\njulia> # Mixed syntax\n       user = \"alice\"\n       @render @context {user, theme = \"dark\"} begin\n           @div begin\n               @text \"User: \" @get_context(:user)\n               @themed_button\n           end\n       end\n\"<div>User: alice<button class=\\\"btn-dark\\\">Click me</button></div>\"\n\nSee also: @get_context, @component\n\n\n\n\n\n","category":"macro"},{"location":"api-public/#HypertextTemplates.@deftag-Tuple{Any}","page":"Public API","title":"HypertextTemplates.@deftag","text":"@deftag macro name end\n@deftag name\n\nCreate a macro shortcut for using a component or element.\n\nAfter defining a component with @component, use @deftag to create a convenient macro that allows using the component like an HTML element.\n\nThe macro name end syntax is preferred as it allows the LSP to correctly track the macro definition location.\n\nArguments\n\nname: Symbol name of the component/element to create a macro for\n\nExamples\n\njulia> using HypertextTemplates, HypertextTemplates.Elements\n\njulia> # Define a component\n       @component function alert(; type = \"info\", dismissible = false)\n           @div {class = \"alert alert-$type\"} begin\n               @__slot__\n               if dismissible\n                   @button {class = \"close\"} \"×\"\n               end\n           end\n       end\nalert (generic function with 1 method)\n\njulia> # Create macro (preferred syntax for LSP support)\n       @deftag macro alert end\n@alert (macro with 1 method)\n\njulia> # Now use like an HTML element\n       @render @alert {type = \"warning\"} \"Watch out!\"\n\"<div class=\\\"alert alert-warning\\\">Watch out!</div>\"\n\njulia> # Alternative syntax (works but no LSP support)\n       @component function message(; text)\n           @p {class = \"message\"} $text\n       end\nmessage (generic function with 1 method)\n\njulia> @deftag message\n@message (macro with 1 method)\n\njulia> @render @message {text = \"Hello\"}\n\"<p class=\\\"message\\\">Hello</p>\"\n\nCustom elements\n\njulia> using HypertextTemplates, HypertextTemplates.Elements\n\njulia> # Define a custom HTML element\n       @element \"my-widget\" my_widget\n\njulia> @deftag macro my_widget end\n@my_widget (macro with 1 method)\n\njulia> @render @my_widget {id = \"w1\"} \"Custom element\"\n\"<my-widget id=\\\"w1\\\">Custom element</my-widget>\"\n\nSee also: @component, @element, @<\n\n\n\n\n\n","category":"macro"},{"location":"api-public/#HypertextTemplates.@element","page":"Public API","title":"HypertextTemplates.@element","text":"@element html_tag_name [julia_name]\n\nDefine a custom HTML element.\n\nCreates a new HTML element that can be used with HypertextTemplates' macro syntax. This is useful for custom elements, web components, or HTML elements not included in the default set.\n\nArguments\n\nhtml_tag_name: The HTML tag name as it will appear in output (e.g., \"my-element\")\njulia_name: Optional Julia identifier name (defaults to html_tag_name with invalid characters replaced)\n\nExamples\n\njulia> using HypertextTemplates\n\njulia> # Define a custom element\n       @element \"my-widget\" my_widget\n\njulia> # Use with @deftag for macro syntax\n       @deftag macro my_widget end\n@my_widget (macro with 1 method)\n\njulia> @render @my_widget {id = \"w1\", class = \"custom\"} \"Widget content\"\n\"<my-widget id=\\\"w1\\\" class=\\\"custom\\\">Widget content</my-widget>\"\n\nWeb Components\n\njulia> using HypertextTemplates\n\njulia> # Define web component elements\n       @element \"ion-button\" ion_button\n\njulia> @element \"ion-icon\" ion_icon\n\njulia> @deftag macro ion_button end\n@ion_button (macro with 1 method)\n\njulia> @deftag macro ion_icon end\n@ion_icon (macro with 1 method)\n\njulia> @render @ion_button {color = \"primary\", expand = \"block\"} begin\n           @ion_icon {name = \"save-outline\", slot = \"start\"}\n           \"Save\"\n       end\n\"<ion-button color=\\\"primary\\\" expand=\\\"block\\\"><ion-icon name=\\\"save-outline\\\" slot=\\\"start\\\"></ion-icon>Save</ion-button>\"\n\nSee also: @deftag, @component\n\n\n\n\n\n","category":"macro"},{"location":"api-public/#HypertextTemplates.@esc_str-Tuple{Any}","page":"Public API","title":"HypertextTemplates.@esc_str","text":"@esc_str\n\nEscape HTML at compile time and return a SafeString.\n\nThis string macro performs HTML escaping during macro expansion rather than at runtime, providing better performance for static content that needs escaping.\n\nThe resulting SafeString will not be escaped again during rendering.\n\nSee also: SafeString, escape_html\n\n\n\n\n\n","category":"macro"},{"location":"api-public/#HypertextTemplates.@get_context-Tuple{Any}","page":"Public API","title":"HypertextTemplates.@get_context","text":"@get_context(key)\n@get_context(key, default)\n\nRetrieve a value from the current context.\n\nThe @get_context macro retrieves values that were set by parent @context blocks. It accesses the IOContext chain to find the requested key.\n\nArguments\n\nkey: The context key to retrieve (as a symbol or string)\ndefault: Optional default value if the key is not found\n\nExamples\n\njulia> using HypertextTemplates, HypertextTemplates.Elements\n\njulia> @component function user_greeting()\n           user = @get_context(:user, \"Guest\")\n           @p \"Hello, $(user)!\"\n       end;\n\njulia> @deftag macro user_greeting end\n@user_greeting (macro with 1 method)\n\njulia> @render @context {user = \"Alice\"} begin\n           @user_greeting\n       end\n\"<p>Hello, Alice!</p>\"\n\njulia> # Without context, uses default\n       @render @user_greeting\n\"<p>Hello, Guest!</p>\"\n\njulia> # Access multiple context values\n       @component function profile_card()\n           user = @get_context(:user, \"Unknown\")\n           theme = @get_context(:theme, \"light\")\n           role = @get_context(:role)  # No default\n           @div {class = \"profile-$theme\"} begin\n               @h3 $user\n               !isnothing(role) && @span {class = \"role\"} $role\n           end\n       end;\n\nSee also: @context, @component\n\n\n\n\n\n","category":"macro"},{"location":"api-public/#HypertextTemplates.@render-Tuple{Any, Any}","page":"Public API","title":"HypertextTemplates.@render","text":"@render [destination] dom\n\nRender a template to the given destination.\n\nIf no destination is provided, renders to a String and returns it. The destination  can be any IO object (e.g., stdout, IOBuffer, file handle) or a type like  String or Vector{UInt8}.\n\nThis macro is only needed for rendering the root of the DOM tree, not for the output of each individual component that is defined.\n\nArguments\n\ndestination: Optional IO object or type to render to (default: String)\ndom: The template expression to render\n\nExamples\n\njulia> using HypertextTemplates, HypertextTemplates.Elements\n\njulia> @render @div \"Hello, World!\"\n\"<div>Hello, World!</div>\"\n\njulia> buffer = IOBuffer();\n\njulia> @render buffer @span {class = \"greeting\"} \"Hi!\";\n\njulia> String(take!(buffer))\n\"<span class=\\\"greeting\\\">Hi!</span>\"\n\njulia> @render Vector{UInt8} @p \"Binary output\"\n20-element Vector{UInt8}:\n 0x3c\n 0x70\n 0x3e\n 0x42\n 0x69\n 0x6e\n 0x61\n 0x72\n 0x79\n 0x20\n 0x6f\n 0x75\n 0x74\n 0x70\n 0x75\n 0x74\n 0x3c\n 0x2f\n 0x70\n 0x3e\n\nRendering to files\n\nopen(\"output.html\", \"w\") do file\n    @render file @html begin\n        @head @title \"My Page\"\n        @body @h1 \"Hello!\"\n    end\nend\n\nSee also: StreamingRender, @component\n\n\n\n\n\n","category":"macro"},{"location":"api-public/#HypertextTemplates.@text-Tuple","page":"Public API","title":"HypertextTemplates.@text","text":"@text content...\n\nExplicitly render content as text within templates.\n\nThe @text macro explicitly marks content for text rendering with HTML escaping. It is rarely needed directly since the $ interpolation syntax provides the same functionality more concisely.\n\nText content is automatically HTML-escaped unless wrapped in SafeString.\n\nArguments\n\ncontent...: One or more values to render as text\n\nExamples\n\njulia> using HypertextTemplates, HypertextTemplates.Elements\n\njulia> # HTML is escaped by default\n       @render @div @text \"<script>alert('XSS')</script>\"\n\"<div>&lt;script&gt;alert('XSS')&lt;/script&gt;</div>\"\n\njulia> # Mix with elements\n       @render @div begin\n           @h1 \"Title\"\n           @text \"Some text content\"\n           @p \"In a paragraph\"\n       end\n\"<div><h1>Title</h1>Some text content<p>In a paragraph</p></div>\"\n\ntip: Tip\nThe $ interpolation syntax is preferred over @text in most cases:# Preferred\n@div \"Count: \" $count\n\n# Equivalent but verbose\n@div \"Count: \" @text count\n\nSee also: SafeString, escape_html\n\n\n\n\n\n","category":"macro"},{"location":"api-public/#HypertextTemplates.Elements","page":"Public API","title":"HypertextTemplates.Elements","text":"HypertextTemplates.Elements\n\nStandard HTML elements for use with HypertextTemplates.\n\nThis module provides all standard HTML5 elements as both functions and macros. Each element can be used either as a macro (e.g., @div) or accessed as a function (e.g., Elements.div).\n\nUsage\n\nusing HypertextTemplates, HypertextTemplates.Elements\n\n# Use elements as macros\n@render @div {class = \"container\"} begin\n    @h1 \"Title\"\n    @p \"Content\"\nend\n\n# Or access them as values for dynamic rendering\nelement = rand() > 0.5 ? Elements.div : Elements.span\n@render @<element \"Dynamic content\"\n\nAvailable Elements\n\nAll standard HTML5 elements are available, including:\n\nDocument structure: html, head, body, div, span\nText content: p, h1-h6, blockquote, pre\nForms: form, input, textarea, select, button\nMedia: img, video, audio, canvas\nTables: table, tr, td, th\nAnd many more...\n\nSpecial Behavior\n\nThe @html element automatically includes <!DOCTYPE html>\nVoid elements (like br, img, input) are self-closing\n\n\n\n\n\n","category":"module"},{"location":"rendering/#Rendering-and-Performance","page":"Rendering & Performance","title":"Rendering & Performance","text":"","category":"section"},{"location":"rendering/","page":"Rendering & Performance","title":"Rendering & Performance","text":"This guide covers the rendering system in HypertextTemplates.jl, including performance optimization techniques and advanced rendering patterns.","category":"page"},{"location":"rendering/#The-@render-Macro","page":"Rendering & Performance","title":"The @render Macro","text":"","category":"section"},{"location":"rendering/","page":"Rendering & Performance","title":"Rendering & Performance","text":"The @render macro is the primary way to convert templates into output. It supports multiple output targets and streaming capabilities.","category":"page"},{"location":"rendering/#Basic-Rendering","page":"Rendering & Performance","title":"Basic Rendering","text":"","category":"section"},{"location":"rendering/","page":"Rendering & Performance","title":"Rendering & Performance","text":"The @render macro converts your template expressions into HTML output. By default, it returns a String containing the rendered HTML. You can render single elements or multiple elements in a block, and the macro handles all the necessary HTML generation including proper escaping and tag structure.","category":"page"},{"location":"rendering/","page":"Rendering & Performance","title":"Rendering & Performance","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# Render to String (default)\nhtml = @render @div \"Hello, World!\"\n\nMain.display_html(html) #hide","category":"page"},{"location":"rendering/","page":"Rendering & Performance","title":"Rendering & Performance","text":"# Render multiple elements\nhtml2 = @render begin\n    @h1 \"Title\"\n    @p \"Paragraph\"\nend\n\nMain.display_html(html2) #hide","category":"page"},{"location":"rendering/#Rendering-to-IO","page":"Rendering & Performance","title":"Rendering to IO","text":"","category":"section"},{"location":"rendering/","page":"Rendering & Performance","title":"Rendering & Performance","text":"When building web applications or generating large documents, rendering directly to an IO stream avoids the memory overhead of creating intermediate strings. This approach is particularly beneficial for server responses where you can write directly to the network socket, or when generating files where you can stream directly to disk. The syntax is identical to string rendering - just pass an IO object as the first argument.","category":"page"},{"location":"rendering/","page":"Rendering & Performance","title":"Rendering & Performance","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# Render to IOBuffer\nbuffer = IOBuffer()\n@render buffer @div begin\n    @h1 \"Small Document\"\n    for i in 1:3\n        @p \"Paragraph $i\"\n    end\nend\nresult = String(take!(buffer))\n\nMain.display_html(result) #hide","category":"page"},{"location":"rendering/#Output-Type-Control","page":"Rendering & Performance","title":"Output Type Control","text":"","category":"section"},{"location":"rendering/","page":"Rendering & Performance","title":"Rendering & Performance","text":"Specify the desired output type:","category":"page"},{"location":"rendering/","page":"Rendering & Performance","title":"Rendering & Performance","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# Render to String (explicit)\nstr = @render String @div \"Content\"\nprintln(typeof(str), \": \", str)\n\n# Render to Vector{UInt8}\nbytes = @render Vector{UInt8} @div \"Binary content\"\nprintln(typeof(bytes), \": \", String(bytes))","category":"page"},{"location":"rendering/#Zero-Allocation-Design","page":"Rendering & Performance","title":"Zero-Allocation Design","text":"","category":"section"},{"location":"rendering/","page":"Rendering & Performance","title":"Rendering & Performance","text":"HypertextTemplates is designed to minimize memory allocations during rendering.","category":"page"},{"location":"rendering/#Direct-IO-Streaming","page":"Rendering & Performance","title":"Direct IO Streaming","text":"","category":"section"},{"location":"rendering/","page":"Rendering & Performance","title":"Rendering & Performance","text":"Instead of building intermediate representations, content streams directly:","category":"page"},{"location":"rendering/","page":"Rendering & Performance","title":"Rendering & Performance","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# This creates no intermediate strings or DOM objects\ntitle = \"My Article\"\nparagraphs = [\"First paragraph.\", \"Second paragraph.\", \"Third paragraph.\"]\n\nio = IOBuffer()\n@render io @article begin\n    @h1 $title\n    for paragraph in paragraphs\n        @p $paragraph\n    end\nend\n\nresult = String(take!(io))\nMain.display_html(result) #hide\n\n# This is equivalent to manual IO operations:\n# write(io, \"<article>\")\n# write(io, \"<h1>\")\n# write(io, escaped_title)\n# write(io, \"</h1>\")\n# ...","category":"page"},{"location":"rendering/#Precompiled-Templates","page":"Rendering & Performance","title":"Precompiled Templates","text":"","category":"section"},{"location":"rendering/","page":"Rendering & Performance","title":"Rendering & Performance","text":"HypertextTemplates performs compile-time optimization on your templates by identifying static HTML content and precompiling it. This means that any HTML structure that doesn't contain dynamic values (interpolations with $) is transformed into efficient string literals at compile time. When you render the template, only the dynamic parts need processing, while static HTML is emitted directly. This optimization happens automatically and can dramatically improve performance for templates with mostly static content.","category":"page"},{"location":"rendering/","page":"Rendering & Performance","title":"Rendering & Performance","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n@component function static_heavy()\n    # All static HTML is precompiled\n    @div {class = \"container\"} begin\n        @header {class = \"header\"} begin\n            @nav begin\n                @a {href = \"/\"} \"Home\"\n                @a {href = \"/about\"} \"About\"\n            end\n        end\n        @article {class = \"content\"} begin\n            @__slot__  # Only dynamic part\n        end\n    end\nend\n\n@deftag macro static_heavy end\n\n# When rendered, only the slot content is processed at runtime\nhtml = @render @static_heavy begin\n    @p \"This is the dynamic content that goes in the slot.\"\nend\n\nMain.display_html(html) #hide","category":"page"},{"location":"rendering/#Efficient-String-Handling","page":"Rendering & Performance","title":"Efficient String Handling","text":"","category":"section"},{"location":"rendering/","page":"Rendering & Performance","title":"Rendering & Performance","text":"The rendering system uses efficient string operations:","category":"page"},{"location":"rendering/","page":"Rendering & Performance","title":"Rendering & Performance","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# Strings are written directly, not concatenated\n@component function efficient_list(; items)\n    @ul begin\n        for item in items\n            # Each write is a separate IO operation\n            # No string concatenation happens\n            @li $item\n        end\n    end\nend\n\n@deftag macro efficient_list end\n\nitems = [\"Apple\", \"Banana\", \"Cherry\", \"Date\", \"Elderberry\"]\nhtml = @render @efficient_list {items}\nMain.display_html(html) #hide","category":"page"},{"location":"rendering/#StreamingRender","page":"Rendering & Performance","title":"StreamingRender","text":"","category":"section"},{"location":"rendering/","page":"Rendering & Performance","title":"Rendering & Performance","text":"For large documents or slow-loading content, use StreamingRender to send content as it becomes available.","category":"page"},{"location":"rendering/#Basic-Streaming","page":"Rendering & Performance","title":"Basic Streaming","text":"","category":"section"},{"location":"rendering/","page":"Rendering & Performance","title":"Rendering & Performance","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# Create a streaming render iterator\nbuffer = IOBuffer()\nstream = StreamingRender() do io\n    @render io @div begin\n        @h1 \"Streaming Example\"\n\n        # Render multiple sections\n        for i in 1:3\n            @section begin\n                @h2 \"Section $i\"\n                @p \"This is paragraph $i\"\n            end\n        end\n    end\nend\n\n# Consume the stream\nchunks = String[]\nfor chunk in stream\n    push!(chunks, String(chunk))\nend\n\nprintln(\"Streamed $(length(chunks)) chunks:\")\nfor (i, chunk) in enumerate(chunks)\n    println(\"Chunk $i: \", repr(chunk))\nend","category":"page"},{"location":"rendering/#HTTP-Streaming-Example","page":"Rendering & Performance","title":"HTTP Streaming Example","text":"","category":"section"},{"location":"rendering/","page":"Rendering & Performance","title":"Rendering & Performance","text":"With HTTP.jl:","category":"page"},{"location":"rendering/","page":"Rendering & Performance","title":"Rendering & Performance","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# Simulated streaming example (without actual HTTP.jl dependency)\nfunction simulate_streaming_response()\n    chunks = String[]\n\n    for chunk in StreamingRender() do render_io\n        @render render_io @html begin\n            @head @title \"Streaming Page\"\n            @body begin\n                @h1 \"Live Data\"\n                for i in 1:5  # Reduced for example\n                    @p \"Item $i\"\n                end\n            end\n        end\n    end\n        push!(chunks, String(chunk))\n    end\n\n    return chunks\nend\n\n# Show how the content would be streamed\nchunks = simulate_streaming_response()\nprintln(\"Streamed $(length(chunks)) chunks\")\nfor (i, chunk) in enumerate(chunks[1:min(3, length(chunks))])\n    println(\"\\nChunk $i preview: \", first(chunk, 100), \"...\")\nend","category":"page"},{"location":"rendering/#Micro-batching","page":"Rendering & Performance","title":"Micro-batching","text":"","category":"section"},{"location":"rendering/","page":"Rendering & Performance","title":"Rendering & Performance","text":"StreamingRender uses intelligent micro-batching for optimal performance:","category":"page"},{"location":"rendering/","page":"Rendering & Performance","title":"Rendering & Performance","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# Internal behavior:\n# - Large writes (≥64 bytes): Sent immediately\n# - Small writes: Batched up to 256 bytes or 1ms timeout\n# - Configurable via keyword arguments to `StreamingRender`\n\n# This results in efficient chunking\nchunks = String[]\nfor chunk in StreamingRender() do io\n    @render io @ul begin\n        for i in 1:20  # Reduced for example\n            @li \"Item $i\"  # Small writes are batched\n        end\n    end\nend\n    push!(chunks, String(chunk))\nend\n\nprintln(\"Total chunks: \", length(chunks))\nif !isempty(chunks)\n    println(\"First chunk size: \", length(chunks[1]), \" bytes\")\n    println(\"First chunk preview: \", first(chunks[1], 100), \"...\")\nend","category":"page"},{"location":"rendering/#StreamingRender-Configuration","page":"Rendering & Performance","title":"StreamingRender Configuration","text":"","category":"section"},{"location":"rendering/","page":"Rendering & Performance","title":"Rendering & Performance","text":"Configure streaming behavior:","category":"page"},{"location":"rendering/","page":"Rendering & Performance","title":"Rendering & Performance","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# Example showing configuration (without actual large document)\n@component function sample_document()\n    @div begin\n        @h1 \"Document Title\"\n        for i in 1:10\n            @section begin\n                @h2 \"Section $i\"\n                @p \"Content for section $i\"\n            end\n        end\n    end\nend\n\n@deftag macro sample_document end\n\n# Custom buffering settings\nio_buffer = IOBuffer()\nio = IOContext(\n    io_buffer,\n)\n\nchunks = String[]\nfor chunk in StreamingRender(;\n    buffer_size = 512,\n    immediate_threshold = 128,\n) do render_io\n    @render IOContext(render_io, io) @sample_document\nend\n    push!(chunks, String(chunk))\nend\n\nprintln(\"Configured streaming produced \", length(chunks), \" chunks\")","category":"page"},{"location":"rendering/#Advanced-Patterns","page":"Rendering & Performance","title":"Advanced Patterns","text":"","category":"section"},{"location":"rendering/#Buffered-Rendering","page":"Rendering & Performance","title":"Buffered Rendering","text":"","category":"section"},{"location":"rendering/","page":"Rendering & Performance","title":"Rendering & Performance","text":"For complex layouts, use intermediate buffers:","category":"page"},{"location":"rendering/","page":"Rendering & Performance","title":"Rendering & Performance","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n@component function left_content()\n    @nav begin\n        @h3 \"Navigation\"\n        @ul begin\n            @li @a {href = \"/\"} \"Home\"\n            @li @a {href = \"/about\"} \"About\"\n            @li @a {href = \"/contact\"} \"Contact\"\n        end\n    end\nend\n\n@component function right_content()\n    @article begin\n        @h2 \"Main Content\"\n        @p \"This is the main content area.\"\n        @p \"It contains the primary information.\"\n    end\nend\n\n@component function two_column_layout(; left_content, right_content)\n    # Render columns in parallel (conceptually)\n    left_buffer = IOBuffer()\n    right_buffer = IOBuffer()\n\n    @render left_buffer @div {class = \"column-left\"} left_content()\n    @render right_buffer @div {class = \"column-right\"} right_content()\n\n    # Combine results\n    @div {class = \"two-column\"} begin\n        @text SafeString(String(take!(left_buffer)))\n        @text SafeString(String(take!(right_buffer)))\n    end\nend\n\n@deftag macro two_column_layout end\n\n# Example usage\nhtml = @render @two_column_layout {left_content, right_content}\n\nMain.display_html(html) #hide","category":"page"},{"location":"rendering/#Lazy-Rendering","page":"Rendering & Performance","title":"Lazy Rendering","text":"","category":"section"},{"location":"rendering/","page":"Rendering & Performance","title":"Rendering & Performance","text":"Defer expensive computations:","category":"page"},{"location":"rendering/","page":"Rendering & Performance","title":"Rendering & Performance","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n@component function render_data(; data)\n    @div begin\n        @h3 $(data.title)\n        @ul begin\n            for item in data.items\n                @li $item\n            end\n        end\n    end\nend\n\n@component function lazy_section(; data_loader)\n    @div {class = \"lazy-load\"} begin\n        # Only load data when actually rendering\n        data = data_loader()\n\n        if isnothing(data)\n            @p \"No data available\"\n        else\n            render_data(; data)\n        end\n    end\nend\n\n@deftag macro lazy_section end\n\n# Simulate expensive operations\nfunction expensive_database_query()\n    # In real code, this would be a database call\n    return (title = \"Query Results\", items = [\"Result 1\", \"Result 2\", \"Result 3\"])\nend\n\nfunction empty_query()\n    return nothing\nend\n\n# Example with data\nhtml1 = @render @lazy_section {\n    data_loader = () -> expensive_database_query()\n}\nMain.display_html(html1) #hide","category":"page"},{"location":"rendering/","page":"Rendering & Performance","title":"Rendering & Performance","text":"# Example without data\nhtml2 = @render @lazy_section {\n    data_loader = () -> empty_query()\n}\nMain.display_html(html2) #hide","category":"page"},{"location":"rendering/#Progressive-Enhancement","page":"Rendering & Performance","title":"Progressive Enhancement","text":"","category":"section"},{"location":"rendering/","page":"Rendering & Performance","title":"Rendering & Performance","text":"Render basic content first, enhance later:","category":"page"},{"location":"rendering/","page":"Rendering & Performance","title":"Rendering & Performance","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n@component function progressive_gallery(; images)\n    @div {class = \"gallery\"} begin\n        # Basic version (fast)\n        for (i, img) in enumerate(images)\n            @img {\n                src = img.thumbnail,\n                \"data-full-src\" := img.full_size,\n                loading = \"lazy\",\n                alt = img.alt\n            }\n        end\n\n        # Enhancement script\n        @script \"\"\"\n        // Progressively load full images\n        document.querySelectorAll('[data-full-src]').forEach(img => {\n            // Load full size when visible\n        });\n        \"\"\"\n    end\nend\n\n@deftag macro progressive_gallery end\n\n# Example usage\nimages = [\n    (thumbnail = \"/thumb1.jpg\", full_size = \"/full1.jpg\", alt = \"Image 1\"),\n    (thumbnail = \"/thumb2.jpg\", full_size = \"/full2.jpg\", alt = \"Image 2\"),\n    (thumbnail = \"/thumb3.jpg\", full_size = \"/full3.jpg\", alt = \"Image 3\")\n]\n\nhtml = @render @progressive_gallery {images}\nMain.display_html(html) #hide","category":"page"},{"location":"rendering/#Best-Practices","page":"Rendering & Performance","title":"Best Practices","text":"","category":"section"},{"location":"rendering/#1.-Choose-the-Right-Output","page":"Rendering & Performance","title":"1. Choose the Right Output","text":"","category":"section"},{"location":"rendering/","page":"Rendering & Performance","title":"Rendering & Performance","text":"Use IO for server responses\nUse String for testing or caching\nUse StreamingRender for large/slow content","category":"page"},{"location":"rendering/#2.-Minimize-Dynamic-Content","page":"Rendering & Performance","title":"2. Minimize Dynamic Content","text":"","category":"section"},{"location":"rendering/","page":"Rendering & Performance","title":"Rendering & Performance","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# Good: Static structure, dynamic content\n@component function good_list(; items)\n    @ul {class = \"static-class\"} begin\n        for item in items\n            @li $item  # Only content is dynamic\n        end\n    end\nend\n\n@deftag macro good_list end\n\n# Less optimal: Dynamic structure\nfunction compute_class(items)\n    length(items) > 5 ? \"long-list\" : \"short-list\"\nend\n\nfunction compute_item_class(item)\n    startswith(item, \"A\") ? \"a-item\" : \"other-item\"\nend\n\n@component function suboptimal_list(; items)\n    @ul {class = compute_class(items)} begin  # Computed every render\n        for item in items\n            @li {class = compute_item_class(item)} $item\n        end\n    end\nend\n\n@deftag macro suboptimal_list end\n\n# Example usage\nitems = [\"Apple\", \"Banana\", \"Cherry\"]\n\n@render @good_list {items}\n\nMain.display_html(ans) #hide","category":"page"},{"location":"rendering/","page":"Rendering & Performance","title":"Rendering & Performance","text":"@render @suboptimal_list {items}\n\nMain.display_html(ans) #hide","category":"page"},{"location":"rendering/#Summary","page":"Rendering & Performance","title":"Summary","text":"","category":"section"},{"location":"rendering/","page":"Rendering & Performance","title":"Rendering & Performance","text":"HypertextTemplates.jl's rendering system provides:","category":"page"},{"location":"rendering/","page":"Rendering & Performance","title":"Rendering & Performance","text":"Zero-allocation design for maximum performance\nFlexible output targets (String, IO, custom types)\nStreaming support for large/async content  \nMicro-batching for optimal chunking\nDirect IO operations avoiding intermediate strings","category":"page"},{"location":"rendering/","page":"Rendering & Performance","title":"Rendering & Performance","text":"The key to performance is understanding that templates compile to direct IO operations, making HypertextTemplates as fast as hand-written HTML generation code while maintaining the convenience of a DSL.","category":"page"},{"location":"core-concepts/#Core-Concepts","page":"Core Concepts","title":"Core Concepts","text":"","category":"section"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"Understanding the core concepts of HypertextTemplates.jl will help you use the library effectively and write maintainable templates.","category":"page"},{"location":"core-concepts/#Macro-Based-DSL-Philosophy","page":"Core Concepts","title":"Macro-Based DSL Philosophy","text":"","category":"section"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"HypertextTemplates.jl uses Julia's macro system to create a domain-specific language (DSL) for HTML generation. This approach provides several benefits:","category":"page"},{"location":"core-concepts/#Compile-Time-Optimization","page":"Core Concepts","title":"Compile-Time Optimization","text":"","category":"section"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# This macro call...\nhtml = @render @div {class = \"container\"} @p \"Hello\"\n\nMain.display_html(html) #hide","category":"page"},{"location":"core-concepts/#Native-Julia-Integration","page":"Core Concepts","title":"Native Julia Integration","text":"","category":"section"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"The DSL feels like natural Julia code because it is Julia code:","category":"page"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# Regular Julia control flow works seamlessly\n@render @ul begin\n    for i in 1:5\n        if isodd(i)\n            @li {class = \"odd\"} \"Item \" $i\n        else\n            @li {class = \"even\"} \"Item \" $i\n        end\n    end\nend\n\nMain.display_html(ans) #hide","category":"page"},{"location":"core-concepts/#Type-Safety","page":"Core Concepts","title":"Type Safety","text":"","category":"section"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"Julia's type system helps catch errors at compile time:","category":"page"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n@component function typed_list(; items::Vector{String})\n    @ul begin\n        for item in items\n            @li $item\n        end\n    end\nend\n\n@deftag macro typed_list end\n\n# Julia's type system helps catch errors\nitems = [\"Apple\", \"Banana\", \"Cherry\"]\nhtml = @render @typed_list {items}\n\nMain.display_html(html) #hide","category":"page"},{"location":"core-concepts/#The-{}-Attribute-Syntax","page":"Core Concepts","title":"The {} Attribute Syntax","text":"","category":"section"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"Building on the macro foundation, attributes use a special {} syntax that resembles Julia's NamedTuple syntax:","category":"page"},{"location":"core-concepts/#Basic-Attributes","page":"Core Concepts","title":"Basic Attributes","text":"","category":"section"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# Simple attributes\n@render @div {id = \"main\", class = \"container\"} \"Content\"\n\nMain.display_html(ans) #hide","category":"page"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# Computed attributes\nwidth = 100\n@render @img {src = \"/logo.png\", width = width * 2}\n\nMain.display_html(ans) #hide","category":"page"},{"location":"core-concepts/#Attribute-Name-Shortcuts","page":"Core Concepts","title":"Attribute Name Shortcuts","text":"","category":"section"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"When variable names match attribute names:","category":"page"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\nclass = \"active\"\ndisabled = true\n\n# Instead of {class = class, disabled = disabled}\n@render @button {class, disabled} \"Click me\"\n\nMain.display_html(ans) #hide","category":"page"},{"location":"core-concepts/#Attribute-Spreading","page":"Core Concepts","title":"Attribute Spreading","text":"","category":"section"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"Spread multiple attributes from a collection:","category":"page"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\ncommon_attrs = (class = \"btn\", type = \"button\")\n@render @button {id = \"submit\", common_attrs...} \"Submit\"\n\nMain.display_html(ans) #hide","category":"page"},{"location":"core-concepts/#Boolean-Attributes","page":"Core Concepts","title":"Boolean Attributes","text":"","category":"section"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"Boolean handling follows HTML5 semantics:","category":"page"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# true renders the attribute name only\n@render @input {type = \"checkbox\", checked = true}\n\nMain.display_html(ans) #hide","category":"page"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"# false omits the attribute entirely\n@render @input {type = \"checkbox\", checked = false}\n\nMain.display_html(ans) #hide","category":"page"},{"location":"core-concepts/#Text-Rendering-and-Interpolation","page":"Core Concepts","title":"Text Rendering and Interpolation","text":"","category":"section"},{"location":"core-concepts/#Variable-Interpolation-with","page":"Core Concepts","title":"Variable Interpolation with $","text":"","category":"section"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"The $ syntax marks expressions for rendering with automatic escaping:","category":"page"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\nuser_input = \"<script>alert('xss')</script>\"\nhtml = @render @p \"User said: \" $user_input\n\nMain.display_html(html) #hide","category":"page"},{"location":"core-concepts/#The-@text-Macro","page":"Core Concepts","title":"The @text Macro","text":"","category":"section"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"The $ syntax is actually shorthand for @text:","category":"page"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\nvalue = 42\n\n# These are equivalent\nhtml1 = @render @p \"\\$ Value: \" $value\n\nMain.display_html(html1) #hide","category":"page"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"html2 = @render @p \"@text Value: \" @text value\n\nMain.display_html(html2) #hide","category":"page"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"a, b = 10, 20\n# @text can handle complex expressions\nhtml3 = @render @p @text \"The sum is $(a + b)\"\n\nMain.display_html(html3) #hide","category":"page"},{"location":"core-concepts/#Mixed-Content","page":"Core Concepts","title":"Mixed Content","text":"","category":"section"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"You can mix different content types:","category":"page"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\ndynamic_var = \"dynamic content\"\n\nhtml = @render @div begin\n    @span \"Static text \"   # String literal\n    @code $dynamic_var     # Escaped variable\n    @p \"bold\"              # Nested element\n    @strong \" more text\"   # Another literal\nend\n\nMain.display_html(html) #hide","category":"page"},{"location":"core-concepts/#Zero-Allocation-Design","page":"Core Concepts","title":"Zero-Allocation Design","text":"","category":"section"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"The performance benefits of the macro system extend to the rendering pipeline through zero-allocation design:","category":"page"},{"location":"core-concepts/#Direct-IO-Streaming","page":"Core Concepts","title":"Direct IO Streaming","text":"","category":"section"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"Instead of building a DOM tree, content streams directly to IO:","category":"page"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# No intermediate string allocations\nio = IOBuffer()\n@render io @div begin\n    for i in 1:5\n        @p \"Paragraph \" $i\n    end\nend\n\nresult = String(take!(io))\n\nMain.display_html(result) #hide","category":"page"},{"location":"core-concepts/#Efficient-String-Building","page":"Core Concepts","title":"Efficient String Building","text":"","category":"section"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"The rendering process uses Julia's efficient IO system:","category":"page"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# Internally uses write() calls, not string concatenation\nhtml = @render @div begin\n    @h1 \"Title\"\n    @p \"Content\"\nend\n\nMain.display_html(html) #hide\n\n# This is equivalent to direct write() calls:\n# write(io, \"<div>\")\n# write(io, \"<h1>\")\n# write(io, \"Title\")\n# write(io, \"</h1>\")\n# ...","category":"page"},{"location":"core-concepts/#Rendering-Pipeline","page":"Core Concepts","title":"Rendering Pipeline","text":"","category":"section"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"The rendering pipeline works as follows:","category":"page"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"Macro Expansion: Templates are transformed into Julia code at compile time\nIO Target: All output goes to an IO stream (provided or created)\nDirect Writing: HTML strings and escaped content are written directly\nNo Buffering: Content flows straight through without intermediate storage","category":"page"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"This design means:","category":"page"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"Memory usage is constant regardless of output size\nFirst byte is written immediately (no buffering)\nSuitable for very large documents\nOptimal for streaming responses","category":"page"},{"location":"core-concepts/#Control-Flow-Integration","page":"Core Concepts","title":"Control Flow Integration","text":"","category":"section"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"Since templates are Julia code, all control flow constructs work naturally:","category":"page"},{"location":"core-concepts/#Loops","page":"Core Concepts","title":"Loops","text":"","category":"section"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# for loops\ncollection = [\"Apple\", \"Banana\", \"Cherry\"]\nhtml1 = @render @ul for item in collection\n    @li $item\nend\n\nMain.display_html(html1) #hide","category":"page"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"# while loops\ncount = 0\nhtml2 = @render @div begin\n    while count < 3\n        @p \"Count: \" $count\n        global count += 1\n    end\nend\n\nMain.display_html(html2) #hide","category":"page"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"# comprehensions\nhtml3 = @render @select begin\n    [@option {value = i} \"Option \" $i for i in 1:5]\nend\nprintln(\"\\nComprehension:\")\nMain.display_html(html3) #hide","category":"page"},{"location":"core-concepts/#Conditionals","page":"Core Concepts","title":"Conditionals","text":"","category":"section"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"All conditional forms are supported:","category":"page"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# if-else\ncondition = true\nhtml1 = @render @div begin\n    if condition\n        @p \"True branch\"\n    else\n        @p \"False branch\"\n    end\nend\n\nMain.display_html(html1) #hide","category":"page"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"# ternary operator\nisactive = false\nhtml2 = @render @p {class = isactive ? \"active\" : \"inactive\"} \"Status\"\n\nMain.display_html(html2) #hide","category":"page"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"# short-circuit evaluation\nhasdata = false\nhtml3 = @render @div begin\n    hasdata && @p \"Data is available\"\n    !hasdata && @p \"No data available\"\nend\n\nMain.display_html(html3) #hide","category":"page"},{"location":"core-concepts/#Pattern-Matching","page":"Core Concepts","title":"Pattern Matching","text":"","category":"section"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"Works with any macro-based control flow:","category":"page"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"# With Match.jl (example)\n@div begin\n    @match value begin\n        1 => @p \"One\"\n        2 => @p \"Two\"\n        _ => @p \"Other\"\n    end\nend","category":"page"},{"location":"core-concepts/#Component-Architecture","page":"Core Concepts","title":"Component Architecture","text":"","category":"section"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"The macro system and control flow integration come together in HypertextTemplates' component architecture:","category":"page"},{"location":"core-concepts/#Function-Based-Components","page":"Core Concepts","title":"Function-Based Components","text":"","category":"section"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n@component function alert(; type = \"info\", message)\n    classes = \"alert alert-\" * type\n    @div {class = classes, role = \"alert\"} $message\nend\n\n@deftag macro alert end\n\n# Use the component\nhtml = @render @alert {type = \"warning\", message = \"This is a warning!\"}\n\nMain.display_html(html) #hide","category":"page"},{"location":"core-concepts/#Composition","page":"Core Concepts","title":"Composition","text":"","category":"section"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"Components compose naturally:","category":"page"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# Reuse the alert component from above\n@component function alert(; type = \"info\", message)\n    classes = \"alert alert-\" * type\n    @div {class = classes, role = \"alert\"} $message\nend\n\n@deftag macro alert end\n\n@component function alert_list(; alerts)\n    @div {class = \"alert-container\"} begin\n        for alert in alerts\n            @alert {type = alert.type, message = alert.message}\n        end\n    end\nend\n\n@deftag macro alert_list end\n\n# Use the composed component\nalerts = [\n    (type = \"info\", message = \"Information message\"),\n    (type = \"warning\", message = \"Warning message\"),\n    (type = \"error\", message = \"Error message\")\n]\n\nhtml = @render @alert_list {alerts}\n\nMain.display_html(html) #hide","category":"page"},{"location":"core-concepts/#Component-Transformation","page":"Core Concepts","title":"Component Transformation","text":"","category":"section"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"The @component macro transforms the function to:","category":"page"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"Accept rendering context (IO stream)\nHandle slot content (both default and named slots)\nManage source location tracking (in development mode)\nSupport streaming render (for async operations)","category":"page"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"For example, this component:","category":"page"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"@component function example(; prop)\n    @div $prop\nend","category":"page"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"Is transformed into a function that:","category":"page"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"Accepts an internal __io__ parameter for rendering\nCan receive slot content via hidden parameters\nTracks its definition location for debugging\nWorks seamlessly with StreamingRender","category":"page"},{"location":"core-concepts/#Performance-Considerations","page":"Core Concepts","title":"Performance Considerations","text":"","category":"section"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"The zero-allocation design and macro system combine to optimize performance at multiple levels:","category":"page"},{"location":"core-concepts/#Compile-Time-Work","page":"Core Concepts","title":"Compile-Time Work","text":"","category":"section"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# This template structure is analyzed at compile time\n@component function static_heavy()\n    @div {class = \"wrapper\"} begin\n        @header begin\n            @nav begin\n                @ul begin\n                    @li @a {href = \"/\"} \"Home\"\n                    @li @a {href = \"/about\"} \"About\"\n                end\n            end\n        end\n    end\nend\n\n@deftag macro static_heavy end\n\n# The structure is compiled, not interpreted at runtime\nhtml = @render @static_heavy\n\nMain.display_html(html) #hide","category":"page"},{"location":"core-concepts/#Runtime-Efficiency","page":"Core Concepts","title":"Runtime Efficiency","text":"","category":"section"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"Only dynamic parts are computed at runtime:","category":"page"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n@component function dynamic_list(; items)\n    # Static structure compiled, only loop runs at runtime\n    @ul {class = \"list\"} begin\n        for item in items  # Only this loop runs at runtime\n            @li $item\n        end\n    end\nend\n\n@deftag macro dynamic_list end\n\n# Only the loop execution is runtime work\nitems = [\"Dynamic 1\", \"Dynamic 2\", \"Dynamic 3\"]\nhtml = @render @dynamic_list {items}\n\nMain.display_html(html) #hide","category":"page"},{"location":"core-concepts/#HTML-Escaping-Strategy","page":"Core Concepts","title":"HTML Escaping Strategy","text":"","category":"section"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"Complementing the performance features, HypertextTemplates provides automatic security through its escaping strategy:","category":"page"},{"location":"core-concepts/#Automatic-Escaping","page":"Core Concepts","title":"Automatic Escaping","text":"","category":"section"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"All dynamic content is escaped by default:","category":"page"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\nunsafe = \"<script>alert('xss')</script>\"\nhtml = @render @p $unsafe\n\nMain.display_html(html) #hide","category":"page"},{"location":"core-concepts/#Escape-Rules","page":"Core Concepts","title":"Escape Rules","text":"","category":"section"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"String literals in templates are NOT escaped (trusted content)\nVariables and expressions with $ or @text ARE escaped\nAttribute values from variables ARE escaped\nElement content from components is already rendered (not double-escaped)","category":"page"},{"location":"core-concepts/#Performance","page":"Core Concepts","title":"Performance","text":"","category":"section"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"Escaping uses optimized routines:","category":"page"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"Fast-path for strings without special characters\nEfficient replacement for strings with special characters\nMinimal allocations during escaping","category":"page"},{"location":"core-concepts/#Summary","page":"Core Concepts","title":"Summary","text":"","category":"section"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"These core concepts build on each other:","category":"page"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"Macros provide the foundation with compile-time optimization\n{} attributes extend the macro syntax for properties\nText rendering handles content with automatic security\nZero-allocation design ensures performance at scale\nControl flow integration leverages Julia's expressiveness\nComponents combine all concepts for reusable templates","category":"page"},{"location":"core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"Each concept reinforces the others, creating a cohesive system that's fast, safe, and natural to use.","category":"page"},{"location":"advanced-features/#Advanced-Features","page":"Advanced Features","title":"Advanced Features","text":"","category":"section"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"This guide covers advanced features in HypertextTemplates.jl that enable sophisticated template patterns and optimizations.","category":"page"},{"location":"advanced-features/#The-@__once__-Macro","page":"Advanced Features","title":"The @__once__ Macro","text":"","category":"section"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"The @__once__ macro ensures content is rendered only once per @render call, even if the component is used multiple times.","category":"page"},{"location":"advanced-features/#Basic-Usage","page":"Advanced Features","title":"Basic Usage","text":"","category":"section"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"The @__once__ macro is a powerful deduplication tool that ensures specific content (like CSS styles, JavaScript libraries, or initialization code) is only rendered once within a single @render call, even if the component containing it is used multiple times. This is essential for preventing duplicate script tags, style definitions, or other resources that should only appear once in your HTML output. The macro tracks what has been rendered and automatically skips subsequent occurrences within the same rendering context.","category":"page"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n@component function include_jquery()\n    @__once__ begin\n        @script {src = \"https://code.jquery.com/jquery-3.6.0.min.js\"}\n    end\nend\n\n@deftag macro include_jquery end\n\n# The script tag appears only once in the output\nhtml = @render @div begin\n    @include_jquery  # Renders script\n    @include_jquery  # Skips script (already rendered)\n    @include_jquery  # Skips script (already rendered)\nend\n\nMain.display_html(html) #hide\n# Note: Only one script tag appears!","category":"page"},{"location":"advanced-features/#Common-Use-Cases","page":"Advanced Features","title":"Common Use Cases","text":"","category":"section"},{"location":"advanced-features/#CSS-Dependencies","page":"Advanced Features","title":"CSS Dependencies","text":"","category":"section"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n@component function styled_button(; text, variant = \"primary\")\n    @__once__ begin\n        @style \"\"\"\n        .btn {\n            padding: 0.5rem 1rem;\n            border: none;\n            border-radius: 0.25rem;\n            cursor: pointer;\n        }\n        .btn-primary { background: #007bff; color: white; }\n        .btn-danger { background: #dc3545; color: white; }\n        \"\"\"\n    end\n    \n    @button {class = \"btn btn-$variant\"} $text\nend\n\n@deftag macro styled_button end\n\n# Style block rendered once, buttons rendered multiple times\nhtml = @render @div begin\n    @styled_button {text = \"Save\", variant = \"primary\"}\n    @styled_button {text = \"Delete\", variant = \"danger\"}\n    @styled_button {text = \"Cancel\"}\nend\nMain.display_html(html) #hide\n# Note: The <style> block appears only once at the beginning!","category":"page"},{"location":"advanced-features/#JavaScript-Initialization","page":"Advanced Features","title":"JavaScript Initialization","text":"","category":"section"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n@component function data_table(; id, data)\n    @__once__ begin\n        @script \"\"\"\n        function initDataTable(id) {\n            // Initialize table sorting, filtering, etc.\n            console.log('Initializing table:', id);\n        }\n        \"\"\"\n    end\n    \n    @table {id} begin\n        @thead @tr begin\n            @th \"Name\"\n            @th \"Value\"\n        end\n        @tbody begin\n            for item in data\n                @tr begin\n                    @td $(item.name)\n                    @td $(item.value)\n                end\n            end\n        end\n    end\n    \n    @script \"initDataTable('$id');\"\nend\n\n@deftag macro data_table end\n\n# Multiple tables, but init function defined once\ndata1 = [(name = \"A\", value = 1), (name = \"B\", value = 2)]\ndata2 = [(name = \"X\", value = 10), (name = \"Y\", value = 20)]\n\nhtml = @render @div begin\n    @data_table {id = \"table1\", data = data1}\n    @data_table {id = \"table2\", data = data2}\nend\n\nMain.display_html(html) #hide\n# Note: initDataTable function defined once, but called twice","category":"page"},{"location":"advanced-features/#Scoping-Behavior","page":"Advanced Features","title":"Scoping Behavior","text":"","category":"section"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"@__once__ is scoped to the current render context:","category":"page"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n@component function scoped_script()\n    @__once__ begin\n        @script \"console.log('Script loaded');\"\n    end\n    @p \"Component rendered\"\nend\n\n@deftag macro scoped_script end\n\n# First render - includes script\nhtml1 = @render @div begin\n    @scoped_script\nend\nMain.display_html(html1) #hide","category":"page"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"# Second render - includes script again (different render context)\nhtml2 = @render @div begin\n    @scoped_script  \nend\nMain.display_html(html2) #hide","category":"page"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"# Within same render - deduplication works\nhtml3 = @render @div begin\n    @section @scoped_script  # Included\n    @section @scoped_script  # Skipped\nend\nMain.display_html(html3) #hide","category":"page"},{"location":"advanced-features/#The-@deftag-Macro","page":"Advanced Features","title":"The @deftag Macro","text":"","category":"section"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"Create custom macros for components and elements for cleaner syntax.","category":"page"},{"location":"advanced-features/#Basic-Definition","page":"Advanced Features","title":"Basic Definition","text":"","category":"section"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"The @deftag macro transforms your components and custom elements into first-class DSL elements that can be used with the same clean syntax as built-in HTML elements. Instead of calling components as functions, @deftag creates a macro that integrates seamlessly with the template syntax, supporting attributes in {} blocks and content blocks just like @div or @p. This makes your custom components feel native to the templating language and improves code readability.","category":"page"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# Define a component\n@component function alert(; type = \"info\", dismissible = false)\n    @div {class = \"alert alert-$type\"} begin\n        @__slot__\n        if dismissible\n            @button {class = \"close\"} \"×\"\n        end\n    end\nend\n\n# Create a macro for it\n@deftag macro alert end\n\n# Now use as a regular element macro\nhtml = @render @alert {type = \"warning\", dismissible = true} begin\n    @strong \"Warning!\" \" Something went wrong.\"\nend\nMain.display_html(html) #hide","category":"page"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"# Also works without dismissible\nhtml2 = @render @alert {type = \"info\"} \"This is an info message.\"\nMain.display_html(html2) #hide","category":"page"},{"location":"advanced-features/#Custom-Element-Tags","page":"Advanced Features","title":"Custom Element Tags","text":"","category":"section"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# Define custom elements with macros\n@element \"my-custom-element\" my_custom_element\n@deftag macro my_custom_element end\n\n# Use the custom element\nhtml = @render @my_custom_element {prop = \"value\"} \"Content\"\nMain.display_html(html) #hide","category":"page"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"# Also works with nested content\n@element \"custom-card\" custom_card\n@deftag macro custom_card end\n\nhtml2 = @render @custom_card {variant = \"primary\"} begin\n    @h3 \"Card Title\"\n    @p \"Card content goes here\"\nend\nMain.display_html(html2) #hide","category":"page"},{"location":"advanced-features/#Module-Scoped-Tags","page":"Advanced Features","title":"Module-Scoped Tags","text":"","category":"section"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\nmodule UI\n    using HypertextTemplates\n    using HypertextTemplates.Elements\n\n    @component function button(; variant = \"default\")\n        Elements.@button {class = \"ui-btn ui-btn-$variant\"} @__slot__\n    end\n\n    # Create and export the macro\n    @deftag macro button end\n    export @button\nend\n\n# Use from outside the module\nhtml = @render @UI.button {variant = \"primary\"} \"Click me\"\nMain.display_html(html) #hide","category":"page"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"# Also can import and use directly\nusing .UI: @button\nhtml2 = @render @button {variant = \"success\"} \"Save\"\nMain.display_html(html2) #hide","category":"page"},{"location":"advanced-features/#Text-Interpolation-with","page":"Advanced Features","title":"Text Interpolation with $","text":"","category":"section"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"The $ syntax provides convenient text interpolation, similar to string interpolation.","category":"page"},{"location":"advanced-features/#Basic-Interpolation","page":"Advanced Features","title":"Basic Interpolation","text":"","category":"section"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"Text interpolation with $ provides a concise way to embed dynamic values directly within your templates, eliminating the need for explicit @text calls. This syntax works just like Julia's string interpolation but is HTML-aware, automatically escaping values for security. You can interpolate variables, expressions, and even complex computations, making your templates more readable and maintainable while maintaining the same performance and safety guarantees as explicit text nodes.","category":"page"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\nname = \"Julia\"\nversion = 1.9\n\nhtml = @render @div begin\n    @h1 \"Welcome to \" $name \" v\" $version\nend\nMain.display_html(html) #hide\n# Equivalent to:\n# @h1 \"Welcome to \" @text name \" v\" @text version","category":"page"},{"location":"advanced-features/#Expression-Interpolation","page":"Advanced Features","title":"Expression Interpolation","text":"","category":"section"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\nitems = [\"apple\", \"banana\", \"cherry\"]\n\nhtml = @render @ul begin\n    for (i, item) in enumerate(items)\n        @li \"Item \" $i \": \" $(uppercase(item))\n    end\nend\nMain.display_html(html) #hide","category":"page"},{"location":"advanced-features/#Nested-Interpolation","page":"Advanced Features","title":"Nested Interpolation","text":"","category":"section"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n@component function price_display(; amount, currency = \"\\$\")\n    @span {class = \"price\"} $currency $(round(amount, digits=2))\nend\n\n@deftag macro price_display end\n\nhtml = @render @div begin\n    @text \"Total: \"\n    @price_display {amount = 99.999}\n    @text \" (Tax included: \"\n    @price_display {amount = 99.999 * 1.1} \")\"\nend\nMain.display_html(html) #hide","category":"page"},{"location":"advanced-features/#Dynamic-Component-Selection","page":"Advanced Features","title":"Dynamic Component Selection","text":"","category":"section"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"The @< macro enables dynamic component rendering.","category":"page"},{"location":"advanced-features/#Component-as-Variable","page":"Advanced Features","title":"Component as Variable","text":"","category":"section"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"The @< macro enables dynamic component selection at runtime, allowing you to choose which component to render based on data or conditions. This pattern is essential for building flexible UIs where the component type needs to be determined programmatically - such as rendering different message types, form fields, or content blocks based on configuration. The syntax @<component_var {props} treats the component as a first-class value that can be stored in variables, passed as arguments, or selected from dictionaries.","category":"page"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# Define the specific components first\n@component function error_message(; content)\n    @div {class = \"error\"} @strong \"Error: \" $content\nend\n\n@component function warning_message(; content)\n    @div {class = \"warning\"} @strong \"Warning: \" $content\nend\n\n@component function info_message(; content)\n    @div {class = \"info\"} @strong \"Info: \" $content\nend\n\n# Select component based on condition\n@component function message(; type, content)\n    component = if type == \"error\"\n        error_message\n    elseif type == \"warning\"  \n        warning_message\n    else\n        info_message\n    end\n\n    @<component {content}\nend\n\n@deftag macro message end\n\n# Usage\nhtml = @render @div begin\n    @message {type = \"error\", content = \"File not found\"}\n    @message {type = \"warning\", content = \"Disk space low\"}\n    @message {type = \"info\", content = \"Process completed\"}\nend\nMain.display_html(html) #hide","category":"page"},{"location":"advanced-features/#Polymorphic-Components","page":"Advanced Features","title":"Polymorphic Components","text":"","category":"section"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n@component function flexible_container(; tag = div, class_name = \"container\")\n    @<tag {class = class_name} begin\n        @__slot__\n    end\nend\n\n@deftag macro flexible_container end\n\n# Use with different HTML elements\nhtml1 = @render @flexible_container {tag = section} begin\n    @h1 \"Section Title\"\n    @p \"Section content\"\nend\nMain.display_html(html1) #hide","category":"page"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"html2 = @render @flexible_container {tag = article, class_name = \"article-container\"} begin\n    @h2 \"Article Title\"\n    @p \"Article content\"\nend\nMain.display_html(html2) #hide","category":"page"},{"location":"advanced-features/#Component-Maps","page":"Advanced Features","title":"Component Maps","text":"","category":"section"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# Define field components\n@component function text_field(; name, options = nothing)\n    @input {type = \"text\", name, id = name}\nend\n\n@component function email_field(; name, options = nothing)\n    @input {type = \"email\", name, id = name}\nend\n\n@component function select_field(; name, options = [])\n    @select {name, id = name} begin\n        for opt in options\n            @option {value = opt.value} $(opt.label)\n        end\n    end\nend\n\n# Map of field types to components\nconst FIELD_COMPONENTS = Dict(\n    :text => text_field,\n    :email => email_field,\n    :select => select_field\n)\n\n@component function form_field(; type, name, label, options = nothing)\n    component = get(FIELD_COMPONENTS, type, text_field)\n\n    @div {class = \"form-field\"} begin\n        Elements.@label {\"for\" := name} $label\n        @<component {name, options}\n    end\nend\n\n@deftag macro form_field end\n\n# Usage examples\nhtml = @render @form begin\n    @form_field {type = :text, name = \"username\", label = \"Username:\"}\n    @form_field {type = :email, name = \"email\", label = \"Email:\"}\n    @form_field {\n        type = :select,\n        name = \"country\",\n        label = \"Country:\",\n        options = [\n            (value = \"us\", label = \"United States\"),\n            (value = \"uk\", label = \"United Kingdom\"),\n            (value = \"ca\", label = \"Canada\")\n        ]\n    }\nend\n\nMain.display_html(html) #hide","category":"page"},{"location":"advanced-features/#Advanced-Patterns","page":"Advanced Features","title":"Advanced Patterns","text":"","category":"section"},{"location":"advanced-features/#Memoization","page":"Advanced Features","title":"Memoization","text":"","category":"section"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"Cache expensive computations:","category":"page"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\nconst COMPUTED_CACHE = Dict{Any,Any}()\n\n@component function memoized(; key, compute)\n    value = get!(COMPUTED_CACHE, key) do\n        compute()\n    end\n\n    @div {class = \"memoized\"} $value\nend\n\n@deftag macro memoized end\n\n# Simulate expensive calculation\nfunction expensive_calculation(id)\n    println(\"Computing for id=$id...\")\n    return \"Result for $id\"\nend\n\n# First call computes\nhtml1 = @render @memoized {\n    key = \"expensive-42\",\n    compute = () -> expensive_calculation(42)\n}\nprintln(\"First render: \", html1)\n\n# Second call uses cache (no \"Computing...\" message)\nhtml2 = @render @memoized {\n    key = \"expensive-42\",\n    compute = () -> expensive_calculation(42)\n}\nprintln(\"Second render (cached): \", html2)\n\n# Different key computes again\nhtml3 = @render @memoized {\n    key = \"expensive-99\",\n    compute = () -> expensive_calculation(99)\n}\nprintln(\"Different key: \", html3)","category":"page"},{"location":"advanced-features/#Render-Props-Pattern","page":"Advanced Features","title":"Render Props Pattern","text":"","category":"section"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"Pass rendering functions as props:","category":"page"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# Simulate data fetching\nfunction fetch_data(url)\n    if url == \"/api/users\"\n        # Simulate successful fetch\n        data = [(name = \"Alice\",), (name = \"Bob\",), (name = \"Charlie\",)]\n        return (data = data, error = nothing, loading = false)\n    elseif url == \"/api/error\"\n        return (data = nothing, error = \"Network error\", loading = false)\n    else\n        return (data = nothing, error = nothing, loading = true)\n    end\nend\n\n@component function data_fetcher(; url, render_loading, render_error, render_success)\n    result = fetch_data(url)\n\n    if result.loading\n        @<render_loading\n    elseif !isnothing(result.error)\n        @<render_error {error = result.error}\n    else\n        @<render_success {data = result.data}\n    end\nend\n\n@deftag macro data_fetcher end\n\n# Define render components\n@component function loading_comp()\n    @p {class = \"loading\"} \"Loading...\"\nend\n@component function error_comp(; error)\n    @p {class = \"error\"} \"Error: \" $error\nend\n@component function success_comp(; data)\n    @ul begin\n        for user in data\n            @li $(user.name)\n        end\n    end\nend\n\n# Success case\nprintln(\"Success case:\")\nhtml1 = @render @data_fetcher {\n    url = \"/api/users\",\n    render_loading = loading_comp,\n    render_error = error_comp,\n    render_success = success_comp\n}\nMain.display_html(html1) #hide","category":"page"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"# Error case\nprintln(\"\\nError case:\")\nhtml2 = @render @data_fetcher {\n    url = \"/api/error\",\n    render_loading = loading_comp,\n    render_error = error_comp,\n    render_success = success_comp\n}\nMain.display_html(html2) #hide","category":"page"},{"location":"advanced-features/#Template-Inheritance","page":"Advanced Features","title":"Template Inheritance","text":"","category":"section"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"Build template inheritance systems:","category":"page"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n@component function base_layout(; title = \"Default Title\")\n    @html begin\n        @head begin\n            @title $title\n            @__slot__ head  # Additional head content\n        end\n        @body begin\n            @header @__slot__ header\n            Elements.@main @__slot__     # Default slot for main content\n            @footer @__slot__ footer\n        end\n    end\nend\n\n@deftag macro base_layout end\n\n@component function blog_layout(; post)\n    @base_layout {title = post.title} begin\n        # Main content\n        @article begin\n            @h1 $(post.title)\n            @div {class = \"content\"} $(SafeString(post.html))\n        end\n\n        # Named slots\n        head := @meta {name = \"author\", content = post.author}\n\n        header := @nav @a {href = \"/blog\"} \"← Back to Blog\"\n\n        footer := @p \"Published: \" $(post.date)\n    end\nend\n\n@deftag macro blog_layout end\n\n# Example blog post\npost = (\n    title = \"Understanding Julia Macros\",\n    author = \"Jane Developer\",\n    date = \"2024-01-15\",\n    html = \"<p>Julia macros are powerful metaprogramming tools...</p>\"\n)\n\nhtml = @render @blog_layout {post}\nMain.display_html(html) #hide","category":"page"},{"location":"advanced-features/#Lazy-Loading-Pattern","page":"Advanced Features","title":"Lazy Loading Pattern","text":"","category":"section"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"Load data on-demand during rendering:","category":"page"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\nconst DATA_CACHE = Dict{Any,Any}()\n\n# Simulate database fetch\nfunction fetch_users_from_db()\n    println(\"Fetching from database...\")\n    return [\n        (name = \"Alice\", id = 1),\n        (name = \"Bob\", id = 2),\n        (name = \"Charlie\", id = 3)\n    ]\nend\n\n@component function lazy_data(; data_loader, cache_key = nothing)\n    # Load data during render (blocking)\n    data = if !isnothing(cache_key) && haskey(DATA_CACHE, cache_key)\n        println(\"Using cached data for key: $cache_key\")\n        DATA_CACHE[cache_key]\n    else\n        result = data_loader()\n        if !isnothing(cache_key)\n            DATA_CACHE[cache_key] = result\n        end\n        result\n    end\n\n    @div {class = \"data-container\"} begin\n        if isempty(data)\n            @p {class = \"empty\"} \"No data available\"\n        else\n            @ul begin\n                for item in data\n                    @li \"$(item.name) (ID: $(item.id))\"\n                end\n            end\n        end\n    end\nend\n\n@deftag macro lazy_data end\n\n# First render - fetches data\nprintln(\"First render:\")\nhtml1 = @render @lazy_data {\n    cache_key = \"users\",\n    data_loader = () -> fetch_users_from_db()\n}\nMain.display_html(html1) #hide","category":"page"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"# Second render - uses cache\nprintln(\"\\nSecond render:\")\nhtml2 = @render @lazy_data {\n    cache_key = \"users\",\n    data_loader = () -> fetch_users_from_db()\n}\nMain.display_html(html2) #hide","category":"page"},{"location":"advanced-features/#Best-Practices","page":"Advanced Features","title":"Best Practices","text":"","category":"section"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"Use @__once__ for dependencies - Include CSS/JS dependencies once\nCreate domain-specific tags - Use @deftag for common patterns\nLeverage $ interpolation - Cleaner than multiple @text calls\nCache expensive operations - Use memoization for complex computations","category":"page"},{"location":"advanced-features/#Context-System","page":"Advanced Features","title":"Context System","text":"","category":"section"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"The context system provides a way to pass data through the component tree without manually passing props through every level. This solves the \"prop drilling\" problem common in component-based architectures.","category":"page"},{"location":"advanced-features/#Introduction-to-Context","page":"Advanced Features","title":"Introduction to Context","text":"","category":"section"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"Context allows you to share values between components without explicitly passing them as props. It's particularly useful for cross-cutting concerns like themes, user authentication, localization, and feature flags.","category":"page"},{"location":"advanced-features/#Basic-Usage-2","page":"Advanced Features","title":"Basic Usage","text":"","category":"section"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"Use @context to provide values and @get_context to consume them:","category":"page"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# Define a component that uses context\n@component function themed_button(; text = \"Click me\")\n    theme = @get_context(:theme, \"light\")  # Get theme with default\n    @button {class = \"btn btn-$theme\"} $text\nend\n\n@deftag macro themed_button end\n\n# Provide context and render\nhtml = @render @context {theme = \"dark\"} begin\n    @div begin\n        @h1 \"Dark Theme Example\"\n        @themed_button {text = \"Save\"}\n        @themed_button {text = \"Cancel\"}\n    end\nend\n\nMain.display_html(html) #hide","category":"page"},{"location":"advanced-features/#Context-with-Default-Values","page":"Advanced Features","title":"Context with Default Values","text":"","category":"section"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"The @get_context macro supports default values for when context is not provided:","category":"page"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n@component function user_greeting()\n    # Provide defaults for missing context\n    user = @get_context(:user_name, \"Guest\")\n    locale = @get_context(:locale, \"en\")\n\n    greeting = locale == \"es\" ? \"Hola\" : \"Hello\"\n    @p \"$greeting, $(user)!\"\nend\n\n@deftag macro user_greeting end\n\n# Without context - uses defaults\nhtml1 = @render @user_greeting\nMain.display_html(html1) #hide","category":"page"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"# With partial context\nhtml2 = @render @context {user_name = \"Alice\"} begin\n    @user_greeting\nend\nMain.display_html(html2) #hide","category":"page"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"# With full context\nhtml3 = @render @context {user_name = \"Carlos\", locale = \"es\"} begin\n    @user_greeting\nend\nMain.display_html(html3) #hide","category":"page"},{"location":"advanced-features/#Nested-Contexts","page":"Advanced Features","title":"Nested Contexts","text":"","category":"section"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"Context values can be overridden in nested scopes:","category":"page"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n@component function theme_display()\n    theme = @get_context(:theme, \"light\")\n    mode = @get_context(:mode, \"normal\")\n    @div {class = \"theme-info\"} begin\n        @span \"Theme: $theme, Mode: $mode\"\n    end\nend\n\n@deftag macro theme_display end\n\nhtml = @render @context {theme = \"dark\", mode = \"compact\"} begin\n    @div begin\n        @h2 \"Outer context\"\n        @theme_display  # Shows: dark, compact\n\n        @context {theme = \"light\"} begin  # Override theme only\n            @h2 \"Inner context\"\n            @theme_display  # Shows: light, compact\n        end\n\n        @h2 \"Back to outer\"\n        @theme_display  # Shows: dark, compact\n    end\nend\n\nMain.display_html(html) #hide","category":"page"},{"location":"advanced-features/#Context-and-Slots","page":"Advanced Features","title":"Context and Slots","text":"","category":"section"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"Context flows naturally through slots with dynamic scoping - slots see the context from where they execute:","category":"page"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n@component function card_with_theme(; title)\n    @context {card_theme = \"elevated\"} begin\n        @div {class = \"card\"} begin\n            @h3 $title\n            @div {class = \"card-body\"} begin\n                @__slot__  # Slot executes with card's context\n            end\n        end\n    end\nend\n\n@deftag macro card_with_theme end\n\n@component function theme_aware_content()\n    outer = @get_context(:page_theme, \"none\")\n    inner = @get_context(:card_theme, \"none\")\n    @p \"Page theme: $outer, Card theme: $inner\"\nend\n\n@deftag macro theme_aware_content end\n\nhtml = @render @context {page_theme = \"bright\"} begin\n    @card_with_theme {title = \"My Card\"} begin\n        @theme_aware_content  # Sees both contexts!\n    end\nend\n\nMain.display_html(html) #hide","category":"page"},{"location":"advanced-features/#Common-Use-Cases-2","page":"Advanced Features","title":"Common Use Cases","text":"","category":"section"},{"location":"advanced-features/#Theme-Provider","page":"Advanced Features","title":"Theme Provider","text":"","category":"section"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# Theme configuration\nconst THEMES = Dict(\n    :light => (bg = \"white\", fg = \"black\", primary = \"#007bff\"),\n    :dark => (bg = \"#1a1a1a\", fg = \"white\", primary = \"#66b3ff\")\n)\n\n@component function theme_provider(; theme = :light)\n    theme_config = THEMES[theme]\n    @context {theme = theme_config} begin\n        @div {style = \"background: $(theme_config.bg); color: $(theme_config.fg)\"} begin\n            @__slot__\n        end\n    end\nend\n\n@deftag macro theme_provider end\n\n@component function primary_button(; text)\n    theme = @get_context(:theme, THEMES[:light])\n    @button {\n        style = \"background: $(theme.primary); color: white; padding: 0.5rem 1rem; border: none; border-radius: 4px\"\n    } $text\nend\n\n@deftag macro primary_button end\n\n# Usage\nhtml = @render @div begin\n    @theme_provider {theme = :light} begin\n        @h2 \"Light Theme\"\n        @primary_button {text = \"Light Button\"}\n    end\n\n    @theme_provider {theme = :dark} begin\n        @h2 \"Dark Theme\"  \n        @primary_button {text = \"Dark Button\"}\n    end\nend\n\nMain.display_html(html) #hide","category":"page"},{"location":"advanced-features/#User-Authentication-Context","page":"Advanced Features","title":"User Authentication Context","text":"","category":"section"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# Mock user type\nstruct User\n    name::String\n    role::Symbol\n    permissions::Set{Symbol}\nend\n\n@component function auth_provider(; user = nothing)\n    @context {current_user = user} begin\n        @__slot__\n    end\nend\n\n@deftag macro auth_provider end\n\n@component function protected_content(; required_permission = nothing)\n    user = @get_context(:current_user, nothing)\n\n    if isnothing(user)\n        @div {class = \"error\"} \"Please log in to view this content\"\n    elseif !isnothing(required_permission) && !(required_permission in user.permissions)\n        @div {class = \"error\"} \"You don't have permission to view this\"\n    else\n        @div {class = \"protected\"} begin\n            @__slot__\n        end\n    end\nend\n\n@deftag macro protected_content end\n\n@component function user_info()\n    user = @get_context(:current_user, nothing)\n    if !isnothing(user)\n        @span \"Logged in as: $(user.name) ($(user.role))\"\n    else\n        @span \"Not logged in\"\n    end\nend\n\n@deftag macro user_info end\n\n# Example usage\nadmin_user = User(\"Alice\", :admin, Set([:read, :write, :delete]))\n\nhtml = @render @auth_provider {user = admin_user} begin\n    @div begin\n        @p @user_info\n\n        @protected_content begin\n            @p \"This content is visible to logged-in users\"\n        end\n\n        @protected_content {required_permission = :delete} begin\n            @p \"This content requires delete permission\"\n        end\n    end\nend\n\nMain.display_html(html) #hide","category":"page"},{"location":"advanced-features/#Feature-Flags","page":"Advanced Features","title":"Feature Flags","text":"","category":"section"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n@component function feature_provider(; features = Set{Symbol}())\n    @context {enabled_features = features} begin\n        @__slot__\n    end\nend\n\n@deftag macro feature_provider end\n\n@component function feature(; name::Symbol, fallback = nothing)\n    features = @get_context(:enabled_features, Set{Symbol}())\n\n    if name in features\n        @__slot__\n    elseif !isnothing(fallback)\n        @<fallback\n    end\n    # Otherwise render nothing\nend\n\n@deftag macro feature end\n\n# Beta component shown only when beta feature is enabled\n@component function beta_banner()\n    @div {class = \"beta-banner\", style = \"background: yellow; padding: 0.5rem\"} begin\n        \"🚀 Beta Feature: Try our new dashboard!\"\n    end\nend\n\n@deftag macro beta_banner end\n\n@component function legacy_banner()\n    @div {class = \"legacy-banner\"} \"Classic dashboard\"\nend\n\n@deftag macro legacy_banner end\n\n# Usage\nhtml = @render @div begin\n    @h2 \"Production User\"\n    @feature_provider {features = Set([:stable_feature])} begin\n        @feature {name = :beta_dashboard, fallback = legacy_banner} begin\n            @beta_banner\n        end\n    end\n\n    @h2 \"Beta User\"\n    @feature_provider {features = Set([:stable_feature, :beta_dashboard])} begin\n        @feature {name = :beta_dashboard, fallback = legacy_banner} begin\n            @beta_banner\n        end\n    end\nend\n\nMain.display_html(html) #hide","category":"page"},{"location":"advanced-features/#Complex-Context-Patterns","page":"Advanced Features","title":"Complex Context Patterns","text":"","category":"section"},{"location":"advanced-features/#Multiple-Context-Values","page":"Advanced Features","title":"Multiple Context Values","text":"","category":"section"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n@component function app_providers(; user, theme, locale)\n    @context {user = user, theme = theme, locale = locale} begin\n        @__slot__\n    end\nend\n\n@deftag macro app_providers end\n\n@component function locale_aware_date(; date)\n    locale = @get_context(:locale, \"en-US\")\n    # Simplified formatting\n    formatted = locale == \"en-US\" ? \"MM/DD/YYYY\" : \"DD/MM/YYYY\"\n    @span \"$date ($formatted)\"\nend\n\n@deftag macro locale_aware_date end\n\nhtml = @render @app_providers {\n    user = \"John\",\n    theme = \"dark\",\n    locale = \"en-GB\"\n} begin\n    @p \"User: \" $(@get_context(:user))\n    @p \"Theme: \" $(@get_context(:theme))\n    @p \"Date format: \" @locale_aware_date {date = \"2024-01-15\"}\nend\n\nMain.display_html(html) #hide","category":"page"},{"location":"advanced-features/#Context-with-Dynamic-Values","page":"Advanced Features","title":"Context with Dynamic Values","text":"","category":"section"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# Shopping cart context\n@component function cart_provider(; initial_items = [])\n    total = sum(item.price * item.quantity for item in initial_items; init = 0.0)\n\n    @context {cart_items = initial_items, cart_total = total} begin\n        @__slot__\n    end\nend\n\n@deftag macro cart_provider end\n\n@component function cart_summary()\n    items = @get_context(:cart_items, [])\n    total = @get_context(:cart_total, 0.0)\n\n    @div {class = \"cart-summary\"} begin\n        @p \"Items in cart: $(length(items))\"\n        @p \"Total: \\$$(round(total, digits=2))\"\n    end\nend\n\n@deftag macro cart_summary end\n\n# Usage\ncart_items = [\n    (name = \"Book\", price = 15.99, quantity = 2),\n    (name = \"Pen\", price = 1.99, quantity = 5)\n]\n\nhtml = @render @cart_provider {initial_items = cart_items} begin\n    @h2 \"Shopping Cart\"\n    @cart_summary\nend\n\nMain.display_html(html) #hide","category":"page"},{"location":"advanced-features/#Best-Practices-2","page":"Advanced Features","title":"Best Practices","text":"","category":"section"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"Use Context for Cross-Cutting Concerns\nThemes, authentication, localization\nFeature flags and configuration\nShared state that many components need\nProvide Sensible Defaults\ntheme = @get_context(:theme, \"light\")  # Always provide defaults\nKeep Context Values Immutable\nContext should be read-only data\nFor mutable state, pass update functions as context\nDocument Context Dependencies\n# This component requires :user and :theme context\n@component function authenticated_view()\n    # ...\nend\nAvoid Overusing Context\nDirect props are clearer for parent-child communication\nContext is best for deeply nested components","category":"page"},{"location":"advanced-features/#Integration-with-Streaming","page":"Advanced Features","title":"Integration with Streaming","text":"","category":"section"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"Context works seamlessly with streaming renders:","category":"page"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n@component function streaming_with_context(; items)\n    @context {render_mode = \"streaming\"} begin\n        @ul begin\n            for (i, item) in enumerate(items)\n                @li begin\n                    mode = @get_context(:render_mode, \"normal\")\n                    \"$item (rendered in $mode mode)\"\n                end\n            end\n        end\n    end\nend\n\n# Works with StreamingRender\n# See Rendering & Performance guide for details","category":"page"},{"location":"advanced-features/#Summary","page":"Advanced Features","title":"Summary","text":"","category":"section"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"Advanced features in HypertextTemplates.jl enable:","category":"page"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"Dependency management with @__once__\nCustom DSLs via @deftag\nDynamic rendering with @<\nContext propagation with @context and @get_context\nSophisticated patterns like render props and theme providers","category":"page"},{"location":"advanced-features/","page":"Advanced Features","title":"Advanced Features","text":"These features combine to support complex application architectures while maintaining the simplicity and performance that makes HypertextTemplates.jl powerful.","category":"page"},{"location":"api-internal/#Internal-API","page":"Internal API","title":"Internal API","text":"","category":"section"},{"location":"api-internal/","page":"Internal API","title":"Internal API","text":"The internal API includes implementation details, helper functions, and low-level utilities that power HypertextTemplates but are not intended for direct use. These APIs may change between minor versions without notice as we optimize performance or refactor internals. While these functions are documented for contributors and those needing to understand the implementation, you should avoid depending on them in production code. If you find yourself needing internal functionality, please open an issue - it might indicate a gap in the public API that we should address.","category":"page"},{"location":"api-internal/#HypertextTemplates.MicroBatchWriter","page":"Internal API","title":"HypertextTemplates.MicroBatchWriter","text":"MicroBatchWriter <: IO\n\nInternal writer that implements the micro-batching strategy. It acts as an intelligent buffer between the rendering code and the Channel, making decisions about when to send data based on size and time thresholds.\n\nThe writer follows these rules:\n\nLarge writes (≥ immediate_threshold) bypass buffering entirely\nSmall writes accumulate in a buffer until a threshold is reached\nA timer ensures buffered data is flushed within maxbuffertime\n\n\n\n\n\n","category":"type"},{"location":"api-internal/#HypertextTemplates.TemplateFileLookup-Tuple{Any}","page":"Internal API","title":"HypertextTemplates.TemplateFileLookup","text":"TemplateFileLookup(handler)\n\nThis is a developer tool that can be added to an HTTP handler stack to allow the user to open the template file in their default editor by holding down the Ctrl key and clicking on the rendered template. This is useful for debugging navigating the template files instead of having to manually search through a codebase for the template file that renders a given item within a page.\n\nHTTP.serve(router |> TemplateFileLookup, host, port)\n\nAlways add the TemplateFileLookup handler after the other handlers, since it needs to inject a script into the response to listen for clicks on the rendered template.\n\n\n\n\n\n","category":"method"},{"location":"api-internal/#HypertextTemplates.create_flush_timer-Tuple{HypertextTemplates.MicroBatchWriter}","page":"Internal API","title":"HypertextTemplates.create_flush_timer","text":"create_flush_timer(writer::MicroBatchWriter)\n\nCreate a Timer that periodically flushes the writer's buffer if data is present and enough time has passed since the last write.\n\nThe timer is crucial for bounded latency - without it, small writes that don't trigger size-based flushing could sit in the buffer indefinitely. This ensures that even a single character written will appear within maxbuffertime.\n\n\n\n\n\n","category":"method"},{"location":"api-internal/#HypertextTemplates.escape_attr-Tuple{IO, AbstractString}","page":"Internal API","title":"HypertextTemplates.escape_attr","text":"escape_attr(io::IO, value)\n\nWrite HTML attribute-escaped content to an IO stream.\n\nThis function escapes characters that have special meaning in HTML attributes, providing more comprehensive escaping than escape_html. It is automatically called for all attribute values unless wrapped in SafeString.\n\nEscaped characters\n\n& → &amp;\n< → &lt;\n> → &gt;\n\" → &quot;\n' → &#39;\n\nArguments\n\nio::IO: The output stream to write to\nvalue: The attribute value to escape (converted to string if not already)\n\nnote: Note\nThis function provides defense-in-depth but cannot prevent all attribute-based attacks. Always validate URLs and other sensitive attribute values at the application level.\n\nSee also: escape_html, SafeString\n\n\n\n\n\n","category":"method"},{"location":"api-internal/#HypertextTemplates.escape_html-Tuple{IO, AbstractString}","page":"Internal API","title":"HypertextTemplates.escape_html","text":"escape_html(io::IO, value)\n\nWrite HTML-escaped content to an IO stream.\n\nThis function escapes HTML special characters to prevent XSS attacks when rendering user content. It is automatically called by HypertextTemplates for all string content unless wrapped in SafeString.\n\nEscaped characters\n\n& → &amp;\n< → &lt;\n> → &gt;\n\nArguments\n\nio::IO: The output stream to write to\nvalue: The content to escape (converted to string if not already)\n\nExamples\n\njulia> using HypertextTemplates\n\njulia> io = IOBuffer();\n\njulia> HypertextTemplates.escape_html(io, \"Hello <script>alert('XSS')</script>\")\n\njulia> String(take!(io))\n\"Hello &lt;script&gt;alert('XSS')&lt;/script&gt;\"\n\njulia> # SafeString content is not escaped\n       io = IOBuffer();\n\njulia> HypertextTemplates.escape_html(io, SafeString(\"<b>Bold</b>\"))\n\njulia> String(take!(io))\n\"<b>Bold</b>\"\n\nSee also: escape_attr, SafeString, @esc_str\n\n\n\n\n\n","category":"method"},{"location":"api-internal/#HypertextTemplates.render-Tuple{Function}","page":"Internal API","title":"HypertextTemplates.render","text":"render([dst], component; properties...)\n\nRender the component with the given properties to the optional dst. This is the functional version of @render.\n\n\n\n\n\n","category":"method"},{"location":"library-components/#Library-Components","page":"Library Components","title":"Library Components","text":"","category":"section"},{"location":"library-components/","page":"Library Components","title":"Library Components","text":"The HypertextTemplates.Library module provides a comprehensive set of pre-built UI components styled with Tailwind CSS v4. These components follow modern design principles with a fresh, contemporary aesthetic and include dark mode support by default.","category":"page"},{"location":"library-components/#Getting-Started","page":"Library Components","title":"Getting Started","text":"","category":"section"},{"location":"library-components/","page":"Library Components","title":"Library Components","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\nusing HypertextTemplates.Library","category":"page"},{"location":"library-components/","page":"Library Components","title":"Library Components","text":"All component props and detailed API documentation can be found in the Library Components API.","category":"page"},{"location":"library-components/#Interactive-Components","page":"Library Components","title":"Interactive Components","text":"","category":"section"},{"location":"library-components/","page":"Library Components","title":"Library Components","text":"Some components in the library include interactive features powered by Alpine.js. These components work without JavaScript but provide enhanced functionality when Alpine.js is available.","category":"page"},{"location":"library-components/#Components-with-Alpine.js-Integration","page":"Library Components","title":"Components with Alpine.js Integration","text":"","category":"section"},{"location":"library-components/","page":"Library Components","title":"Library Components","text":"Alert (dismissible=true) - Adds smooth dismiss animations with fade-out transitions\nTabs - Interactive tab switching with content panels\nSelect (coming soon) - Enhanced dropdown with search functionality\nTable (coming soon) - Client-side sorting when sortable=true","category":"page"},{"location":"library-components/#Including-Alpine.js","page":"Library Components","title":"Including Alpine.js","text":"","category":"section"},{"location":"library-components/","page":"Library Components","title":"Library Components","text":"To enable interactive features, include Alpine.js in your page:","category":"page"},{"location":"library-components/","page":"Library Components","title":"Library Components","text":"@script {defer=true, src=\"https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js\"}","category":"page"},{"location":"library-components/#Progressive-Enhancement","page":"Library Components","title":"Progressive Enhancement","text":"","category":"section"},{"location":"library-components/","page":"Library Components","title":"Library Components","text":"All interactive components follow progressive enhancement principles:","category":"page"},{"location":"library-components/","page":"Library Components","title":"Library Components","text":"Components render and display correctly without JavaScript\nInteractive features enhance the experience when Alpine.js is loaded\nNo functionality is broken if JavaScript is disabled","category":"page"},{"location":"library-components/#Live-Examples","page":"Library Components","title":"Live Examples","text":"","category":"section"},{"location":"library-components/","page":"Library Components","title":"Library Components","text":"Explore complete, interactive examples organized by category:","category":"page"},{"location":"library-components/","page":"Library Components","title":"Library Components","text":"Layout Components - Container, Stack, and Grid components\nTypography Components - Heading, Text, and Link components\nForm Components - Input, Select, Textarea, and form controls\nFeedback Components - Alert, Progress, Spinner, and Badge components\nNavigation Components - Breadcrumb, Tabs, and Pagination components\nTable & List Components - Table and List components\nUtility Components - Divider, Avatar, and Icon components\nIcon Gallery - Complete collection of available icons\nModern Styling - Glass morphism, gradients, and modern effects\nAdvanced Components - Complex component patterns and compositions\nDark Mode - Dark mode showcase and theming\nDropdown Menu - Dropdown menus with submenus\nComplete Application - Full dashboard application example","category":"page"},{"location":"library-components/#Modern-Design-System","page":"Library Components","title":"Modern Design System","text":"","category":"section"},{"location":"library-components/#Design-Philosophy","page":"Library Components","title":"Design Philosophy","text":"","category":"section"},{"location":"library-components/","page":"Library Components","title":"Library Components","text":"The component library embraces modern web design trends while maintaining usability and accessibility. Key principles include:","category":"page"},{"location":"library-components/","page":"Library Components","title":"Library Components","text":"Subtle depth through shadows and glassmorphism effects\nVibrant but balanced color palette that works in both light and dark modes\nSmooth interactions with carefully tuned transitions\nConsistent spacing using a harmonious scale\nAccessibility first with proper ARIA attributes and focus states","category":"page"},{"location":"library-components/#Visual-Language","page":"Library Components","title":"Visual Language","text":"","category":"section"},{"location":"library-components/#Color-System","page":"Library Components","title":"Color System","text":"","category":"section"},{"location":"library-components/","page":"Library Components","title":"Library Components","text":"The library uses a carefully selected palette optimized for both light and dark modes:","category":"page"},{"location":"library-components/","page":"Library Components","title":"Library Components","text":"Primary: Blue tones for main actions and highlights\nSecondary: Purple for complementary elements\nSuccess: Emerald for positive feedback\nWarning: Amber for cautions\nDanger: Rose for errors and destructive actions","category":"page"},{"location":"library-components/","page":"Library Components","title":"Library Components","text":"Each color adapts automatically in dark mode to maintain proper contrast ratios.","category":"page"},{"location":"library-components/#Spacing-and-Layout","page":"Library Components","title":"Spacing & Layout","text":"","category":"section"},{"location":"library-components/","page":"Library Components","title":"Library Components","text":"Components use a consistent spacing scale (xs, sm, base, lg, xl) that creates visual rhythm and hierarchy. The system is based on Tailwind's spacing scale for familiarity and consistency.","category":"page"},{"location":"library-components/#Border-Radius","page":"Library Components","title":"Border Radius","text":"","category":"section"},{"location":"library-components/","page":"Library Components","title":"Library Components","text":"Modern, softer corners are used throughout:","category":"page"},{"location":"library-components/","page":"Library Components","title":"Library Components","text":"sm: Subtle rounding for inline elements\nbase: Standard rounding for inputs and small cards\nlg: Default for cards and containers\nxl & 2xl: Emphasized rounding for special elements\nfull: Perfect circles for avatars and icon buttons","category":"page"},{"location":"library-components/#Modern-Features","page":"Library Components","title":"Modern Features","text":"","category":"section"},{"location":"library-components/#Glassmorphism","page":"Library Components","title":"Glassmorphism","text":"","category":"section"},{"location":"library-components/","page":"Library Components","title":"Library Components","text":"Create sophisticated layered interfaces with backdrop blur effects:","category":"page"},{"location":"library-components/","page":"Library Components","title":"Library Components","text":"@Card {variant=:glass} begin\n    # Content appears to float above the background\nend","category":"page"},{"location":"library-components/","page":"Library Components","title":"Library Components","text":"Glass effects work best over gradients or images and automatically adjust opacity for readability.","category":"page"},{"location":"library-components/#Gradients","page":"Library Components","title":"Gradients","text":"","category":"section"},{"location":"library-components/","page":"Library Components","title":"Library Components","text":"Beautiful gradients are integrated throughout the component system:","category":"page"},{"location":"library-components/","page":"Library Components","title":"Library Components","text":"Text gradients for eye-catching headings\nButton gradients for premium actions\nBackground gradients for cards and sections\nProgress bar gradients for visual interest","category":"page"},{"location":"library-components/#Animations","page":"Library Components","title":"Animations","text":"","category":"section"},{"location":"library-components/","page":"Library Components","title":"Library Components","text":"Subtle animations enhance user experience without being distracting:","category":"page"},{"location":"library-components/","page":"Library Components","title":"Library Components","text":"Hover effects: Scale transforms and shadow changes\nLoading states: Animated progress bars and spinners\nTransitions: Smooth 300ms transitions on all interactive elements\nPulse effects: Attention-grabbing animations for badges and alerts","category":"page"},{"location":"library-components/#Component-Patterns","page":"Library Components","title":"Component Patterns","text":"","category":"section"},{"location":"library-components/#Composition-Over-Configuration","page":"Library Components","title":"Composition Over Configuration","text":"","category":"section"},{"location":"library-components/","page":"Library Components","title":"Library Components","text":"Components are designed to work together naturally:","category":"page"},{"location":"library-components/","page":"Library Components","title":"Library Components","text":"@Card begin\n    @Stack {gap=4} begin\n        @Heading {level=2} \"Title\"\n        @Text \"Description\"\n        @Button {variant=:primary} \"Action\"\n    end\nend","category":"page"},{"location":"library-components/#Consistent-Props","page":"Library Components","title":"Consistent Props","text":"","category":"section"},{"location":"library-components/","page":"Library Components","title":"Library Components","text":"Common props work the same across all components:","category":"page"},{"location":"library-components/","page":"Library Components","title":"Library Components","text":"Size: :xs, :sm, :base, :lg, :xl\nVariant: Component-specific style variations\nColor/State: Semantic color system\nSpacing: Padding and gap values","category":"page"},{"location":"library-components/#Attribute-Spreading","page":"Library Components","title":"Attribute Spreading","text":"","category":"section"},{"location":"library-components/","page":"Library Components","title":"Library Components","text":"All components accept additional attributes via attrs...:","category":"page"},{"location":"library-components/","page":"Library Components","title":"Library Components","text":"@Button {\n    variant=:primary,\n    class=\"custom-class\",\n    \"data-testid\"=\"submit-button\",\n    id=\"main-cta\"\n} \"Click Me\"","category":"page"},{"location":"library-components/#Dark-Mode","page":"Library Components","title":"Dark Mode","text":"","category":"section"},{"location":"library-components/","page":"Library Components","title":"Library Components","text":"Dark mode is built into every component with carefully tuned colors and contrasts. Components automatically adapt based on the dark class on a parent element.","category":"page"},{"location":"library-components/","page":"Library Components","title":"Library Components","text":"Key considerations:","category":"page"},{"location":"library-components/","page":"Library Components","title":"Library Components","text":"Adjusted colors maintain readability\nReduced contrast prevents eye strain\nInverted shadows for proper depth perception\nSpecial handling for glassmorphism effects","category":"page"},{"location":"library-components/#Accessibility","page":"Library Components","title":"Accessibility","text":"","category":"section"},{"location":"library-components/","page":"Library Components","title":"Library Components","text":"All library components include:","category":"page"},{"location":"library-components/","page":"Library Components","title":"Library Components","text":"Semantic HTML elements\nARIA attributes where appropriate\nKeyboard navigation support\nFocus indicators with proper contrast\nScreen reader friendly content","category":"page"},{"location":"library-components/#Tailwind-CSS-Integration","page":"Library Components","title":"Tailwind CSS Integration","text":"","category":"section"},{"location":"library-components/","page":"Library Components","title":"Library Components","text":"The library requires Tailwind CSS v4 with default configuration. Components use:","category":"page"},{"location":"library-components/","page":"Library Components","title":"Library Components","text":"Utility classes for all styling\nCSS variables for dynamic values\nContainer queries for responsive behavior\nModern CSS features like backdrop-filter","category":"page"},{"location":"library-components/#Best-Practices","page":"Library Components","title":"Best Practices","text":"","category":"section"},{"location":"library-components/#Performance","page":"Library Components","title":"Performance","text":"","category":"section"},{"location":"library-components/","page":"Library Components","title":"Library Components","text":"Components render directly to IO without intermediate DOM\nUse StreamingRender for large component trees\nLeverage component composition to avoid deep nesting","category":"page"},{"location":"library-components/#Maintainability","page":"Library Components","title":"Maintainability","text":"","category":"section"},{"location":"library-components/","page":"Library Components","title":"Library Components","text":"Keep component trees shallow when possible\nUse semantic component names\nExtract repeated patterns into custom components\nFollow the library's naming conventions","category":"page"},{"location":"library-components/#Styling","page":"Library Components","title":"Styling","text":"","category":"section"},{"location":"library-components/","page":"Library Components","title":"Library Components","text":"Prefer component props over custom classes\nUse the design system's spacing scale\nMaintain consistency with the existing visual language\nTest in both light and dark modes","category":"page"},{"location":"library-components/#Extending-the-Library","page":"Library Components","title":"Extending the Library","text":"","category":"section"},{"location":"library-components/","page":"Library Components","title":"Library Components","text":"Create custom components that integrate seamlessly:","category":"page"},{"location":"library-components/","page":"Library Components","title":"Library Components","text":"@component function CustomCard(; title, attrs...)\n    @Card {variant=:gradient, attrs...} begin\n        @Stack {gap=3} begin\n            @Heading {level=3, gradient=true} title\n            @__slot__()\n        end\n    end\nend\n@deftag macro CustomCard end","category":"page"},{"location":"library-components/","page":"Library Components","title":"Library Components","text":"This approach ensures your components:","category":"page"},{"location":"library-components/","page":"Library Components","title":"Library Components","text":"Inherit the library's styling\nSupport all standard features\nMaintain consistency with built-in components","category":"page"},{"location":"markdown-integration/#Markdown-Integration","page":"Markdown Integration","title":"Markdown Integration","text":"","category":"section"},{"location":"markdown-integration/","page":"Markdown Integration","title":"Markdown Integration","text":"HypertextTemplates.jl provides seamless integration with CommonMark.jl, allowing you to create components from Markdown files and mix Markdown content with your templates.","category":"page"},{"location":"markdown-integration/#Prerequisites","page":"Markdown Integration","title":"Prerequisites","text":"","category":"section"},{"location":"markdown-integration/","page":"Markdown Integration","title":"Markdown Integration","text":"The Markdown integration features are provided through Julia's package extension system, which means they become available automatically when CommonMark.jl is present in your environment. This design keeps HypertextTemplates lightweight for users who don't need Markdown support while providing seamless integration for those who do. Simply adding CommonMark.jl to your project enables all the Markdown-related functionality described in this guide.","category":"page"},{"location":"markdown-integration/","page":"Markdown Integration","title":"Markdown Integration","text":"using Pkg\nPkg.add(\"CommonMark\")","category":"page"},{"location":"markdown-integration/","page":"Markdown Integration","title":"Markdown Integration","text":"The integration is provided through Julia's package extension system, so features are automatically available when CommonMark.jl is loaded.","category":"page"},{"location":"markdown-integration/#Inline-Markdown-with-CommonMark","page":"Markdown Integration","title":"Inline Markdown with CommonMark","text":"","category":"section"},{"location":"markdown-integration/#Basic-Usage","page":"Markdown Integration","title":"Basic Usage","text":"","category":"section"},{"location":"markdown-integration/","page":"Markdown Integration","title":"Markdown Integration","text":"CommonMark.jl's cm string macro allows you to embed Markdown content directly within your HypertextTemplates components. The macro processes the Markdown at compile time and converts it to HTML, which is then wrapped in a SafeString to preserve the formatting. This approach combines the simplicity of Markdown for content authoring with the power of HypertextTemplates for structure and interactivity, making it ideal for documentation sites, blogs, or any content-heavy application.","category":"page"},{"location":"markdown-integration/","page":"Markdown Integration","title":"Markdown Integration","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\nusing CommonMark\n\n@component function article_with_markdown()\n    @article {class = \"prose\"} begin\n        @text CommonMark.cm\"\"\"\n        # Markdown Heading\n        \n        This is a paragraph with **bold** and *italic* text.\n        \n        - List item 1\n        - List item 2\n        \n        > A blockquote\n        \n        ```julia\n        # Code block\n        println(\"Hello from Markdown!\")\n        ```\n        \"\"\"\n    end\nend\n\n# The Markdown is converted to HTML and rendered\nhtml = @render @article_with_markdown","category":"page"},{"location":"markdown-integration/#Interpolation-in-Markdown","page":"Markdown Integration","title":"Interpolation in Markdown","text":"","category":"section"},{"location":"markdown-integration/","page":"Markdown Integration","title":"Markdown Integration","text":"CommonMark.jl supports Julia interpolation:","category":"page"},{"location":"markdown-integration/","page":"Markdown Integration","title":"Markdown Integration","text":"@component function dynamic_markdown(; user_name, item_count)\n    @div {class = \"content\"} begin\n        @text CommonMark.cm\"\"\"\n        # Welcome, $(user_name)!\n        \n        You have **$(item_count)** items in your cart.\n        \n        $(item_count > 0 ? \"Ready to checkout?\" : \"Start shopping!\")\n        \"\"\"\n    end\nend\n\n@render @dynamic_markdown {user_name = \"Alice\", item_count = 3}","category":"page"},{"location":"markdown-integration/#Markdown-File-Components","page":"Markdown Integration","title":"Markdown File Components","text":"","category":"section"},{"location":"markdown-integration/","page":"Markdown Integration","title":"Markdown Integration","text":"The @cm_component macro creates components from Markdown files.","category":"page"},{"location":"markdown-integration/#Basic-File-Component","page":"Markdown Integration","title":"Basic File Component","text":"","category":"section"},{"location":"markdown-integration/","page":"Markdown Integration","title":"Markdown Integration","text":"The @cm_component macro transforms Markdown files into reusable HypertextTemplates components. This powerful feature allows you to maintain content in Markdown format while seamlessly integrating it into your component-based architecture. The macro reads the specified Markdown file, processes it with CommonMark, and creates a component that can be used just like any other HypertextTemplates component. This is particularly useful for static content pages, documentation, or any scenario where non-technical users need to contribute content.","category":"page"},{"location":"markdown-integration/","page":"Markdown Integration","title":"Markdown Integration","text":"# Create a component from a Markdown file\n@cm_component about_page() = \"content/about.md\"\n@deftag macro about_page end\n\n# Use it like any other component\n@render @div {class = \"page\"} begin\n    @about_page\nend","category":"page"},{"location":"markdown-integration/#Components-with-Props","page":"Markdown Integration","title":"Components with Props","text":"","category":"section"},{"location":"markdown-integration/","page":"Markdown Integration","title":"Markdown Integration","text":"Pass props to Markdown files for dynamic content:","category":"page"},{"location":"markdown-integration/","page":"Markdown Integration","title":"Markdown Integration","text":"# Define component with props\n@cm_component product_description(; name, price) = \"templates/product.md\"\n@deftag macro product_description end\n\n# product.md content:\n# # $(name)\n#\n# **Price:** $$(price)\n\n# Use the component\n@render @product_description {\n    name = \"Premium Widget\",\n    price = 99.99,\n}","category":"page"},{"location":"markdown-integration/#Organizing-Markdown-Components","page":"Markdown Integration","title":"Organizing Markdown Components","text":"","category":"section"},{"location":"markdown-integration/","page":"Markdown Integration","title":"Markdown Integration","text":"# Use relative paths from your module\n@cm_component header() = joinpath(@__DIR__, \"partials\", \"header.md\")\n@cm_component footer() = joinpath(@__DIR__, \"partials\", \"footer.md\")\n\n# Or organize in a module\nmodule MarkdownComponents\n    using HypertextTemplates\n\n    # Define all Markdown components\n    @cm_component home() = \"content/home.md\"\n    @cm_component about() = \"content/about.md\"\n    @cm_component contact() = \"content/contact.md\"\n\n    # Export tags if you want to use without qualification\n    @deftag export macro home end\n    @deftag export macro about end\n    @deftag export macro contact end\nend\n\n# Use with module qualification\n@render @MarkdownComponents.home\n\n# Or if exported\nusing .MarkdownComponents\n@render @home","category":"page"},{"location":"markdown-integration/#Live-Reloading-with-Revise.jl","page":"Markdown Integration","title":"Live Reloading with Revise.jl","text":"","category":"section"},{"location":"markdown-integration/","page":"Markdown Integration","title":"Markdown Integration","text":"When Revise.jl is available, Markdown file components automatically reload when the file changes.","category":"page"},{"location":"markdown-integration/#Setup","page":"Markdown Integration","title":"Setup","text":"","category":"section"},{"location":"markdown-integration/","page":"Markdown Integration","title":"Markdown Integration","text":"using Revise\nusing HypertextTemplates\nusing CommonMark\n\n# Define a Markdown component\n@cm_component live_content() = \"content/live.md\"\n\n# Edit content/live.md in your editor\n# Changes are reflected immediately when you re-render\n@render @live_content","category":"page"},{"location":"markdown-integration/#Advanced-Markdown-Patterns","page":"Markdown Integration","title":"Advanced Markdown Patterns","text":"","category":"section"},{"location":"markdown-integration/#Markdown-Layout-Components","page":"Markdown Integration","title":"Markdown Layout Components","text":"","category":"section"},{"location":"markdown-integration/","page":"Markdown Integration","title":"Markdown Integration","text":"Create layout components that accept Markdown content:","category":"page"},{"location":"markdown-integration/","page":"Markdown Integration","title":"Markdown Integration","text":"@component function markdown_layout(; title, markdown_file)\n    @html begin\n        @head begin\n            @title $title\n            @style \"\"\"\n            .prose { max-width: 65ch; margin: 0 auto; }\n            .prose h1 { color: #333; }\n            .prose code { background: #f4f4f4; padding: 0.2em; }\n            \"\"\"\n        end\n        @body begin\n            @div {class = \"prose\"} begin\n                @<markdown_file\n            end\n        end\n    end\nend\n\n# Use with Markdown components\n@cm_component intro() = \"intro.md\"\n@render @markdown_layout {title = \"Introduction\", markdown_file = intro}","category":"page"},{"location":"markdown-integration/#Mixed-Content","page":"Markdown Integration","title":"Mixed Content","text":"","category":"section"},{"location":"markdown-integration/","page":"Markdown Integration","title":"Markdown Integration","text":"Combine Markdown with HTML components:","category":"page"},{"location":"markdown-integration/","page":"Markdown Integration","title":"Markdown Integration","text":"@component function blog_post(; meta, content_file)\n    @article begin\n        @header begin\n            @h1 $meta.title\n            @p {class = \"meta\"} begin\n                \"By \" @strong $meta.author \" on \" @time $meta.date\n            end\n        end\n\n        @div {class = \"content prose\"} begin\n            @<content_file  # Markdown component\n        end\n\n        @footer begin\n            @nav begin\n                if !isnothing(meta.prev)\n                    @a {href = meta.prev.url} \"← \" $meta.prev.title\n                end\n                if !isnothing(meta.next)\n                    @a {href = meta.next.url} $meta.next.title \" →\"\n                end\n            end\n        end\n    end\nend","category":"page"},{"location":"markdown-integration/#Dynamic-Markdown-Loading","page":"Markdown Integration","title":"Dynamic Markdown Loading","text":"","category":"section"},{"location":"markdown-integration/","page":"Markdown Integration","title":"Markdown Integration","text":"Load Markdown content dynamically:","category":"page"},{"location":"markdown-integration/","page":"Markdown Integration","title":"Markdown Integration","text":"@component function dynamic_docs(; path)\n    # Validate path for security\n    safe_path = validate_doc_path(path)\n\n    if isfile(safe_path)\n        # Read and render Markdown\n        content = read(safe_path, String)\n        html = CommonMark.html(content)\n        @div {class = \"documentation\"} $(SafeString(html))\n    else\n        @div {class = \"error\"} begin\n            @h1 \"404 - Page Not Found\"\n            @p \"The requested documentation page does not exist.\"\n        end\n    end\nend\n\nfunction validate_doc_path(path)\n    # Security: Ensure path is within docs directory\n    cleaned = normpath(joinpath(\"docs\", path))\n    if startswith(cleaned, \"docs/\") && endswith(cleaned, \".md\")\n        return cleaned\n    else\n        return \"\"\n    end\nend","category":"page"},{"location":"markdown-integration/#CommonMark-Configuration","page":"Markdown Integration","title":"CommonMark Configuration","text":"","category":"section"},{"location":"markdown-integration/#Custom-Rendering","page":"Markdown Integration","title":"Custom Rendering","text":"","category":"section"},{"location":"markdown-integration/","page":"Markdown Integration","title":"Markdown Integration","text":"Configure CommonMark parsing and rendering:","category":"page"},{"location":"markdown-integration/","page":"Markdown Integration","title":"Markdown Integration","text":"using CommonMark\n\n# Create custom parser with extensions\nparser = Parser()\nenable!(parser, DollarMathRule())\nenable!(parser, TableRule())\nenable!(parser, FootnoteRule())\n\n@component function enhanced_markdown(; content)\n    # Parse with custom settings\n    ast = parser(content)\n\n    # Render to HTML\n    html = html(ast)\n\n    @div {class = \"enhanced-content\"} $(SafeString(html))\nend","category":"page"},{"location":"markdown-integration/#Best-Practices","page":"Markdown Integration","title":"Best Practices","text":"","category":"section"},{"location":"markdown-integration/#1.-File-Organization","page":"Markdown Integration","title":"1. File Organization","text":"","category":"section"},{"location":"markdown-integration/","page":"Markdown Integration","title":"Markdown Integration","text":"Structure your Markdown files logically:","category":"page"},{"location":"markdown-integration/","page":"Markdown Integration","title":"Markdown Integration","text":"project/\n├── src/\n│   └── components.jl\n├── content/\n│   ├── pages/\n│   │   ├── home.md\n│   │   └── about.md\n│   ├── blog/\n│   │   └── posts/\n│   └── docs/\n│       ├── getting-started.md\n│       └── api-reference.md","category":"page"},{"location":"markdown-integration/#2.-Props-Documentation","page":"Markdown Integration","title":"2. Props Documentation","text":"","category":"section"},{"location":"markdown-integration/","page":"Markdown Integration","title":"Markdown Integration","text":"Document props in your Markdown files:","category":"page"},{"location":"markdown-integration/","page":"Markdown Integration","title":"Markdown Integration","text":"<!-- product-template.md -->\n<!-- Props: name (String), price (Float64), description (String) -->\n\n# $(name)\n\n**Price:** $$(price)\n\n$(description)","category":"page"},{"location":"markdown-integration/#3.-Performance","page":"Markdown Integration","title":"3. Performance","text":"","category":"section"},{"location":"markdown-integration/","page":"Markdown Integration","title":"Markdown Integration","text":"Cache parsed Markdown for frequently accessed content:","category":"page"},{"location":"markdown-integration/","page":"Markdown Integration","title":"Markdown Integration","text":"const MARKDOWN_CACHE = Dict{String, String}()\n\n@component function cached_markdown(; file)\n    html = get!(MARKDOWN_CACHE, file) do\n        content = read(file, String)\n        CommonMark.html(content)\n    end\n\n    @div {class = \"cached-content\"} $(SafeString(html))\nend","category":"page"},{"location":"markdown-integration/#Summary","page":"Markdown Integration","title":"Summary","text":"","category":"section"},{"location":"markdown-integration/","page":"Markdown Integration","title":"Markdown Integration","text":"Markdown integration in HypertextTemplates.jl provides:","category":"page"},{"location":"markdown-integration/","page":"Markdown Integration","title":"Markdown Integration","text":"Inline Markdown with the CommonMark.jl cm string macro\nFile-based components with @cm_component\nFull interpolation support in Markdown content\nLive reloading with Revise.jl integration","category":"page"},{"location":"markdown-integration/","page":"Markdown Integration","title":"Markdown Integration","text":"This integration makes it easy to build content-heavy sites while maintaining the full power of HypertextTemplates.jl's component system.","category":"page"},{"location":"#HypertextTemplates.jl","page":"Home","title":"HypertextTemplates.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"HTML templating system for Julia","category":"page"},{"location":"","page":"Home","title":"Home","text":"HypertextTemplates.jl is a powerful and efficient HTML templating system that lets you write HTML using Julia's macro syntax. It provides zero-allocation rendering, a sophisticated component system, and seamless integration with Julia's ecosystem.","category":"page"},{"location":"#Key-Features","page":"Home","title":"Key Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Natural Syntax - Write HTML using Julia macros that feel like native code\nZero-allocation rendering - Direct IO streaming without intermediate DOM construction\nComponent System - Build reusable components with props and slots\nContext System - Pass data through component trees without prop drilling\nAutomatic HTML escaping - Automatic XSS protection with context-aware escaping\nDevelopment tools - Source location tracking and editor integration\nStreaming rendering - Asynchronous rendering with micro-batched output\nMarkdown Support - Create components from Markdown files","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n# Simple example\nhtml = @render @div {class = \"container\"} begin\n    @h1 \"Welcome to HypertextTemplates!\"\n    @p \"Build fast, secure web applications with Julia.\"\nend\n\nMain.display_html(ans) #hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"# Component example\n@component function article_card(; title, author, content)\n    @article {class = \"card\"} begin\n        @header begin\n            @h2 {class = \"card-title\"} $title\n            @p {class = \"author\"} \"by \" $author\n        end\n        @div {class = \"card-body\"} $content\n    end\nend\n@deftag macro article_card end\n\n# Use the component\n@render @article_card {\n    title = \"Hello\",\n    author = \"Julia Developer\",\n    content = \"This is a reusable component!\"\n}\n\nMain.display_html(ans) #hide","category":"page"},{"location":"#Documentation","page":"Home","title":"Documentation","text":"","category":"section"},{"location":"#Getting-Started","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Getting Started Guide - Installation and first steps\nCore Concepts - Understanding the fundamentals","category":"page"},{"location":"#Building-Applications","page":"Home","title":"Building Applications","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Components Guide - Creating reusable UI components\nElements & Attributes - Working with HTML elements\nRendering & Performance - Optimization and streaming","category":"page"},{"location":"#Advanced-Topics","page":"Home","title":"Advanced Topics","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Advanced Features - Once rendering, dynamic components\nMarkdown Integration - Using Markdown with templates","category":"page"},{"location":"#API-Reference","page":"Home","title":"API Reference","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Public API - Core functions, macros, and types\nLibrary Components - Pre-built UI component library\nInternal API - Implementation details and internals","category":"page"}]
}

var documenterSearchIndex = {"docs":
[{"location":"#HypertextTemplates.jl","page":"HypertextTemplates.jl","title":"HypertextTemplates.jl","text":"","category":"section"},{"location":"","page":"HypertextTemplates.jl","title":"HypertextTemplates.jl","text":"Hypertext templating DSL for Julia","category":"page"},{"location":"","page":"HypertextTemplates.jl","title":"HypertextTemplates.jl","text":"This package provides a collection of macros for building and rendering HTML from Julia code using all the normal control flow syntax of the language, such as loops and conditional. No intermediate \"virtual\" DOM is constructed during rendering process, which reduces memory allocations. Supports streaming renders of templates via a StreamingRender iterator.","category":"page"},{"location":"","page":"HypertextTemplates.jl","title":"HypertextTemplates.jl","text":"When rendered in \"development\" mode source locations of all elements within the rendered within the DOM are preserved, which allows for lookup from the browser to open the file and line that generated a specific DOM element. This source information is stripped out during production usage to minimise transferred data and avoid leaking internal server details to clients. Ctrl+1 will jump to the @render that created the fragment of HTML under the cursor. Ctrl+2 will jump to the specific element macro call site that generated the fragment of HTML under the cursor.","category":"page"},{"location":"#DSL-Basics","page":"HypertextTemplates.jl","title":"DSL Basics","text":"","category":"section"},{"location":"","page":"HypertextTemplates.jl","title":"HypertextTemplates.jl","text":"using HypertextTemplates\nusing HypertextTemplates.Elements\n\n@render @div {class = \"bg-blue-400\"} begin\n    @h1 \"Document title\"\n    @p \"Content goes here.\"\n    @ul for num in 1:3\n        @li {id = num} @text num\n    end\nend","category":"page"},{"location":"","page":"HypertextTemplates.jl","title":"HypertextTemplates.jl","text":"The DSL (domain specific language) is made up of macro calls that represent HTML elements that match their official names (with a prefixed @). Element attributes are written with {} surrounding key/value pairs defined using =. Nesting of elements within other elements is done using beign end blocks, or for simple cases just as a single expression argument to the macro.","category":"page"},{"location":"","page":"HypertextTemplates.jl","title":"HypertextTemplates.jl","text":"The @render macro wraps the elements and converts it to a String value. If you want to render to a predefined IO object then pass that object as the first argument to @render, eg. @render my_buffer @div ....","category":"page"},{"location":"","page":"HypertextTemplates.jl","title":"HypertextTemplates.jl","text":"Normal looping and conditional syntax is valid within element macros. So the for syntax above results in a ul list with three li children with content 1, 2, and 3 respectively. This extends to any third-party packages that provide their own control flow macros, such as pattern matching.","category":"page"},{"location":"","page":"HypertextTemplates.jl","title":"HypertextTemplates.jl","text":"The @text macro is used when the argument to an element macro is not a simple string literal and marks the expression for rendering into the output.","category":"page"},{"location":"#String-Interpolation-with","page":"HypertextTemplates.jl","title":"String Interpolation with $","text":"","category":"section"},{"location":"","page":"HypertextTemplates.jl","title":"HypertextTemplates.jl","text":"For convenience, you can use $ interpolation syntax instead of @text when you need to render non-string expressions:","category":"page"},{"location":"","page":"HypertextTemplates.jl","title":"HypertextTemplates.jl","text":"@component function user_profile(; name, age, score)\n    @div {class = \"profile\"} begin\n        @h2 \"User: \" $name                    # Same as: @h2 \"User: \" @text name\n        @p \"Age: \" $age \" years old\"          # Same as: @p \"Age: \" @text age \" years old\"\n        @p \"Score: \" $(score * 100) \"%\"       # Same as: @p \"Score: \" @text (score * 100) \"%\"\n    end\nend\n\n# In loops\n@ul for (i, item) in enumerate(items)\n    @li \"Item $i: \" $item                     # Same as: @li \"Item \" @text i \": \" @text item\nend","category":"page"},{"location":"","page":"HypertextTemplates.jl","title":"HypertextTemplates.jl","text":"The $ syntax is particularly useful when mixing string literals with variables or expressions, making templates more readable and closer to Julia's string interpolation syntax. Note that unlike Julia's string interpolation, the $ here doesn't create a single interpolated stringâ€”it marks each expression for rendering while maintaining proper HTML escaping.","category":"page"},{"location":"#Custom-Elements","page":"HypertextTemplates.jl","title":"Custom Elements","text":"","category":"section"},{"location":"","page":"HypertextTemplates.jl","title":"HypertextTemplates.jl","text":"The HypertextTemplates.Elements module exports all valid HTML element names and so should cover most usage. If you want to render a custom element name then use the @element macro to define it.","category":"page"},{"location":"","page":"HypertextTemplates.jl","title":"HypertextTemplates.jl","text":"@element \"my-element\" my_element","category":"page"},{"location":"","page":"HypertextTemplates.jl","title":"HypertextTemplates.jl","text":"The first argument defines the HTML tag to render. The second is the Julia identifier to use within code to reference the element definition.","category":"page"},{"location":"","page":"HypertextTemplates.jl","title":"HypertextTemplates.jl","text":"The my_element definition can then be used within a DOM definition with the @< macro:","category":"page"},{"location":"","page":"HypertextTemplates.jl","title":"HypertextTemplates.jl","text":"@render @<my_element {class = \"rounded-xl\"}","category":"page"},{"location":"","page":"HypertextTemplates.jl","title":"HypertextTemplates.jl","text":"If the @< macro syntax is too cumbersome for the intended usage of the custom element then the @deftag macro can be used to define a macro equivalent to my_element:","category":"page"},{"location":"","page":"HypertextTemplates.jl","title":"HypertextTemplates.jl","text":"@deftag macro my_element end\n\n@render @my_element {id = 1} begin\n    @p \"content\"\nend","category":"page"},{"location":"#@component","page":"HypertextTemplates.jl","title":"@component","text":"","category":"section"},{"location":"","page":"HypertextTemplates.jl","title":"HypertextTemplates.jl","text":"Element definitions can be split up into parts for ease of reuse and maintainability by using the @component macro.","category":"page"},{"location":"","page":"HypertextTemplates.jl","title":"HypertextTemplates.jl","text":"@component function my_component(; prop = \"default\", n = 1)\n    @ul {class = prop} for i in 1:n\n        @li {id = i} \"content\"\n    end\nend\n@deftag macro my_component end\n\n@render @div begin\n    @my_component\n    @my_component {prop = \"custom\", n = 2}\nend","category":"page"},{"location":"","page":"HypertextTemplates.jl","title":"HypertextTemplates.jl","text":"Note how a @deftag was also defined for my_component such that it could be invoked with the macro syntax rather than with @<my_component syntax.","category":"page"},{"location":"","page":"HypertextTemplates.jl","title":"HypertextTemplates.jl","text":"The keywords defined for the function are the equivalent of \"properties\" that you might fine in other component systems within frontend development technologies. They operate in the exact same way as normal Julia keywords.","category":"page"},{"location":"#Component-Slots-with-@__slot__","page":"HypertextTemplates.jl","title":"Component Slots with @__slot__","text":"","category":"section"},{"location":"","page":"HypertextTemplates.jl","title":"HypertextTemplates.jl","text":"Components often need to accept content from their parent component. This is accomplished using slots, which are placeholders for content projection. HypertextTemplates supports both default (unnamed) slots and named slots.","category":"page"},{"location":"#Default-Slots","page":"HypertextTemplates.jl","title":"Default Slots","text":"","category":"section"},{"location":"","page":"HypertextTemplates.jl","title":"HypertextTemplates.jl","text":"The simplest form is a default slot using @__slot__ without any name:","category":"page"},{"location":"","page":"HypertextTemplates.jl","title":"HypertextTemplates.jl","text":"@component function card(; title = \"\")\n    @div {class = \"card\"} begin\n        @div {class = \"card-header\"} @text title\n        @div {class = \"card-body\"} begin\n            @__slot__  # Default slot for content\n        end\n    end\nend\n@deftag macro card end\n\n# Usage\n@render @card {title = \"My Card\"} begin\n    @p \"This content goes into the default slot\"\n    @p \"Multiple elements can be passed\"\nend","category":"page"},{"location":"#Named-Slots","page":"HypertextTemplates.jl","title":"Named Slots","text":"","category":"section"},{"location":"","page":"HypertextTemplates.jl","title":"HypertextTemplates.jl","text":"For more complex layouts, you can use named slots to accept content in multiple locations:","category":"page"},{"location":"","page":"HypertextTemplates.jl","title":"HypertextTemplates.jl","text":"@component function modal(; show = false)\n    @div {class = \"modal\", style = show ? \"\" : \"display: none\"} begin\n        @div {class = \"modal-content\"} begin\n            @div {class = \"modal-header\"} begin\n                @__slot__ header  # Named slot\n            end\n            @div {class = \"modal-body\"} begin\n                @__slot__  # Default slot\n            end\n            @div {class = \"modal-footer\"} begin\n                @__slot__ footer  # Named slot\n            end\n        end\n    end\nend\n@deftag macro modal end\n\n# Usage with named slots\n@render @modal {show = true} begin\n    header := begin  # Named slot content uses :=\n        @h2 \"Confirm Action\"\n        @button {class = \"close\"} \"Ã—\"\n    end\n\n    @p \"Are you sure you want to proceed?\"  # Default slot content\n\n    footer := begin\n        @button {class = \"btn-primary\"} \"Confirm\"\n        @button {class = \"btn-secondary\"} \"Cancel\"\n    end\nend","category":"page"},{"location":"","page":"HypertextTemplates.jl","title":"HypertextTemplates.jl","text":"Slots provide a clean way to create flexible, reusable components that can accept structured content from their consumers while maintaining clear separation of concerns.","category":"page"},{"location":"#@","page":"HypertextTemplates.jl","title":"@<","text":"","category":"section"},{"location":"","page":"HypertextTemplates.jl","title":"HypertextTemplates.jl","text":"The @< macro that was previously introduced allows for using components and elements as first class values; similar to how we can pass Function objects to other functions in Julia.","category":"page"},{"location":"","page":"HypertextTemplates.jl","title":"HypertextTemplates.jl","text":"@component function my_component(; elem = p, class = \"default\")\n    @div begin\n        @<elem {class}\n    end\nend\n\n@render @div begin\n    @my_component\n    @my_component {elem = strong, class = \"custom\"}\nend","category":"page"},{"location":"#@__once__","page":"HypertextTemplates.jl","title":"@__once__","text":"","category":"section"},{"location":"","page":"HypertextTemplates.jl","title":"HypertextTemplates.jl","text":"When you need to render HTML to a page only once per page, for example a JS dependency that only needs including once via <script>, you can use this macro to do that. It ensures that during a single @render call the contents of each @__once__ are only evaluated once even if the rendered components are called more that once.","category":"page"},{"location":"","page":"HypertextTemplates.jl","title":"HypertextTemplates.jl","text":"Most common use cases are for including @link, @style, or @script tags.","category":"page"},{"location":"","page":"HypertextTemplates.jl","title":"HypertextTemplates.jl","text":"@component function jquery()\n    @__once__ begin\n        @script {src = \"https://code.jquery.com/jquery-3.6.0.min.js\"}\n    end\nend\n@deftag macro jquery end\n\n@component function jq_button()\n    @jquery\n    @button \"Click Me\"\nend\n@deftag macro jq_button end\n\n@component function page()\n    @html begin\n        @head begin\n            @jquery\n        end\n        @body begin\n            @h1 \"Hello, World!\"\n            @jq_button\n        end\n    end\nend\n@deftag macro page end","category":"page"},{"location":"#Property-Names","page":"HypertextTemplates.jl","title":"Property Names","text":"","category":"section"},{"location":"","page":"HypertextTemplates.jl","title":"HypertextTemplates.jl","text":"Typically property names, which are defined between {}s are written as Julia identifiers. If one of your property names needs to be an invalid word, perhaps containing a - character then you can also use string literals, \"\", to define the property name. To avoid Julia's linter complaining about string literals on the left hand side of =s you can replace them with :=, which is equivalent.","category":"page"},{"location":"","page":"HypertextTemplates.jl","title":"HypertextTemplates.jl","text":"@render @div {\"x-data\" := \"{ open: false }\"} begin\n    @button {\"@click\" := \"open = true\"} \"Expand\"\n    @span {\"x-show\" := \"open\"} \"Content...\"\nend","category":"page"},{"location":"","page":"HypertextTemplates.jl","title":"HypertextTemplates.jl","text":"The {} property syntax works very similarly to NamedTuple syntax, so if a property has the same name as a variable you want to use as its value then just using the variable itself is allow. ... syntax is also supported to splat a collection of key/value pairs into {}s.","category":"page"},{"location":"","page":"HypertextTemplates.jl","title":"HypertextTemplates.jl","text":"var = \"variable\"\nprops = (; prop = \"value\", other = true)\n@render @div {var, props...}","category":"page"},{"location":"","page":"HypertextTemplates.jl","title":"HypertextTemplates.jl","text":"Note that true values are rendered just as their property name, while false values are not printed at all. If you need to specifically render other=\"true\" in the DOM then write @div {other=\"true\"} instead.","category":"page"},{"location":"#@cm_component","page":"HypertextTemplates.jl","title":"@cm_component","text":"","category":"section"},{"location":"","page":"HypertextTemplates.jl","title":"HypertextTemplates.jl","text":"Markdown files can be turned into component definitions that behave the same way as normal @components. This requires the CommonMark.jl package to be available in your project's dependencies.","category":"page"},{"location":"","page":"HypertextTemplates.jl","title":"HypertextTemplates.jl","text":"@cm_component markdown_file(; prop) = \"file.md\"","category":"page"},{"location":"","page":"HypertextTemplates.jl","title":"HypertextTemplates.jl","text":"The same set of extensions supported by the @cm_str macro in CommonMark.jl are supported in markdown components, expression interpolation included. This means that any keyword props provided in the component definition, such as prop above can be interpolated into the markdown file and will be rendered into the final HTML output that the component generates.","category":"page"},{"location":"#StreamingRender","page":"HypertextTemplates.jl","title":"StreamingRender","text":"","category":"section"},{"location":"","page":"HypertextTemplates.jl","title":"HypertextTemplates.jl","text":"A StreamingRender is an iterator that handles asynchronous execution of @render calls. This is useful if your @component potentially takes a long time to render completely and you wish to begin streaming the HTML to the browser as it becomes available.","category":"page"},{"location":"","page":"HypertextTemplates.jl","title":"HypertextTemplates.jl","text":"for bytes in StreamingRender(io -> @render io @slow_component {args...})\n    write(http_stream, bytes)\nend","category":"page"},{"location":"","page":"HypertextTemplates.jl","title":"HypertextTemplates.jl","text":"do-block syntax is also, naturally, supported by the StreamingRender constructor. All @component definitions support streaming out-of-the-box. Be aware that rendering happens in a Threads.@spawned task.","category":"page"},{"location":"#Docstrings","page":"HypertextTemplates.jl","title":"Docstrings","text":"","category":"section"},{"location":"#HypertextTemplates.MicroBatchWriter","page":"HypertextTemplates.jl","title":"HypertextTemplates.MicroBatchWriter","text":"MicroBatchWriter <: IO\n\nInternal writer that implements the micro-batching strategy. It acts as an intelligent buffer between the rendering code and the Channel, making decisions about when to send data based on size and time thresholds.\n\nThe writer follows these rules:\n\nLarge writes (â‰¥ immediate_threshold) bypass buffering entirely\nSmall writes accumulate in a buffer until a threshold is reached\nA timer ensures buffered data is flushed within maxbuffertime\n\n\n\n\n\n","category":"type"},{"location":"#HypertextTemplates.SafeString","page":"HypertextTemplates.jl","title":"HypertextTemplates.SafeString","text":"SafeString(str)\n\nA string type that bypasses the default HTML escaping that is applied to all strings rendered with @render and DOM element properties. Only apply this type to string values that are not user-defined. If applying this to user-defined values ensure that proper sanitization has been carried out.\n\n\n\n\n\n","category":"type"},{"location":"#HypertextTemplates.StreamingRender","page":"HypertextTemplates.jl","title":"HypertextTemplates.StreamingRender","text":"StreamingRender(func; kwargs...)\n\nAn iterable that will run the render function func, which takes a single io argument that must be passed to the @render macro call.\n\nUses a channel-based implementation with micro-batching for efficient streaming. Large writes (â‰¥64 bytes by default) are sent immediately, while smaller writes are batched for efficiency.\n\nKeywords\n\nbuffer_size::Int=32: Number of chunks the channel can buffer\nchunk_size::Int=4096: Maximum size of buffered chunks (for compatibility)\nimmediate_threshold::Int=64: Bytes above which to send immediately\n\nfor bytes in StreamingRender(io -> @render io @component {args...})\n    write(http_stream, bytes)\nend\n\nOr use a do block rather than -> syntax.\n\n\n\n\n\n","category":"type"},{"location":"#HypertextTemplates.TemplateFileLookup-Tuple{Any}","page":"HypertextTemplates.jl","title":"HypertextTemplates.TemplateFileLookup","text":"TemplateFileLookup(handler)\n\nThis is a developer tool that can be added to an HTTP handler stack to allow the user to open the template file in their default editor by holding down the Ctrl key and clicking on the rendered template. This is useful for debugging navigating the template files instead of having to manually search through a codebase for the template file that renders a given item within a page.\n\nHTTP.serve(router |> TemplateFileLookup, host, port)\n\nAlways add the TemplateFileLookup handler after the other handlers, since it needs to inject a script into the response to listen for clicks on the rendered template.\n\n\n\n\n\n","category":"method"},{"location":"#HypertextTemplates.create_flush_timer-Tuple{HypertextTemplates.MicroBatchWriter}","page":"HypertextTemplates.jl","title":"HypertextTemplates.create_flush_timer","text":"create_flush_timer(writer::MicroBatchWriter)\n\nCreate a Timer that periodically flushes the writer's buffer if data is present and enough time has passed since the last write.\n\nThe timer is crucial for bounded latency - without it, small writes that don't trigger size-based flushing could sit in the buffer indefinitely. This ensures that even a single character written will appear within maxbuffertime.\n\n\n\n\n\n","category":"method"},{"location":"#HypertextTemplates.render-Tuple{Function}","page":"HypertextTemplates.jl","title":"HypertextTemplates.render","text":"render([dst], component; properties...)\n\nRender the component with the given properties to the optional dst. This is the functional version of @render.\n\n\n\n\n\n","category":"method"},{"location":"#HypertextTemplates.@<-Tuple{Any, Vararg{Any}}","page":"HypertextTemplates.jl","title":"HypertextTemplates.@<","text":"@<TAG\n@<TAG children...\n@<TAG {props...}\n@<TAG {props...} children...\n\nRender the TAG component or element with the given children and props.\n\n\n\n\n\n","category":"macro"},{"location":"#HypertextTemplates.@__once__-Tuple{Any}","page":"HypertextTemplates.jl","title":"HypertextTemplates.@__once__","text":"@__once__ expr\n\nEvaluate expr only once per @render call.\n\n\n\n\n\n","category":"macro"},{"location":"#HypertextTemplates.@__slot__","page":"HypertextTemplates.jl","title":"HypertextTemplates.@__slot__","text":"@__slot__ [name]\n\nMark a slot location within the DOM. An unnamed slot will run all expressions that are not named within a @< expression, while named slots will only run the expressions that are named with name := expr syntax.\n\n\n\n\n\n","category":"macro"},{"location":"#HypertextTemplates.@cm_component-Tuple{Any}","page":"HypertextTemplates.jl","title":"HypertextTemplates.@cm_component","text":"@cm_component component_name(; props...) = \"file_name.md\"\n\nCreates a new @component definition from a markdown file. The CommonMark.jl package is used to parsed and render the contents of the file hence that package must be installed as a dependency, since this features is provided via the package extension mechanism.\n\nJust as with a regular @component you can provide props to a markdown component that will be used in any interpolated values (using the CommonMark $ syntax for interpolation).\n\nWhen Revise.jl is active and tracking the package which contains a @cm_component definition updates to the source markdown file are tracked and will cause the rendered component to be updated without the need to redefine the component manually. If Revise.jl is not active then the component definition's markdown AST is generated at compile-time and reused on each render.\n\n\n\n\n\n","category":"macro"},{"location":"#HypertextTemplates.@component-Tuple{Any}","page":"HypertextTemplates.jl","title":"HypertextTemplates.@component","text":"@component function component_name(; properties...)\n    # ...\nend\n\nDefine a new reusable component definition.\n\n\n\n\n\n","category":"macro"},{"location":"#HypertextTemplates.@deftag-Tuple{Any}","page":"HypertextTemplates.jl","title":"HypertextTemplates.@deftag","text":"@deftag macro name end\n@deftag name\n\nCreate a macro version of the given element or component called name. This is a shorthand way to call the @< macro with the given name while still correctly passing the source information through to the renderer. The macro variant allows the LSP to correctly infer the location of the definition whereas the plain symbol variant does not.\n\n\n\n\n\n","category":"macro"},{"location":"#HypertextTemplates.@element","page":"HypertextTemplates.jl","title":"HypertextTemplates.@element","text":"@element name [html_name]\n\nDefine an HTML element name that prints to HTML as html_name, which defaults to name itself.\n\n\n\n\n\n","category":"macro"},{"location":"#HypertextTemplates.@esc_str-Tuple{Any}","page":"HypertextTemplates.jl","title":"HypertextTemplates.@esc_str","text":"esc\"\"\n\nPerform HTML string escaping at macro expansion time rather than runtime.\n\n\n\n\n\n","category":"macro"},{"location":"#HypertextTemplates.@render-Tuple{Any, Any}","page":"HypertextTemplates.jl","title":"HypertextTemplates.@render","text":"@render [destination] dom\n\nRenders the dom tree to the destination object. When no destination is provided then the dom is rendered directly to String and returned as the value of the expression.\n\nThis is only needed for rendering the root of the DOM tree, not for the output of each individual component that is defined.\n\n\n\n\n\n","category":"macro"},{"location":"#HypertextTemplates.@text-Tuple","page":"HypertextTemplates.jl","title":"HypertextTemplates.@text","text":"@text content...\n\nEmbed the given content as plain text in the surrounding DOM tree. Can only be used within DOM expressions. Text is HTML-escaped before printing to the output. Use SafeString to mark text as \"safe\" so that it is not escaped.\n\n\n\n\n\n","category":"macro"}]
}

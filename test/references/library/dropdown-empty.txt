<script>/**
 * Alpine.data component for DropdownMenu
 * 
 * This file defines the interactive behavior for the DropdownMenu component.
 * It uses Alpine.js's data component system to provide reusable dropdown functionality.
 * 
 * Architecture Overview:
 * - Registered as 'dropdown' Alpine.data component
 * - Manages dropdown state and keyboard navigation
 * - Leverages Alpine Anchor plugin for automatic positioning
 * - Provides clean method APIs for event handlers to keep templates simple
 * 
 * Submenu Implementation:
 * - Submenus are positioned using Alpine Anchor with x-anchor="$el.previousElementSibling"
 * - This works because the DOM structure places trigger buttons before content divs
 * - The JavaScript only manages open/closed state, not positioning
 * - Multiple submenus can be open, but only one branch at a time
 * 
 * Dependencies:
 * - Alpine.js v3
 * - Alpine Anchor plugin (for positioning dropdowns and submenus)
 * 
 * Usage in templates:
 * x-data="dropdown()"
 */
document.addEventListener('alpine:init', () => {
    Alpine.data('dropdown', () => ({
        // State management
        open: false,                                // Whether dropdown is currently open
        dropdownId: 'dropdown-' + Math.random().toString(36).substr(2, 9), // Unique ID for coordination
        openSubmenus: {},                           // Track which submenus are open by their IDs


        /**
         * Toggle dropdown open/closed state
         * When opening: dispatches event to close other dropdowns, focuses content
         */
        toggle() {
            this.open = !this.open;
            if (this.open) {
                // Notify other dropdowns to close via Alpine's event system
                // This ensures only one dropdown is open at a time
                this.$dispatch('dropdown-open', { id: this.dropdownId });

                this.$nextTick(() => {
                    this.$refs.content.focus();
                });
            }
        },

        close() {
            this.open = false;
            this.openSubmenus = {};
        },

        // Submenu management
        /**
         * Toggle a submenu open/closed
         * @param {string} id - The unique submenu ID
         * @param {Event} event - The click event
         * 
         * Note: The actual positioning of submenus is handled by Alpine Anchor
         * in the component template using x-anchor="$el.previousElementSibling".
         * This method just manages the open/closed state.
         */
        toggleSubmenu(id, event) {
            if (event) {
                event.stopPropagation();
            }
            
            // If opening this submenu
            if (!this.openSubmenus[id]) {
                // Find all ancestors of this submenu
                const ancestors = this.findSubmenuAncestors(id, event);
                
                // Close all submenus that are NOT ancestors
                // This ensures only one branch of submenus is open at a time
                Object.keys(this.openSubmenus).forEach(key => {
                    if (!ancestors.has(key)) {
                        this.openSubmenus[key] = false;
                    }
                });
                
                // Open the requested submenu
                this.openSubmenus[id] = true;
                
                // Note: Alpine Anchor handles positioning automatically
                // The x-anchor directive in the template uses $el.previousElementSibling
                // to find the trigger button and position relative to it
            } else {
                // Close this submenu and all its descendants
                this.closeSubmenuAndDescendants(id);
            }
        },
        
        // Find all ancestor submenus of the given submenu
        findSubmenuAncestors(id, event) {
            const ancestors = new Set();
            
            if (event && event.currentTarget) {
                // Start from the clicked button's parent submenu container
                let element = event.currentTarget.closest('[data-submenu-id]');
                
                // Traverse up through parent submenus
                while (element) {
                    // Look for parent element that might contain this submenu
                    let parent = element.parentElement;
                    while (parent && parent !== this.$el) {
                        const parentSubmenu = parent.closest('[data-submenu-id]');
                        if (parentSubmenu && parentSubmenu !== element) {
                            const parentId = parentSubmenu.getAttribute('data-submenu-id');
                            if (parentId) {
                                ancestors.add(parentId);
                            }
                            parent = parentSubmenu;
                            break;
                        }
                        parent = parent.parentElement;
                    }
                    element = parent && parent !== this.$el ? parent : null;
                }
            }
            
            return ancestors;
        },
        
        // Close a submenu and all its descendants
        closeSubmenuAndDescendants(id) {
            // Close the submenu itself
            this.openSubmenus[id] = false;
            
            // Find and close all descendant submenus
            const element = this.$el.querySelector(`[data-submenu-id="${id}"]`);
            if (element) {
                const descendants = element.querySelectorAll('[data-submenu-id]');
                descendants.forEach(desc => {
                    const descId = desc.getAttribute('data-submenu-id');
                    if (descId) {
                        this.openSubmenus[descId] = false;
                    }
                });
            }
        },

        /**
         * Check if a submenu is currently open
         * Used by x-show directive in the template
         */
        isSubmenuOpen(id) {
            return this.openSubmenus[id] || false;
        },

        /**
         * Handle keyboard navigation within dropdown
         * Supports: Arrow keys, Home/End, Escape
         * Implements circular navigation (wrap around at ends)
         */
        handleKeydown(event) {
            const items = Array.from(this.$refs.content.querySelectorAll(`[role='menuitem']:not([disabled])`));
            const currentIndex = items.findIndex(item => item === document.activeElement);

            switch (event.key) {
                case 'Escape':
                    this.close();
                    this.$refs.trigger.focus();
                    break;
                case 'ArrowDown':
                    event.preventDefault();
                    if (currentIndex < items.length - 1) {
                        items[currentIndex + 1].focus();
                    } else {
                        items[0].focus();
                    }
                    break;
                case 'ArrowUp':
                    event.preventDefault();
                    if (currentIndex > 0) {
                        items[currentIndex - 1].focus();
                    } else {
                        items[items.length - 1].focus();
                    }
                    break;
                case 'Home':
                    event.preventDefault();
                    items[0]?.focus();
                    break;
                case 'End':
                    event.preventDefault();
                    items[items.length - 1]?.focus();
                    break;
            }
        },


        // Event handler methods
        /**
         * Handle clicks within the dropdown container
         * Closes dropdown if click is not on trigger or content
         * Used by: @click directive on container
         * 
         * Why this is needed:
         * The @click.outside directive only fires for clicks outside the entire dropdown
         * container. However, the dropdown container often has padding or empty space
         * around the trigger button. Without this handler, clicking that empty space
         * wouldn't close the dropdown, which feels unnatural to users.
         * 
         * This handler ensures clicks anywhere in the container (except on the trigger
         * or dropdown content itself) will close the dropdown, providing intuitive behavior.
         */
        handleContainerClick(event) {
            // Don't do anything if dropdown is closed
            if (!this.open) {
                return;
            }
            
            // Check if click is on the trigger or content
            const clickedTrigger = this.$refs.trigger && this.$refs.trigger.contains(event.target);
            const clickedContent = this.$refs.content && this.$refs.content.contains(event.target);
            
            // If clicked outside trigger and content (but still within container), close
            if (!clickedTrigger && !clickedContent) {
                this.close();
            }
        },
        
        /**
         * Handle clicks outside the dropdown - closes if open
         * Used by: @click.outside directive
         */
        handleClickOutside(event) {
            if (this.open) {
                this.close();
            }
        },

        /**
         * Handle global dropdown-open events from other dropdowns
         * Ensures only one dropdown is open at a time
         * Used by: @dropdown-open.window directive
         */
        handleDropdownOpen(event) {
            if (event.detail.id !== this.dropdownId && this.open) {
                this.close();
            }
        },

        /**
         * Focus the first enabled menu item when dropdown content receives focus
         * Used by: @focus directive on dropdown content
         */
        focusFirstItem() {
            this.$el.querySelector('[role="menuitem"]:not([disabled])')?.focus();
        }
    }))
});
</script><style>[x-cloak] { display: none !important; }</style><div class="inline-block text-left " x-data="dropdown()" data-dropdown="true" @keydown.escape="close()" @click.outside="handleClickOutside" @click="handleContainerClick($event)" @dropdown-open.window="handleDropdownOpen"><div x-ref="trigger" @click="toggle()" :aria-expanded="open" aria-haspopup="true" class="inline-block"><button>Empty Menu</button></div><div x-ref="content" x-show="open" x-cloak="" x-anchor.bottom-start.offset.4="$refs.trigger ? $refs.trigger : null" x-transition:enter="transition ease-out duration-100" x-transition:enter-start="transform opacity-0 scale-95" x-transition:enter-end="transform opacity-100 scale-100" x-transition:leave="transition ease-in duration-75" x-transition:leave-start="transform opacity-100 scale-100" x-transition:leave-end="transform opacity-0 scale-95" @keydown="handleKeydown($event)" @focus="focusFirstItem" class="absolute z-[9999] min-w-[12rem] rounded-lg border border-gray-200 bg-white shadow-lg dark:border-gray-700 dark:bg-gray-800 py-1 " role="menu" aria-orientation="vertical" tabindex="-1"></div></div>